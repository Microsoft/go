From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Davis Goodin <dagood@microsoft.com>
Date: Wed, 31 May 2023 16:54:31 -0500
Subject: [PATCH] Add systemcrypto GOEXPERIMENT

Adds systemcrypto GOEXPERIMENT and modifies tag handling to make
goexperiment.systemcrypto behave as an alias that enables the recommended
backend for the target GOOS.

The reverse is also true: goexperiment.systemcrypto can be used as an alias in a
build constraint. It's satisfied when (and only when) the recommended backend
for the target GOOS is enabled, such as goexperiment.opensslcrypto on Linux.

Includes a new test to help maintain this feature. This patch modifies a file
that has been copied to two places in upstream Go, so the new test detects when
the copies get out of sync to avoid problems. Any differences between the copies
would end up causing flaky build behavior differences, so it is particularly
important to test this.
---
 src/cmd/go/internal/modindex/build.go         | 43 +++++++++++
 src/cmd/go/internal/modindex/build_test.go    | 73 +++++++++++++++++++
 src/go/build/build.go                         | 43 +++++++++++
 .../goexperiment/exp_systemcrypto_off.go      |  9 +++
 .../goexperiment/exp_systemcrypto_on.go       |  9 +++
 src/internal/goexperiment/flags.go            | 10 +++
 6 files changed, 187 insertions(+)
 create mode 100644 src/cmd/go/internal/modindex/build_test.go
 create mode 100644 src/internal/goexperiment/exp_systemcrypto_off.go
 create mode 100644 src/internal/goexperiment/exp_systemcrypto_on.go

diff --git a/src/cmd/go/internal/modindex/build.go b/src/cmd/go/internal/modindex/build.go
index b57f2f6368f0fe..e9637c4e030f07 100644
--- a/src/cmd/go/internal/modindex/build.go
+++ b/src/cmd/go/internal/modindex/build.go
@@ -880,13 +880,56 @@ func (ctxt *Context) matchTag(name string, allTags map[string]bool) bool {
 		name = "goexperiment.boringcrypto" // boringcrypto is an old name for goexperiment.boringcrypto
 	}
 
+	// Implement the SystemCrypto GOEXPERIMENT logic. This is done here rather
+	// than during GOEXPERIMENT parsing so "-tags goexperiment.systemcrypto"
+	// will work with "go build".
+	//
+	// Given a build constraint "name", altCryptoName stores an alternative to
+	// "name" that also satisfies the build constaint. For example:
+	//
+	//   - "//go:build goexperiment.opensslcrypto" is satisfied by either "goexperiment.opensslcrypto" or ("goexperiment.systemcrypto" on Linux).
+	//   - "//go:build goexperiment.systemcrypto" is satisfied by either "goexperiment.systemcrypto" or ("goexperiment.opensslcrypto" on Linux).
+	//
+	// It may seem like it's enough to satisfy "goexperiment.systemcrypto" when
+	// "goexperiment.opensslcrypto" is specified, and omit the GOOS=Linux check.
+	// However, systemcrypto is a recommendation by the Microsoft Go toolset,
+	// and we want to be careful not to misinform the user.
+	var altCryptoName string
+	if name == "goexperiment.systemcrypto" {
+		switch ctxt.GOOS {
+		case "linux":
+			altCryptoName = "goexperiment.opensslcrypto"
+		case "windows":
+			altCryptoName = "goexperiment.cngcrypto"
+		}
+	}
+	switch ctxt.GOOS {
+	case "linux":
+		if name == "goexperiment.opensslcrypto" {
+			altCryptoName = "goexperiment.systemcrypto"
+		}
+	case "windows":
+		if name == "goexperiment.cngcrypto" {
+			altCryptoName = "goexperiment.systemcrypto"
+		}
+	}
+	if altCryptoName != "" && allTags != nil {
+		allTags[altCryptoName] = true
+	}
+
 	// other tags
 	for _, tag := range ctxt.BuildTags {
+		if altCryptoName != "" && tag == altCryptoName {
+			return true
+		}
 		if tag == name {
 			return true
 		}
 	}
 	for _, tag := range ctxt.ToolTags {
+		if altCryptoName != "" && tag == altCryptoName {
+			return true
+		}
 		if tag == name {
 			return true
 		}
diff --git a/src/cmd/go/internal/modindex/build_test.go b/src/cmd/go/internal/modindex/build_test.go
new file mode 100644
index 00000000000000..45a0ef25861509
--- /dev/null
+++ b/src/cmd/go/internal/modindex/build_test.go
@@ -0,0 +1,73 @@
+// Copyright 2011 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is not a copy. It tests that the copied code in this directory is
+// maintained. Specifically, it tests areas that are modified by microsoft/go.
+// The files also contain intentional modifications, so it isn't reasonable (as
+// of writing) to test that the entire file is identical.
+
+package modindex
+
+import (
+	"flag"
+	"os"
+	"strings"
+	"testing"
+)
+
+var fixCopy = flag.Bool("fixcopy", false, "if true, update some copied code in build.go")
+
+func TestCopyIdentical(t *testing.T) {
+	originalBytes, err := os.ReadFile("../../../../go/build/build.go")
+	if err != nil {
+		t.Fatal(err)
+	}
+	wantCode := string(originalBytes)
+
+	gotBytes, err := os.ReadFile("build.go")
+	if err != nil {
+		t.Fatal(err)
+	}
+	gotCode := string(gotBytes)
+
+	tests := []struct {
+		name   string
+		prefix string
+		suffix string
+	}{
+		{"matchTag", "func (ctxt *Context) matchTag(name string, allTags map[string]bool) bool {", "\n}"},
+	}
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			var want, got string
+			if _, after, ok := strings.Cut(wantCode, tt.prefix); ok {
+				if before, _, ok := strings.Cut(after, tt.suffix); ok {
+					want = before
+				} else {
+					t.Fatal("suffix not found in original file")
+				}
+			} else {
+				t.Fatal("prefix not found in original file")
+			}
+			if _, after, ok := strings.Cut(gotCode, tt.prefix); ok {
+				if before, _, ok := strings.Cut(after, tt.suffix); ok {
+					got = before
+				} else {
+					t.Fatal("suffix not found in copied file")
+				}
+			} else {
+				t.Fatal("prefix not found in copied file")
+			}
+			if got != want {
+				if *fixCopy {
+					if err := os.WriteFile("build.go", []byte(strings.Replace(gotCode, got, want, 1)), 0o666); err != nil {
+						t.Fatal(err)
+					}
+				} else {
+					t.Error("copy is not the same as original; use '-fixcopy' to replace copied code with the code from the original file")
+				}
+			}
+		})
+	}
+}
diff --git a/src/go/build/build.go b/src/go/build/build.go
index dd6cdc903a21a8..f131a65de2825a 100644
--- a/src/go/build/build.go
+++ b/src/go/build/build.go
@@ -1947,13 +1947,56 @@ func (ctxt *Context) matchTag(name string, allTags map[string]bool) bool {
 		name = "goexperiment.boringcrypto" // boringcrypto is an old name for goexperiment.boringcrypto
 	}
 
+	// Implement the SystemCrypto GOEXPERIMENT logic. This is done here rather
+	// than during GOEXPERIMENT parsing so "-tags goexperiment.systemcrypto"
+	// will work with "go build".
+	//
+	// Given a build constraint "name", altCryptoName stores an alternative to
+	// "name" that also satisfies the build constaint. For example:
+	//
+	//   - "//go:build goexperiment.opensslcrypto" is satisfied by either "goexperiment.opensslcrypto" or ("goexperiment.systemcrypto" on Linux).
+	//   - "//go:build goexperiment.systemcrypto" is satisfied by either "goexperiment.systemcrypto" or ("goexperiment.opensslcrypto" on Linux).
+	//
+	// It may seem like it's enough to satisfy "goexperiment.systemcrypto" when
+	// "goexperiment.opensslcrypto" is specified, and omit the GOOS=Linux check.
+	// However, systemcrypto is a recommendation by the Microsoft Go toolset,
+	// and we want to be careful not to misinform the user.
+	var altCryptoName string
+	if name == "goexperiment.systemcrypto" {
+		switch ctxt.GOOS {
+		case "linux":
+			altCryptoName = "goexperiment.opensslcrypto"
+		case "windows":
+			altCryptoName = "goexperiment.cngcrypto"
+		}
+	}
+	switch ctxt.GOOS {
+	case "linux":
+		if name == "goexperiment.opensslcrypto" {
+			altCryptoName = "goexperiment.systemcrypto"
+		}
+	case "windows":
+		if name == "goexperiment.cngcrypto" {
+			altCryptoName = "goexperiment.systemcrypto"
+		}
+	}
+	if altCryptoName != "" && allTags != nil {
+		allTags[altCryptoName] = true
+	}
+
 	// other tags
 	for _, tag := range ctxt.BuildTags {
+		if altCryptoName != "" && tag == altCryptoName {
+			return true
+		}
 		if tag == name {
 			return true
 		}
 	}
 	for _, tag := range ctxt.ToolTags {
+		if altCryptoName != "" && tag == altCryptoName {
+			return true
+		}
 		if tag == name {
 			return true
 		}
diff --git a/src/internal/goexperiment/exp_systemcrypto_off.go b/src/internal/goexperiment/exp_systemcrypto_off.go
new file mode 100644
index 00000000000000..bd33cd6159c166
--- /dev/null
+++ b/src/internal/goexperiment/exp_systemcrypto_off.go
@@ -0,0 +1,9 @@
+// Code generated by mkconsts.go. DO NOT EDIT.
+
+//go:build !goexperiment.systemcrypto
+// +build !goexperiment.systemcrypto
+
+package goexperiment
+
+const SystemCrypto = false
+const SystemCryptoInt = 0
diff --git a/src/internal/goexperiment/exp_systemcrypto_on.go b/src/internal/goexperiment/exp_systemcrypto_on.go
new file mode 100644
index 00000000000000..9c5b0bbc7b99dc
--- /dev/null
+++ b/src/internal/goexperiment/exp_systemcrypto_on.go
@@ -0,0 +1,9 @@
+// Code generated by mkconsts.go. DO NOT EDIT.
+
+//go:build goexperiment.systemcrypto
+// +build goexperiment.systemcrypto
+
+package goexperiment
+
+const SystemCrypto = true
+const SystemCryptoInt = 1
diff --git a/src/internal/goexperiment/flags.go b/src/internal/goexperiment/flags.go
index ae3cbaf89fa5dd..cacb6cc6ad2da1 100644
--- a/src/internal/goexperiment/flags.go
+++ b/src/internal/goexperiment/flags.go
@@ -60,6 +60,16 @@ type Flags struct {
 	StaticLockRanking bool
 	BoringCrypto      bool
 
+	// SystemCrypto is linked to the OpenSSL or CNG crypto experiment
+	// dependening on which one is appropriate on the target GOOS. Enabling this
+	// experiment will enable the linked experiment, and enabling the linked
+	// experiment will enable SystemCrypto. Other crypto experiment flags have
+	// no effect on SystemCrypto.
+	//
+	// If SystemCrypto is enabled but no crypto experiment is appropriate on the
+	// target GOOS, the build fails.
+	SystemCrypto bool
+
 	// Regabi is split into several sub-experiments that can be
 	// enabled individually. Not all combinations work.
 	// The "regabi" GOEXPERIMENT is an alias for all "working"
