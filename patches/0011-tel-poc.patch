From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: qmuntal <qmuntaldiaz@microsoft.com>
Date: Tue, 11 Feb 2025 00:23:30 +0100
Subject: [PATCH] tel poc

---
 src/cmd/go.mod                                |    4 +
 src/cmd/go.sum                                |   45 +
 src/cmd/internal/telemetry/counter/counter.go |   47 +-
 src/cmd/internal/telemetry/telemetry.go       |   28 +-
 .../code.cloudfoundry.org/clock/LICENSE       |  201 +
 .../vendor/code.cloudfoundry.org/clock/NOTICE |   20 +
 .../code.cloudfoundry.org/clock/README.md     |    5 +
 .../code.cloudfoundry.org/clock/clock.go      |   53 +
 .../code.cloudfoundry.org/clock/package.go    |    1 +
 .../code.cloudfoundry.org/clock/ticker.go     |   20 +
 .../code.cloudfoundry.org/clock/timer.go      |   25 +
 .../vendor/github.com/gofrs/uuid/.gitignore   |   15 +
 .../vendor/github.com/gofrs/uuid/.travis.yml  |   22 +
 src/cmd/vendor/github.com/gofrs/uuid/LICENSE  |   20 +
 .../vendor/github.com/gofrs/uuid/README.md    |  109 +
 src/cmd/vendor/github.com/gofrs/uuid/codec.go |  212 +
 src/cmd/vendor/github.com/gofrs/uuid/fuzz.go  |   47 +
 .../vendor/github.com/gofrs/uuid/generator.go |  299 ++
 src/cmd/vendor/github.com/gofrs/uuid/sql.go   |  109 +
 src/cmd/vendor/github.com/gofrs/uuid/uuid.go  |  250 +
 .../microsoft/ApplicationInsights-Go/LICENSE  |   22 +
 .../appinsights/client.go                     |  155 +
 .../appinsights/clock.go                      |   11 +
 .../appinsights/configuration.go              |   52 +
 .../appinsights/constants.go                  |   20 +
 .../appinsights/contracts/availabilitydata.go |  111 +
 .../appinsights/contracts/base.go             |   25 +
 .../appinsights/contracts/contexttagkeys.go   |  153 +
 .../appinsights/contracts/contexttags.go      |  565 +++
 .../appinsights/contracts/data.go             |   25 +
 .../appinsights/contracts/datapoint.go        |   54 +
 .../appinsights/contracts/datapointtype.go    |   22 +
 .../appinsights/contracts/domain.go           |   21 +
 .../appinsights/contracts/envelope.go         |   82 +
 .../appinsights/contracts/eventdata.go        |   82 +
 .../appinsights/contracts/exceptiondata.go    |   93 +
 .../appinsights/contracts/exceptiondetails.go |   66 +
 .../appinsights/contracts/messagedata.go      |   72 +
 .../appinsights/contracts/metricdata.go       |   68 +
 .../appinsights/contracts/package.go          |    4 +
 .../appinsights/contracts/pageviewdata.go     |   85 +
 .../contracts/remotedependencydata.go         |  134 +
 .../appinsights/contracts/requestdata.go      |  125 +
 .../appinsights/contracts/severitylevel.go    |   31 +
 .../appinsights/contracts/stackframe.go       |   52 +
 .../appinsights/diagnostics.go                |   88 +
 .../appinsights/exception.go                  |  150 +
 .../appinsights/inmemorychannel.go            |  449 ++
 .../appinsights/jsonserializer.go             |   25 +
 .../appinsights/package.go                    |    8 +
 .../appinsights/telemetry.go                  |  652 +++
 .../appinsights/telemetrychannel.go           |   50 +
 .../appinsights/telemetrycontext.go           |  104 +
 .../appinsights/throttle.go                   |  144 +
 .../appinsights/transmitter.go                |  240 +
 .../appinsights/uuid.go                       |   72 +
 .../microsoft/go-deviceid/.gitignore          |  398 ++
 .../microsoft/go-deviceid/CODE_OF_CONDUCT.md  |    9 +
 .../microsoft/go-deviceid/CONTRIBUTING.md     |   14 +
 .../microsoft/go-deviceid/LICENSE.txt         |   23 +
 .../microsoft/go-deviceid/README.md           |   42 +
 .../microsoft/go-deviceid/SECURITY.md         |   41 +
 .../microsoft/go-deviceid/SUPPORT.md          |    8 +
 .../go-deviceid/devid_all_platforms.go        |   87 +
 .../microsoft/go-deviceid/devid_darwin.go     |   30 +
 .../microsoft/go-deviceid/devid_linux.go      |   35 +
 .../microsoft/go-deviceid/devid_windows.go    |   59 +
 .../golang.org/x/sync/errgroup/errgroup.go    |  135 -
 .../golang.org/x/sync/errgroup/go120.go       |   13 -
 .../golang.org/x/sync/errgroup/pre_go120.go   |   14 -
 .../golang.org/x/sys/windows/registry/key.go  |  205 +
 .../x/sys/windows/registry/mksyscall.go       |    9 +
 .../x/sys/windows/registry/syscall.go         |   32 +
 .../x/sys/windows/registry/value.go           |  386 ++
 .../sys/windows/registry/zsyscall_windows.go  |  117 +
 .../golang.org/x/telemetry/.dockerignore      |   17 -
 .../golang.org/x/telemetry/.eslintrc.json     |   11 -
 .../golang.org/x/telemetry/.gitattributes     |   14 -
 .../vendor/golang.org/x/telemetry/.gitignore  |    2 -
 .../golang.org/x/telemetry/.prettierrc.json   |    1 -
 .../golang.org/x/telemetry/.stylelintrc.json  |   11 -
 .../golang.org/x/telemetry/CONTRIBUTING.md    |   30 -
 .../vendor/golang.org/x/telemetry/README.md   |   62 -
 src/cmd/vendor/golang.org/x/telemetry/dir.go  |   12 -
 src/cmd/vendor/golang.org/x/telemetry/doc.go  |    1 -
 .../x/telemetry/internal/config/config.go     |  140 -
 .../internal/configstore/download.go          |   86 -
 .../internal/configstore/download_windows.go  |   33 -
 .../internal/crashmonitor/crash_go123.go      |   17 -
 .../internal/crashmonitor/monitor.go          |  256 -
 .../x/telemetry/internal/upload/Doc.txt       |   45 -
 .../x/telemetry/internal/upload/date.go       |   85 -
 .../x/telemetry/internal/upload/findwork.go   |  102 -
 .../x/telemetry/internal/upload/reports.go    |  344 --
 .../x/telemetry/internal/upload/run.go        |  226 -
 .../x/telemetry/internal/upload/upload.go     |  117 -
 src/cmd/vendor/golang.org/x/telemetry/mode.go |   38 -
 src/cmd/vendor/golang.org/x/telemetry/npm     |   13 -
 src/cmd/vendor/golang.org/x/telemetry/npx     |   13 -
 .../golang.org/x/telemetry/package-lock.json  | 4363 -----------------
 .../golang.org/x/telemetry/package.json       |   23 -
 .../vendor/golang.org/x/telemetry/start.go    |  358 --
 .../golang.org/x/telemetry/start_posix.go     |   22 -
 .../golang.org/x/telemetry/start_windows.go   |   29 -
 .../golang.org/x/telemetry/tsconfig.json      |   26 -
 .../golang.org/x/telemetry/types_alias.go     |   21 -
 src/cmd/vendor/modules.txt                    |   20 +-
 107 files changed, 7123 insertions(+), 6716 deletions(-)
 create mode 100644 src/cmd/vendor/code.cloudfoundry.org/clock/LICENSE
 create mode 100644 src/cmd/vendor/code.cloudfoundry.org/clock/NOTICE
 create mode 100644 src/cmd/vendor/code.cloudfoundry.org/clock/README.md
 create mode 100644 src/cmd/vendor/code.cloudfoundry.org/clock/clock.go
 create mode 100644 src/cmd/vendor/code.cloudfoundry.org/clock/package.go
 create mode 100644 src/cmd/vendor/code.cloudfoundry.org/clock/ticker.go
 create mode 100644 src/cmd/vendor/code.cloudfoundry.org/clock/timer.go
 create mode 100644 src/cmd/vendor/github.com/gofrs/uuid/.gitignore
 create mode 100644 src/cmd/vendor/github.com/gofrs/uuid/.travis.yml
 create mode 100644 src/cmd/vendor/github.com/gofrs/uuid/LICENSE
 create mode 100644 src/cmd/vendor/github.com/gofrs/uuid/README.md
 create mode 100644 src/cmd/vendor/github.com/gofrs/uuid/codec.go
 create mode 100644 src/cmd/vendor/github.com/gofrs/uuid/fuzz.go
 create mode 100644 src/cmd/vendor/github.com/gofrs/uuid/generator.go
 create mode 100644 src/cmd/vendor/github.com/gofrs/uuid/sql.go
 create mode 100644 src/cmd/vendor/github.com/gofrs/uuid/uuid.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/LICENSE
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/client.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/clock.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/configuration.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/constants.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/availabilitydata.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/base.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/contexttagkeys.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/contexttags.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/data.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/datapoint.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/datapointtype.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/domain.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/envelope.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/eventdata.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/exceptiondata.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/exceptiondetails.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/messagedata.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/metricdata.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/package.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/pageviewdata.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/remotedependencydata.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/requestdata.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/severitylevel.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/stackframe.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/diagnostics.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/exception.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/inmemorychannel.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/jsonserializer.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/package.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/telemetry.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/telemetrychannel.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/telemetrycontext.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/throttle.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/transmitter.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/uuid.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/go-deviceid/.gitignore
 create mode 100644 src/cmd/vendor/github.com/microsoft/go-deviceid/CODE_OF_CONDUCT.md
 create mode 100644 src/cmd/vendor/github.com/microsoft/go-deviceid/CONTRIBUTING.md
 create mode 100644 src/cmd/vendor/github.com/microsoft/go-deviceid/LICENSE.txt
 create mode 100644 src/cmd/vendor/github.com/microsoft/go-deviceid/README.md
 create mode 100644 src/cmd/vendor/github.com/microsoft/go-deviceid/SECURITY.md
 create mode 100644 src/cmd/vendor/github.com/microsoft/go-deviceid/SUPPORT.md
 create mode 100644 src/cmd/vendor/github.com/microsoft/go-deviceid/devid_all_platforms.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/go-deviceid/devid_darwin.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/go-deviceid/devid_linux.go
 create mode 100644 src/cmd/vendor/github.com/microsoft/go-deviceid/devid_windows.go
 delete mode 100644 src/cmd/vendor/golang.org/x/sync/errgroup/errgroup.go
 delete mode 100644 src/cmd/vendor/golang.org/x/sync/errgroup/go120.go
 delete mode 100644 src/cmd/vendor/golang.org/x/sync/errgroup/pre_go120.go
 create mode 100644 src/cmd/vendor/golang.org/x/sys/windows/registry/key.go
 create mode 100644 src/cmd/vendor/golang.org/x/sys/windows/registry/mksyscall.go
 create mode 100644 src/cmd/vendor/golang.org/x/sys/windows/registry/syscall.go
 create mode 100644 src/cmd/vendor/golang.org/x/sys/windows/registry/value.go
 create mode 100644 src/cmd/vendor/golang.org/x/sys/windows/registry/zsyscall_windows.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/.dockerignore
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/.eslintrc.json
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/.gitattributes
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/.gitignore
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/.prettierrc.json
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/.stylelintrc.json
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/CONTRIBUTING.md
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/README.md
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/dir.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/doc.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/internal/config/config.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/internal/configstore/download.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/internal/configstore/download_windows.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/internal/crashmonitor/crash_go123.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/internal/crashmonitor/monitor.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/internal/upload/Doc.txt
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/internal/upload/date.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/internal/upload/findwork.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/internal/upload/reports.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/internal/upload/run.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/internal/upload/upload.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/mode.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/npm
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/npx
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/package-lock.json
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/package.json
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/start.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/start_posix.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/start_windows.go
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/tsconfig.json
 delete mode 100644 src/cmd/vendor/golang.org/x/telemetry/types_alias.go

diff --git a/src/cmd/go.mod b/src/cmd/go.mod
index b29321de7b4244..87e7f1cc14b21d 100644
--- a/src/cmd/go.mod
+++ b/src/cmd/go.mod
@@ -4,6 +4,8 @@ go 1.24
 
 require (
 	github.com/google/pprof v0.0.0-20241101162523-b92577c0c142
+	github.com/microsoft/ApplicationInsights-Go v0.4.4
+	github.com/microsoft/go-deviceid v1.0.0
 	golang.org/x/arch v0.12.0
 	golang.org/x/build v0.0.0-20241205234318-b850320af2a4
 	golang.org/x/mod v0.22.0
@@ -15,6 +17,8 @@ require (
 )
 
 require (
+	code.cloudfoundry.org/clock v0.0.0-20180518195852-02e53af36e6c // indirect
+	github.com/gofrs/uuid v3.3.0+incompatible // indirect
 	github.com/ianlancetaylor/demangle v0.0.0-20240912202439-0a2b6291aafd // indirect
 	golang.org/x/text v0.21.0 // indirect
 	rsc.io/markdown v0.0.0-20240306144322-0bf8f97ee8ef // indirect
diff --git a/src/cmd/go.sum b/src/cmd/go.sum
index 5c262454d5b653..c9c3d263b7a04e 100644
--- a/src/cmd/go.sum
+++ b/src/cmd/go.sum
@@ -1,9 +1,41 @@
+code.cloudfoundry.org/clock v0.0.0-20180518195852-02e53af36e6c h1:5eeuG0BHx1+DHeT3AP+ISKZ2ht1UjGhm581ljqYpVeQ=
+code.cloudfoundry.org/clock v0.0.0-20180518195852-02e53af36e6c/go.mod h1:QD9Lzhd/ux6eNQVUDVRJX/RKTigpewimNYBi7ivZKY8=
+github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
+github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
+github.com/fsnotify/fsnotify v1.4.7/go.mod h1:jwhsz4b93w/PPRr/qN1Yymfu8t87LnFCMoQvtojpjFo=
+github.com/gofrs/uuid v3.3.0+incompatible h1:8K4tyRfvU1CYPgJsveYFQMhpFd/wXNM7iK6rR7UHz84=
+github.com/gofrs/uuid v3.3.0+incompatible/go.mod h1:b2aQJv3Z4Fp6yNu3cdSllBxTCLRxnplIgP/c0N/04lM=
+github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
 github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
 github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
 github.com/google/pprof v0.0.0-20241101162523-b92577c0c142 h1:sAGdeJj0bnMgUNVeUpp6AYlVdCt3/GdI3pGRqsNSQLs=
 github.com/google/pprof v0.0.0-20241101162523-b92577c0c142/go.mod h1:vavhavw2zAxS5dIdcRluK6cSGGPlZynqzFM8NdvU144=
+github.com/hpcloud/tail v1.0.0/go.mod h1:ab1qPbhIpdTxEkNHXyeSf5vhxWSCs/tWer42PpOxQnU=
 github.com/ianlancetaylor/demangle v0.0.0-20240912202439-0a2b6291aafd h1:EVX1s+XNss9jkRW9K6XGJn2jL2lB1h5H804oKPsxOec=
 github.com/ianlancetaylor/demangle v0.0.0-20240912202439-0a2b6291aafd/go.mod h1:gx7rwoVhcfuVKG5uya9Hs3Sxj7EIvldVofAWIUtGouw=
+github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
+github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
+github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
+github.com/microsoft/ApplicationInsights-Go v0.4.4 h1:G4+H9WNs6ygSCe6sUyxRc2U81TI5Es90b2t/MwX5KqY=
+github.com/microsoft/ApplicationInsights-Go v0.4.4/go.mod h1:fKRUseBqkw6bDiXTs3ESTiU/4YTIHsQS4W3fP2ieF4U=
+github.com/microsoft/go-deviceid v1.0.0 h1:i5AQ654Xk9kfvwJeKQm3w2+eT1+ImBDVEpAR0AjpP40=
+github.com/microsoft/go-deviceid v1.0.0/go.mod h1:KY13FeVdHkzD8gy+6T8+kVmD/7RMpTaWW75K+T4uZWg=
+github.com/onsi/ginkgo v1.6.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
+github.com/onsi/ginkgo v1.8.0/go.mod h1:lLunBs/Ym6LB5Z9jYTR76FiuTmxDTDusOGeTQH+WWjE=
+github.com/onsi/gomega v1.5.0/go.mod h1:ex+gbHU/CVuBBDIJjb2X0qEXbFg53c61hWP/1CpauHY=
+github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
+github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
+github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
+github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
+github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
+github.com/stretchr/objx v0.5.2/go.mod h1:FRsXN1f5AsAjCGJKqEizvkpNtU+EGNCLh3NxZ/8L+MA=
+github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
+github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
+github.com/stretchr/testify v1.8.4/go.mod h1:sz/lmYIOXD/1dqDmKjjqLyZ2RngseejIcXlSw2iwfAo=
+github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=
+github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
+github.com/tedsuo/ifrit v0.0.0-20180802180643-bea94bb476cc/go.mod h1:eyZnKCc955uh98WQvzOm0dgAeLnf2O0Rz0LPoC5ze+0=
 github.com/yuin/goldmark v1.6.0 h1:boZcn2GTjpsynOsC0iJHnBWa4Bi0qzfJjthwauItG68=
 github.com/yuin/goldmark v1.6.0/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=
 golang.org/x/arch v0.12.0 h1:UsYJhbzPYGsT0HbEdmYcqtCv8UNGvnaL561NnIUvaKg=
@@ -12,17 +44,30 @@ golang.org/x/build v0.0.0-20241205234318-b850320af2a4 h1:ri5CIHQTJCd3jd0Jez97HiP
 golang.org/x/build v0.0.0-20241205234318-b850320af2a4/go.mod h1:9O1P9bdbWH7KXtcbo+6amI/59H5mNq7+CTE1eKqNsjg=
 golang.org/x/mod v0.22.0 h1:D4nJWe9zXqHOmWqj4VMOJhvzj7bEZg4wEYa759z1pH4=
 golang.org/x/mod v0.22.0/go.mod h1:6SkKJ3Xj0I0BrPOZoBy3bdMptDDU9oJrpohJ3eWZ1fY=
+golang.org/x/net v0.0.0-20180906233101-161cd47e91fd/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
+golang.org/x/sync v0.0.0-20180314180146-1d60e4601c6f/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
 golang.org/x/sync v0.10.0 h1:3NQrjDixjgGwUOCaF8w2+VYHv0Ve/vGYSbdkTa98gmQ=
 golang.org/x/sync v0.10.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
+golang.org/x/sys v0.0.0-20180909124046-d0be0721c37e/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
+golang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/sys v0.28.0 h1:Fksou7UEQUWlKvIdsqzJmUmCX3cZuD2+P3XyyzwMhlA=
 golang.org/x/sys v0.28.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
 golang.org/x/telemetry v0.0.0-20241204182053-c0ac0e154df3 h1:rCLsPBq7l0E9Z451UgkWFkaWYhgt7dGmAlpD6hLjK5I=
 golang.org/x/telemetry v0.0.0-20241204182053-c0ac0e154df3/go.mod h1:8h4Hgq+jcTvCDv2+i7NrfWwpYHcESleo2nGHxLbFLJ4=
 golang.org/x/term v0.27.0 h1:WP60Sv1nlK1T6SupCHbXzSaN0b9wUmsPoRS9b61A23Q=
 golang.org/x/term v0.27.0/go.mod h1:iMsnZpn0cago0GOrHO2+Y7u7JPn5AylBrcoWkElMTSM=
+golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
 golang.org/x/text v0.21.0 h1:zyQAAkrwaneQ066sspRyJaG9VNi/YJ1NfzcGB3hZ/qo=
 golang.org/x/text v0.21.0/go.mod h1:4IBbMaMmOPCJ8SecivzSH54+73PCFmPWxNTLm+vZkEQ=
 golang.org/x/tools v0.28.0 h1:WuB6qZ4RPCQo5aP3WdKZS7i595EdWqWR8vqJTlwTVK8=
 golang.org/x/tools v0.28.0/go.mod h1:dcIOrVd3mfQKTgrDVQHqCPMWy6lnhfhtX3hLXYVLfRw=
+gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
+gopkg.in/fsnotify.v1 v1.4.7/go.mod h1:Tz8NjZHkW78fSQdbUxIjBTcgA1z1m8ZHf0WmKUhAMys=
+gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=
+gopkg.in/yaml.v2 v2.2.1/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
+gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
+gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
+gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
 rsc.io/markdown v0.0.0-20240306144322-0bf8f97ee8ef h1:mqLYrXCXYEZOop9/Dbo6RPX11539nwiCNBb1icVPmw8=
 rsc.io/markdown v0.0.0-20240306144322-0bf8f97ee8ef/go.mod h1:8xcPgWmwlZONN1D9bjxtHEjrUtSEa3fakVF8iaewYKQ=
diff --git a/src/cmd/internal/telemetry/counter/counter.go b/src/cmd/internal/telemetry/counter/counter.go
index 5cef0b0041551a..b9ceaa15e6aa07 100644
--- a/src/cmd/internal/telemetry/counter/counter.go
+++ b/src/cmd/internal/telemetry/counter/counter.go
@@ -8,11 +8,27 @@ package counter
 
 import (
 	"flag"
-	"os"
 
+	"github.com/microsoft/ApplicationInsights-Go/appinsights"
+	"github.com/microsoft/go-deviceid"
 	"golang.org/x/telemetry/counter"
 )
 
+const (
+	instrumentationKey = "FAKE-KEY"
+)
+
+var Client appinsights.TelemetryClient
+
+type Counter struct {
+	name string
+}
+
+func (c *Counter) Inc() {
+	Client.TrackEvent(c.name)
+	Client.Channel().Flush()
+}
+
 var openCalled bool
 
 func OpenCalled() bool { return openCalled }
@@ -21,17 +37,32 @@ func OpenCalled() bool { return openCalled }
 // on the current platform (and does nothing otherwise).
 func Open() {
 	openCalled = true
-	counter.OpenDir(os.Getenv("TEST_TELEMETRY_DIR"))
+	if Client != nil {
+		return
+	}
+
+	config := appinsights.NewTelemetryConfiguration(instrumentationKey)
+	Client = appinsights.NewTelemetryClientFromConfig(config)
+
+	Client.Context().CommonProperties = map[string]string{
+		"msgo.telemetry.version": "1.0.0",
+		"msgo.version":           "0.0.0",
+	}
+
+	did, err := deviceid.Get()
+	if err == nil {
+		Client.Context().CommonProperties["msgo.deviceId"] = did
+	}
 }
 
 // Inc increments the counter with the given name.
 func Inc(name string) {
-	counter.Inc(name)
+	New(name).Inc()
 }
 
 // New returns a counter with the given name.
-func New(name string) *counter.Counter {
-	return counter.New(name)
+func New(name string) *Counter {
+	return &Counter{name: name}
 }
 
 // NewStack returns a new stack counter with the given name and depth.
@@ -43,7 +74,9 @@ func NewStack(name string, depth int) *counter.StackCounter {
 // and increments the counter. The name of the counter is
 // the concatenation of prefix and the flag name.
 func CountFlags(prefix string, flagSet flag.FlagSet) {
-	counter.CountFlags(prefix, flagSet)
+	flagSet.Visit(func(f *flag.Flag) {
+		New(prefix + f.Name).Inc()
+	})
 }
 
 // CountFlagValue creates a counter for the flag value
@@ -56,7 +89,7 @@ func CountFlagValue(prefix string, flagSet flag.FlagSet, flagName string) {
 	// TODO(matloob): Add this to x/telemetry?
 	flagSet.Visit(func(f *flag.Flag) {
 		if f.Name == flagName {
-			counter.New(prefix + f.Name + ":" + f.Value.String()).Inc()
+			New(prefix + f.Name + ":" + f.Value.String()).Inc()
 		}
 	})
 }
diff --git a/src/cmd/internal/telemetry/telemetry.go b/src/cmd/internal/telemetry/telemetry.go
index ca84fe39b18438..ea1f31ed5c4017 100644
--- a/src/cmd/internal/telemetry/telemetry.go
+++ b/src/cmd/internal/telemetry/telemetry.go
@@ -11,14 +11,6 @@
 // on Windows).
 package telemetry
 
-import (
-	"os"
-
-	"cmd/internal/telemetry/counter"
-
-	"golang.org/x/telemetry"
-)
-
 var openCountersCalled, maybeChildCalled bool
 
 // MaybeParent does a once a day check to see if the weekly reports are
@@ -26,13 +18,7 @@ var openCountersCalled, maybeChildCalled bool
 // do so. It should only be called by cmd/go, and only after OpenCounters and MaybeChild
 // have already been called.
 func MaybeParent() {
-	if !counter.OpenCalled() || !maybeChildCalled {
-		panic("MaybeParent must be called after OpenCounters and MaybeChild")
-	}
-	telemetry.Start(telemetry.Config{
-		Upload:       true,
-		TelemetryDir: os.Getenv("TEST_TELEMETRY_DIR"),
-	})
+	//counter.Client.Flush
 }
 
 // MaybeChild executes the telemetry child logic if the calling program is
@@ -40,11 +26,7 @@ func MaybeParent() {
 // called as the first thing in a program that uses telemetry.OpenCounters but cannot
 // call telemetry.OpenCounters immediately when it starts.
 func MaybeChild() {
-	maybeChildCalled = true
-	telemetry.MaybeChild(telemetry.Config{
-		Upload:       true,
-		TelemetryDir: os.Getenv("TEST_TELEMETRY_DIR"),
-	})
+	//counter.Open()
 }
 
 // Mode returns the current telemetry mode.
@@ -63,7 +45,7 @@ func MaybeChild() {
 //
 // [gotelemetry]: https://pkg.go.dev/golang.org/x/telemetry/cmd/gotelemetry
 func Mode() string {
-	return telemetry.Mode()
+	return "on"
 }
 
 // SetMode sets the global telemetry mode to the given value.
@@ -74,10 +56,10 @@ func Mode() string {
 // An error is returned if the provided mode value is invalid, or if an error
 // occurs while persisting the mode value to the file system.
 func SetMode(mode string) error {
-	return telemetry.SetMode(mode)
+	return nil
 }
 
 // Dir returns the telemetry directory.
 func Dir() string {
-	return telemetry.Dir()
+	return ""
 }
diff --git a/src/cmd/vendor/code.cloudfoundry.org/clock/LICENSE b/src/cmd/vendor/code.cloudfoundry.org/clock/LICENSE
new file mode 100644
index 00000000000000..f49a4e16e68b12
--- /dev/null
+++ b/src/cmd/vendor/code.cloudfoundry.org/clock/LICENSE
@@ -0,0 +1,201 @@
+                                 Apache License
+                           Version 2.0, January 2004
+                        http://www.apache.org/licenses/
+
+   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
+
+   1. Definitions.
+
+      "License" shall mean the terms and conditions for use, reproduction,
+      and distribution as defined by Sections 1 through 9 of this document.
+
+      "Licensor" shall mean the copyright owner or entity authorized by
+      the copyright owner that is granting the License.
+
+      "Legal Entity" shall mean the union of the acting entity and all
+      other entities that control, are controlled by, or are under common
+      control with that entity. For the purposes of this definition,
+      "control" means (i) the power, direct or indirect, to cause the
+      direction or management of such entity, whether by contract or
+      otherwise, or (ii) ownership of fifty percent (50%) or more of the
+      outstanding shares, or (iii) beneficial ownership of such entity.
+
+      "You" (or "Your") shall mean an individual or Legal Entity
+      exercising permissions granted by this License.
+
+      "Source" form shall mean the preferred form for making modifications,
+      including but not limited to software source code, documentation
+      source, and configuration files.
+
+      "Object" form shall mean any form resulting from mechanical
+      transformation or translation of a Source form, including but
+      not limited to compiled object code, generated documentation,
+      and conversions to other media types.
+
+      "Work" shall mean the work of authorship, whether in Source or
+      Object form, made available under the License, as indicated by a
+      copyright notice that is included in or attached to the work
+      (an example is provided in the Appendix below).
+
+      "Derivative Works" shall mean any work, whether in Source or Object
+      form, that is based on (or derived from) the Work and for which the
+      editorial revisions, annotations, elaborations, or other modifications
+      represent, as a whole, an original work of authorship. For the purposes
+      of this License, Derivative Works shall not include works that remain
+      separable from, or merely link (or bind by name) to the interfaces of,
+      the Work and Derivative Works thereof.
+
+      "Contribution" shall mean any work of authorship, including
+      the original version of the Work and any modifications or additions
+      to that Work or Derivative Works thereof, that is intentionally
+      submitted to Licensor for inclusion in the Work by the copyright owner
+      or by an individual or Legal Entity authorized to submit on behalf of
+      the copyright owner. For the purposes of this definition, "submitted"
+      means any form of electronic, verbal, or written communication sent
+      to the Licensor or its representatives, including but not limited to
+      communication on electronic mailing lists, source code control systems,
+      and issue tracking systems that are managed by, or on behalf of, the
+      Licensor for the purpose of discussing and improving the Work, but
+      excluding communication that is conspicuously marked or otherwise
+      designated in writing by the copyright owner as "Not a Contribution."
+
+      "Contributor" shall mean Licensor and any individual or Legal Entity
+      on behalf of whom a Contribution has been received by Licensor and
+      subsequently incorporated within the Work.
+
+   2. Grant of Copyright License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      copyright license to reproduce, prepare Derivative Works of,
+      publicly display, publicly perform, sublicense, and distribute the
+      Work and such Derivative Works in Source or Object form.
+
+   3. Grant of Patent License. Subject to the terms and conditions of
+      this License, each Contributor hereby grants to You a perpetual,
+      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
+      (except as stated in this section) patent license to make, have made,
+      use, offer to sell, sell, import, and otherwise transfer the Work,
+      where such license applies only to those patent claims licensable
+      by such Contributor that are necessarily infringed by their
+      Contribution(s) alone or by combination of their Contribution(s)
+      with the Work to which such Contribution(s) was submitted. If You
+      institute patent litigation against any entity (including a
+      cross-claim or counterclaim in a lawsuit) alleging that the Work
+      or a Contribution incorporated within the Work constitutes direct
+      or contributory patent infringement, then any patent licenses
+      granted to You under this License for that Work shall terminate
+      as of the date such litigation is filed.
+
+   4. Redistribution. You may reproduce and distribute copies of the
+      Work or Derivative Works thereof in any medium, with or without
+      modifications, and in Source or Object form, provided that You
+      meet the following conditions:
+
+      (a) You must give any other recipients of the Work or
+          Derivative Works a copy of this License; and
+
+      (b) You must cause any modified files to carry prominent notices
+          stating that You changed the files; and
+
+      (c) You must retain, in the Source form of any Derivative Works
+          that You distribute, all copyright, patent, trademark, and
+          attribution notices from the Source form of the Work,
+          excluding those notices that do not pertain to any part of
+          the Derivative Works; and
+
+      (d) If the Work includes a "NOTICE" text file as part of its
+          distribution, then any Derivative Works that You distribute must
+          include a readable copy of the attribution notices contained
+          within such NOTICE file, excluding those notices that do not
+          pertain to any part of the Derivative Works, in at least one
+          of the following places: within a NOTICE text file distributed
+          as part of the Derivative Works; within the Source form or
+          documentation, if provided along with the Derivative Works; or,
+          within a display generated by the Derivative Works, if and
+          wherever such third-party notices normally appear. The contents
+          of the NOTICE file are for informational purposes only and
+          do not modify the License. You may add Your own attribution
+          notices within Derivative Works that You distribute, alongside
+          or as an addendum to the NOTICE text from the Work, provided
+          that such additional attribution notices cannot be construed
+          as modifying the License.
+
+      You may add Your own copyright statement to Your modifications and
+      may provide additional or different license terms and conditions
+      for use, reproduction, or distribution of Your modifications, or
+      for any such Derivative Works as a whole, provided Your use,
+      reproduction, and distribution of the Work otherwise complies with
+      the conditions stated in this License.
+
+   5. Submission of Contributions. Unless You explicitly state otherwise,
+      any Contribution intentionally submitted for inclusion in the Work
+      by You to the Licensor shall be under the terms and conditions of
+      this License, without any additional terms or conditions.
+      Notwithstanding the above, nothing herein shall supersede or modify
+      the terms of any separate license agreement you may have executed
+      with Licensor regarding such Contributions.
+
+   6. Trademarks. This License does not grant permission to use the trade
+      names, trademarks, service marks, or product names of the Licensor,
+      except as required for reasonable and customary use in describing the
+      origin of the Work and reproducing the content of the NOTICE file.
+
+   7. Disclaimer of Warranty. Unless required by applicable law or
+      agreed to in writing, Licensor provides the Work (and each
+      Contributor provides its Contributions) on an "AS IS" BASIS,
+      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
+      implied, including, without limitation, any warranties or conditions
+      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
+      PARTICULAR PURPOSE. You are solely responsible for determining the
+      appropriateness of using or redistributing the Work and assume any
+      risks associated with Your exercise of permissions under this License.
+
+   8. Limitation of Liability. In no event and under no legal theory,
+      whether in tort (including negligence), contract, or otherwise,
+      unless required by applicable law (such as deliberate and grossly
+      negligent acts) or agreed to in writing, shall any Contributor be
+      liable to You for damages, including any direct, indirect, special,
+      incidental, or consequential damages of any character arising as a
+      result of this License or out of the use or inability to use the
+      Work (including but not limited to damages for loss of goodwill,
+      work stoppage, computer failure or malfunction, or any and all
+      other commercial damages or losses), even if such Contributor
+      has been advised of the possibility of such damages.
+
+   9. Accepting Warranty or Additional Liability. While redistributing
+      the Work or Derivative Works thereof, You may choose to offer,
+      and charge a fee for, acceptance of support, warranty, indemnity,
+      or other liability obligations and/or rights consistent with this
+      License. However, in accepting such obligations, You may act only
+      on Your own behalf and on Your sole responsibility, not on behalf
+      of any other Contributor, and only if You agree to indemnify,
+      defend, and hold each Contributor harmless for any liability
+      incurred by, or claims asserted against, such Contributor by reason
+      of your accepting any such warranty or additional liability.
+
+   END OF TERMS AND CONDITIONS
+
+   APPENDIX: How to apply the Apache License to your work.
+
+      To apply the Apache License to your work, attach the following
+      boilerplate notice, with the fields enclosed by brackets "[]"
+      replaced with your own identifying information. (Don't include
+      the brackets!)  The text should be enclosed in the appropriate
+      comment syntax for the file format. We also recommend that a
+      file or class name and description of purpose be included on the
+      same "printed page" as the copyright notice for easier
+      identification within third-party archives.
+
+   Copyright [yyyy] [name of copyright owner]
+
+   Licensed under the Apache License, Version 2.0 (the "License");
+   you may not use this file except in compliance with the License.
+   You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+   Unless required by applicable law or agreed to in writing, software
+   distributed under the License is distributed on an "AS IS" BASIS,
+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+   See the License for the specific language governing permissions and
+   limitations under the License.
\ No newline at end of file
diff --git a/src/cmd/vendor/code.cloudfoundry.org/clock/NOTICE b/src/cmd/vendor/code.cloudfoundry.org/clock/NOTICE
new file mode 100644
index 00000000000000..29c0e5ff07cb72
--- /dev/null
+++ b/src/cmd/vendor/code.cloudfoundry.org/clock/NOTICE
@@ -0,0 +1,20 @@
+Copyright (c) 2015-Present CloudFoundry.org Foundation, Inc. All Rights Reserved.
+
+This project contains software that is Copyright (c) 2015 Pivotal Software, Inc.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+   http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+
+This project may include a number of subcomponents with separate
+copyright notices and license terms. Your use of these subcomponents
+is subject to the terms and conditions of each subcomponent's license,
+as noted in the LICENSE file.
diff --git a/src/cmd/vendor/code.cloudfoundry.org/clock/README.md b/src/cmd/vendor/code.cloudfoundry.org/clock/README.md
new file mode 100644
index 00000000000000..abaf64149e6085
--- /dev/null
+++ b/src/cmd/vendor/code.cloudfoundry.org/clock/README.md
@@ -0,0 +1,5 @@
+# clock
+
+**Note**: This repository should be imported as `code.cloudfoundry.org/clock`.
+
+Provides a `Clock` interface, useful for injecting time dependencies in tests.
diff --git a/src/cmd/vendor/code.cloudfoundry.org/clock/clock.go b/src/cmd/vendor/code.cloudfoundry.org/clock/clock.go
new file mode 100644
index 00000000000000..6b091d99a49071
--- /dev/null
+++ b/src/cmd/vendor/code.cloudfoundry.org/clock/clock.go
@@ -0,0 +1,53 @@
+package clock
+
+import "time"
+
+type Clock interface {
+	Now() time.Time
+	Sleep(d time.Duration)
+	Since(t time.Time) time.Duration
+	// After waits for the duration to elapse and then sends the current time
+	// on the returned channel.
+	// It is equivalent to clock.NewTimer(d).C.
+	// The underlying Timer is not recovered by the garbage collector
+	// until the timer fires. If efficiency is a concern, use clock.NewTimer
+	// instead and call Timer.Stop if the timer is no longer needed.
+	After(d time.Duration) <-chan time.Time
+
+	NewTimer(d time.Duration) Timer
+	NewTicker(d time.Duration) Ticker
+}
+
+type realClock struct{}
+
+func NewClock() Clock {
+	return &realClock{}
+}
+
+func (clock *realClock) Now() time.Time {
+	return time.Now()
+}
+
+func (clock *realClock) Since(t time.Time) time.Duration {
+	return time.Now().Sub(t)
+}
+
+func (clock *realClock) Sleep(d time.Duration) {
+	<-clock.NewTimer(d).C()
+}
+
+func (clock *realClock) After(d time.Duration) <-chan time.Time {
+	return clock.NewTimer(d).C()
+}
+
+func (clock *realClock) NewTimer(d time.Duration) Timer {
+	return &realTimer{
+		t: time.NewTimer(d),
+	}
+}
+
+func (clock *realClock) NewTicker(d time.Duration) Ticker {
+	return &realTicker{
+		t: time.NewTicker(d),
+	}
+}
diff --git a/src/cmd/vendor/code.cloudfoundry.org/clock/package.go b/src/cmd/vendor/code.cloudfoundry.org/clock/package.go
new file mode 100644
index 00000000000000..349f67c82a15bc
--- /dev/null
+++ b/src/cmd/vendor/code.cloudfoundry.org/clock/package.go
@@ -0,0 +1 @@
+package clock // import "code.cloudfoundry.org/clock"
diff --git a/src/cmd/vendor/code.cloudfoundry.org/clock/ticker.go b/src/cmd/vendor/code.cloudfoundry.org/clock/ticker.go
new file mode 100644
index 00000000000000..f25129e1c89cce
--- /dev/null
+++ b/src/cmd/vendor/code.cloudfoundry.org/clock/ticker.go
@@ -0,0 +1,20 @@
+package clock
+
+import "time"
+
+type Ticker interface {
+	C() <-chan time.Time
+	Stop()
+}
+
+type realTicker struct {
+	t *time.Ticker
+}
+
+func (t *realTicker) C() <-chan time.Time {
+	return t.t.C
+}
+
+func (t *realTicker) Stop() {
+	t.t.Stop()
+}
diff --git a/src/cmd/vendor/code.cloudfoundry.org/clock/timer.go b/src/cmd/vendor/code.cloudfoundry.org/clock/timer.go
new file mode 100644
index 00000000000000..cf8c2212599bcc
--- /dev/null
+++ b/src/cmd/vendor/code.cloudfoundry.org/clock/timer.go
@@ -0,0 +1,25 @@
+package clock
+
+import "time"
+
+type Timer interface {
+	C() <-chan time.Time
+	Reset(d time.Duration) bool
+	Stop() bool
+}
+
+type realTimer struct {
+	t *time.Timer
+}
+
+func (t *realTimer) C() <-chan time.Time {
+	return t.t.C
+}
+
+func (t *realTimer) Reset(d time.Duration) bool {
+	return t.t.Reset(d)
+}
+
+func (t *realTimer) Stop() bool {
+	return t.t.Stop()
+}
diff --git a/src/cmd/vendor/github.com/gofrs/uuid/.gitignore b/src/cmd/vendor/github.com/gofrs/uuid/.gitignore
new file mode 100644
index 00000000000000..666dbbb5bcd36e
--- /dev/null
+++ b/src/cmd/vendor/github.com/gofrs/uuid/.gitignore
@@ -0,0 +1,15 @@
+# Binaries for programs and plugins
+*.exe
+*.exe~
+*.dll
+*.so
+*.dylib
+
+# Test binary, build with `go test -c`
+*.test
+
+# Output of the go coverage tool, specifically when used with LiteIDE
+*.out
+
+# binary bundle generated by go-fuzz
+uuid-fuzz.zip
diff --git a/src/cmd/vendor/github.com/gofrs/uuid/.travis.yml b/src/cmd/vendor/github.com/gofrs/uuid/.travis.yml
new file mode 100644
index 00000000000000..0783aaa9c4cf0d
--- /dev/null
+++ b/src/cmd/vendor/github.com/gofrs/uuid/.travis.yml
@@ -0,0 +1,22 @@
+language: go
+sudo: false
+go:
+  - 1.7.x
+  - 1.8.x
+  - 1.9.x
+  - 1.10.x
+  - 1.11.x
+  - 1.12.x
+  - tip
+matrix:
+  allow_failures:
+    - go: tip
+  fast_finish: true
+before_install:
+  - go get golang.org/x/tools/cmd/cover
+script:
+  - go test ./... -race -coverprofile=coverage.txt -covermode=atomic
+after_success:
+  - bash <(curl -s https://codecov.io/bash)
+notifications:
+  email: false
diff --git a/src/cmd/vendor/github.com/gofrs/uuid/LICENSE b/src/cmd/vendor/github.com/gofrs/uuid/LICENSE
new file mode 100644
index 00000000000000..926d5498702943
--- /dev/null
+++ b/src/cmd/vendor/github.com/gofrs/uuid/LICENSE
@@ -0,0 +1,20 @@
+Copyright (C) 2013-2018 by Maxim Bublis <b@codemonkey.ru>
+
+Permission is hereby granted, free of charge, to any person obtaining
+a copy of this software and associated documentation files (the
+"Software"), to deal in the Software without restriction, including
+without limitation the rights to use, copy, modify, merge, publish,
+distribute, sublicense, and/or sell copies of the Software, and to
+permit persons to whom the Software is furnished to do so, subject to
+the following conditions:
+
+The above copyright notice and this permission notice shall be
+included in all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
diff --git a/src/cmd/vendor/github.com/gofrs/uuid/README.md b/src/cmd/vendor/github.com/gofrs/uuid/README.md
new file mode 100644
index 00000000000000..efc3204fc0f9f2
--- /dev/null
+++ b/src/cmd/vendor/github.com/gofrs/uuid/README.md
@@ -0,0 +1,109 @@
+# UUID
+
+[![License](https://img.shields.io/github/license/gofrs/uuid.svg)](https://github.com/gofrs/uuid/blob/master/LICENSE)
+[![Build Status](https://travis-ci.org/gofrs/uuid.svg?branch=master)](https://travis-ci.org/gofrs/uuid)
+[![GoDoc](http://godoc.org/github.com/gofrs/uuid?status.svg)](http://godoc.org/github.com/gofrs/uuid)
+[![Coverage Status](https://codecov.io/gh/gofrs/uuid/branch/master/graphs/badge.svg?branch=master)](https://codecov.io/gh/gofrs/uuid/)
+[![Go Report Card](https://goreportcard.com/badge/github.com/gofrs/uuid)](https://goreportcard.com/report/github.com/gofrs/uuid)
+
+Package uuid provides a pure Go implementation of Universally Unique Identifiers
+(UUID) variant as defined in RFC-4122. This package supports both the creation
+and parsing of UUIDs in different formats.
+
+This package supports the following UUID versions:
+* Version 1, based on timestamp and MAC address (RFC-4122)
+* Version 2, based on timestamp, MAC address and POSIX UID/GID (DCE 1.1)
+* Version 3, based on MD5 hashing of a named value (RFC-4122)
+* Version 4, based on random numbers (RFC-4122)
+* Version 5, based on SHA-1 hashing of a named value (RFC-4122)
+
+## Project History
+
+This project was originally forked from the
+[github.com/satori/go.uuid](https://github.com/satori/go.uuid) repository after
+it appeared to be no longer maintained, while exhibiting [critical
+flaws](https://github.com/satori/go.uuid/issues/73). We have decided to take
+over this project to ensure it receives regular maintenance for the benefit of
+the larger Go community.
+
+We'd like to thank Maxim Bublis for his hard work on the original iteration of
+the package.
+
+## License
+
+This source code of this package is released under the MIT License. Please see
+the [LICENSE](https://github.com/gofrs/uuid/blob/master/LICENSE) for the full
+content of the license.
+
+## Recommended Package Version
+
+We recommend using v2.0.0+ of this package, as versions prior to 2.0.0 were
+created before our fork of the original package and have some known
+deficiencies.
+
+## Installation
+
+It is recommended to use a package manager like `dep` that understands tagged
+releases of a package, as well as semantic versioning.
+
+If you are unable to make use of a dependency manager with your project, you can
+use the `go get` command to download it directly:
+
+```Shell
+$ go get github.com/gofrs/uuid
+```
+
+## Requirements
+
+Due to subtests not being supported in older versions of Go, this package is
+only regularly tested against Go 1.7+. This package may work perfectly fine with
+Go 1.2+, but support for these older versions is not actively maintained.
+
+## Go 1.11 Modules
+
+As of v3.2.0, this repository no longer adopts Go modules, and v3.2.0 no longer has a `go.mod` file.  As a result, v3.2.0 also drops support for the `github.com/gofrs/uuid/v3` import path. Only module-based consumers are impacted.  With the v3.2.0 release, _all_ gofrs/uuid consumers should use the `github.com/gofrs/uuid` import path.
+
+An existing module-based consumer will continue to be able to build using the `github.com/gofrs/uuid/v3` import path using any valid consumer `go.mod` that worked prior to the publishing of v3.2.0, but any module-based consumer should start using the `github.com/gofrs/uuid` import path when possible and _must_ use the `github.com/gofrs/uuid` import path prior to upgrading to v3.2.0.
+
+Please refer to [Issue #61](https://github.com/gofrs/uuid/issues/61) and [Issue #66](https://github.com/gofrs/uuid/issues/66) for more details.
+
+## Usage
+
+Here is a quick overview of how to use this package. For more detailed
+documentation, please see the [GoDoc Page](http://godoc.org/github.com/gofrs/uuid).
+
+```go
+package main
+
+import (
+	"log"
+
+	"github.com/gofrs/uuid"
+)
+
+// Create a Version 4 UUID, panicking on error.
+// Use this form to initialize package-level variables.
+var u1 = uuid.Must(uuid.NewV4())
+
+func main() {
+	// Create a Version 4 UUID.
+	u2, err := uuid.NewV4()
+	if err != nil {
+		log.Fatalf("failed to generate UUID: %v", err)
+	}
+	log.Printf("generated Version 4 UUID %v", u2)
+
+	// Parse a UUID from a string.
+	s := "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
+	u3, err := uuid.FromString(s)
+	if err != nil {
+		log.Fatalf("failed to parse UUID %q: %v", s, err)
+	}
+	log.Printf("successfully parsed UUID %v", u3)
+}
+```
+
+## References
+
+* [RFC-4122](https://tools.ietf.org/html/rfc4122)
+* [DCE 1.1: Authentication and Security Services](http://pubs.opengroup.org/onlinepubs/9696989899/chap5.htm#tagcjh_08_02_01_01)
diff --git a/src/cmd/vendor/github.com/gofrs/uuid/codec.go b/src/cmd/vendor/github.com/gofrs/uuid/codec.go
new file mode 100644
index 00000000000000..e3014c68c663db
--- /dev/null
+++ b/src/cmd/vendor/github.com/gofrs/uuid/codec.go
@@ -0,0 +1,212 @@
+// Copyright (C) 2013-2018 by Maxim Bublis <b@codemonkey.ru>
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+package uuid
+
+import (
+	"bytes"
+	"encoding/hex"
+	"fmt"
+)
+
+// FromBytes returns a UUID generated from the raw byte slice input.
+// It will return an error if the slice isn't 16 bytes long.
+func FromBytes(input []byte) (UUID, error) {
+	u := UUID{}
+	err := u.UnmarshalBinary(input)
+	return u, err
+}
+
+// FromBytesOrNil returns a UUID generated from the raw byte slice input.
+// Same behavior as FromBytes(), but returns uuid.Nil instead of an error.
+func FromBytesOrNil(input []byte) UUID {
+	uuid, err := FromBytes(input)
+	if err != nil {
+		return Nil
+	}
+	return uuid
+}
+
+// FromString returns a UUID parsed from the input string.
+// Input is expected in a form accepted by UnmarshalText.
+func FromString(input string) (UUID, error) {
+	u := UUID{}
+	err := u.UnmarshalText([]byte(input))
+	return u, err
+}
+
+// FromStringOrNil returns a UUID parsed from the input string.
+// Same behavior as FromString(), but returns uuid.Nil instead of an error.
+func FromStringOrNil(input string) UUID {
+	uuid, err := FromString(input)
+	if err != nil {
+		return Nil
+	}
+	return uuid
+}
+
+// MarshalText implements the encoding.TextMarshaler interface.
+// The encoding is the same as returned by the String() method.
+func (u UUID) MarshalText() ([]byte, error) {
+	return []byte(u.String()), nil
+}
+
+// UnmarshalText implements the encoding.TextUnmarshaler interface.
+// Following formats are supported:
+//
+//   "6ba7b810-9dad-11d1-80b4-00c04fd430c8",
+//   "{6ba7b810-9dad-11d1-80b4-00c04fd430c8}",
+//   "urn:uuid:6ba7b810-9dad-11d1-80b4-00c04fd430c8"
+//   "6ba7b8109dad11d180b400c04fd430c8"
+//   "{6ba7b8109dad11d180b400c04fd430c8}",
+//   "urn:uuid:6ba7b8109dad11d180b400c04fd430c8"
+//
+// ABNF for supported UUID text representation follows:
+//
+//   URN := 'urn'
+//   UUID-NID := 'uuid'
+//
+//   hexdig := '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' |
+//             'a' | 'b' | 'c' | 'd' | 'e' | 'f' |
+//             'A' | 'B' | 'C' | 'D' | 'E' | 'F'
+//
+//   hexoct := hexdig hexdig
+//   2hexoct := hexoct hexoct
+//   4hexoct := 2hexoct 2hexoct
+//   6hexoct := 4hexoct 2hexoct
+//   12hexoct := 6hexoct 6hexoct
+//
+//   hashlike := 12hexoct
+//   canonical := 4hexoct '-' 2hexoct '-' 2hexoct '-' 6hexoct
+//
+//   plain := canonical | hashlike
+//   uuid := canonical | hashlike | braced | urn
+//
+//   braced := '{' plain '}' | '{' hashlike  '}'
+//   urn := URN ':' UUID-NID ':' plain
+//
+func (u *UUID) UnmarshalText(text []byte) error {
+	switch len(text) {
+	case 32:
+		return u.decodeHashLike(text)
+	case 34, 38:
+		return u.decodeBraced(text)
+	case 36:
+		return u.decodeCanonical(text)
+	case 41, 45:
+		return u.decodeURN(text)
+	default:
+		return fmt.Errorf("uuid: incorrect UUID length %d in string %q", len(text), text)
+	}
+}
+
+// decodeCanonical decodes UUID strings that are formatted as defined in RFC-4122 (section 3):
+// "6ba7b810-9dad-11d1-80b4-00c04fd430c8".
+func (u *UUID) decodeCanonical(t []byte) error {
+	if t[8] != '-' || t[13] != '-' || t[18] != '-' || t[23] != '-' {
+		return fmt.Errorf("uuid: incorrect UUID format in string %q", t)
+	}
+
+	src := t
+	dst := u[:]
+
+	for i, byteGroup := range byteGroups {
+		if i > 0 {
+			src = src[1:] // skip dash
+		}
+		_, err := hex.Decode(dst[:byteGroup/2], src[:byteGroup])
+		if err != nil {
+			return err
+		}
+		src = src[byteGroup:]
+		dst = dst[byteGroup/2:]
+	}
+
+	return nil
+}
+
+// decodeHashLike decodes UUID strings that are using the following format:
+//  "6ba7b8109dad11d180b400c04fd430c8".
+func (u *UUID) decodeHashLike(t []byte) error {
+	src := t[:]
+	dst := u[:]
+
+	_, err := hex.Decode(dst, src)
+	return err
+}
+
+// decodeBraced decodes UUID strings that are using the following formats:
+//  "{6ba7b810-9dad-11d1-80b4-00c04fd430c8}"
+//  "{6ba7b8109dad11d180b400c04fd430c8}".
+func (u *UUID) decodeBraced(t []byte) error {
+	l := len(t)
+
+	if t[0] != '{' || t[l-1] != '}' {
+		return fmt.Errorf("uuid: incorrect UUID format in string %q", t)
+	}
+
+	return u.decodePlain(t[1 : l-1])
+}
+
+// decodeURN decodes UUID strings that are using the following formats:
+//  "urn:uuid:6ba7b810-9dad-11d1-80b4-00c04fd430c8"
+//  "urn:uuid:6ba7b8109dad11d180b400c04fd430c8".
+func (u *UUID) decodeURN(t []byte) error {
+	total := len(t)
+
+	urnUUIDPrefix := t[:9]
+
+	if !bytes.Equal(urnUUIDPrefix, urnPrefix) {
+		return fmt.Errorf("uuid: incorrect UUID format in string %q", t)
+	}
+
+	return u.decodePlain(t[9:total])
+}
+
+// decodePlain decodes UUID strings that are using the following formats:
+//  "6ba7b810-9dad-11d1-80b4-00c04fd430c8" or in hash-like format
+//  "6ba7b8109dad11d180b400c04fd430c8".
+func (u *UUID) decodePlain(t []byte) error {
+	switch len(t) {
+	case 32:
+		return u.decodeHashLike(t)
+	case 36:
+		return u.decodeCanonical(t)
+	default:
+		return fmt.Errorf("uuid: incorrect UUID length %d in string %q", len(t), t)
+	}
+}
+
+// MarshalBinary implements the encoding.BinaryMarshaler interface.
+func (u UUID) MarshalBinary() ([]byte, error) {
+	return u.Bytes(), nil
+}
+
+// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface.
+// It will return an error if the slice isn't 16 bytes long.
+func (u *UUID) UnmarshalBinary(data []byte) error {
+	if len(data) != Size {
+		return fmt.Errorf("uuid: UUID must be exactly 16 bytes long, got %d bytes", len(data))
+	}
+	copy(u[:], data)
+
+	return nil
+}
diff --git a/src/cmd/vendor/github.com/gofrs/uuid/fuzz.go b/src/cmd/vendor/github.com/gofrs/uuid/fuzz.go
new file mode 100644
index 00000000000000..afaefbc8e399cc
--- /dev/null
+++ b/src/cmd/vendor/github.com/gofrs/uuid/fuzz.go
@@ -0,0 +1,47 @@
+// Copyright (c) 2018 Andrei Tudor Călin <mail@acln.ro>
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+// +build gofuzz
+
+package uuid
+
+// Fuzz implements a simple fuzz test for FromString / UnmarshalText.
+//
+// To run:
+//
+//     $ go get github.com/dvyukov/go-fuzz/...
+//     $ cd $GOPATH/src/github.com/gofrs/uuid
+//     $ go-fuzz-build github.com/gofrs/uuid
+//     $ go-fuzz -bin=uuid-fuzz.zip -workdir=./testdata
+//
+// If you make significant changes to FromString / UnmarshalText and add
+// new cases to fromStringTests (in codec_test.go), please run
+//
+//    $ go test -seed_fuzz_corpus
+//
+// to seed the corpus with the new interesting inputs, then run the fuzzer.
+func Fuzz(data []byte) int {
+	_, err := FromString(string(data))
+	if err != nil {
+		return 0
+	}
+	return 1
+}
diff --git a/src/cmd/vendor/github.com/gofrs/uuid/generator.go b/src/cmd/vendor/github.com/gofrs/uuid/generator.go
new file mode 100644
index 00000000000000..4257761f15437a
--- /dev/null
+++ b/src/cmd/vendor/github.com/gofrs/uuid/generator.go
@@ -0,0 +1,299 @@
+// Copyright (C) 2013-2018 by Maxim Bublis <b@codemonkey.ru>
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+package uuid
+
+import (
+	"crypto/md5"
+	"crypto/rand"
+	"crypto/sha1"
+	"encoding/binary"
+	"fmt"
+	"hash"
+	"io"
+	"net"
+	"os"
+	"sync"
+	"time"
+)
+
+// Difference in 100-nanosecond intervals between
+// UUID epoch (October 15, 1582) and Unix epoch (January 1, 1970).
+const epochStart = 122192928000000000
+
+type epochFunc func() time.Time
+
+// HWAddrFunc is the function type used to provide hardware (MAC) addresses.
+type HWAddrFunc func() (net.HardwareAddr, error)
+
+// DefaultGenerator is the default UUID Generator used by this package.
+var DefaultGenerator Generator = NewGen()
+
+var (
+	posixUID = uint32(os.Getuid())
+	posixGID = uint32(os.Getgid())
+)
+
+// NewV1 returns a UUID based on the current timestamp and MAC address.
+func NewV1() (UUID, error) {
+	return DefaultGenerator.NewV1()
+}
+
+// NewV2 returns a DCE Security UUID based on the POSIX UID/GID.
+func NewV2(domain byte) (UUID, error) {
+	return DefaultGenerator.NewV2(domain)
+}
+
+// NewV3 returns a UUID based on the MD5 hash of the namespace UUID and name.
+func NewV3(ns UUID, name string) UUID {
+	return DefaultGenerator.NewV3(ns, name)
+}
+
+// NewV4 returns a randomly generated UUID.
+func NewV4() (UUID, error) {
+	return DefaultGenerator.NewV4()
+}
+
+// NewV5 returns a UUID based on SHA-1 hash of the namespace UUID and name.
+func NewV5(ns UUID, name string) UUID {
+	return DefaultGenerator.NewV5(ns, name)
+}
+
+// Generator provides an interface for generating UUIDs.
+type Generator interface {
+	NewV1() (UUID, error)
+	NewV2(domain byte) (UUID, error)
+	NewV3(ns UUID, name string) UUID
+	NewV4() (UUID, error)
+	NewV5(ns UUID, name string) UUID
+}
+
+// Gen is a reference UUID generator based on the specifications laid out in
+// RFC-4122 and DCE 1.1: Authentication and Security Services. This type
+// satisfies the Generator interface as defined in this package.
+//
+// For consumers who are generating V1 UUIDs, but don't want to expose the MAC
+// address of the node generating the UUIDs, the NewGenWithHWAF() function has been
+// provided as a convenience. See the function's documentation for more info.
+//
+// The authors of this package do not feel that the majority of users will need
+// to obfuscate their MAC address, and so we recommend using NewGen() to create
+// a new generator.
+type Gen struct {
+	clockSequenceOnce sync.Once
+	hardwareAddrOnce  sync.Once
+	storageMutex      sync.Mutex
+
+	rand io.Reader
+
+	epochFunc     epochFunc
+	hwAddrFunc    HWAddrFunc
+	lastTime      uint64
+	clockSequence uint16
+	hardwareAddr  [6]byte
+}
+
+// interface check -- build will fail if *Gen doesn't satisfy Generator
+var _ Generator = (*Gen)(nil)
+
+// NewGen returns a new instance of Gen with some default values set. Most
+// people should use this.
+func NewGen() *Gen {
+	return NewGenWithHWAF(defaultHWAddrFunc)
+}
+
+// NewGenWithHWAF builds a new UUID generator with the HWAddrFunc provided. Most
+// consumers should use NewGen() instead.
+//
+// This is used so that consumers can generate their own MAC addresses, for use
+// in the generated UUIDs, if there is some concern about exposing the physical
+// address of the machine generating the UUID.
+//
+// The Gen generator will only invoke the HWAddrFunc once, and cache that MAC
+// address for all the future UUIDs generated by it. If you'd like to switch the
+// MAC address being used, you'll need to create a new generator using this
+// function.
+func NewGenWithHWAF(hwaf HWAddrFunc) *Gen {
+	return &Gen{
+		epochFunc:  time.Now,
+		hwAddrFunc: hwaf,
+		rand:       rand.Reader,
+	}
+}
+
+// NewV1 returns a UUID based on the current timestamp and MAC address.
+func (g *Gen) NewV1() (UUID, error) {
+	u := UUID{}
+
+	timeNow, clockSeq, err := g.getClockSequence()
+	if err != nil {
+		return Nil, err
+	}
+	binary.BigEndian.PutUint32(u[0:], uint32(timeNow))
+	binary.BigEndian.PutUint16(u[4:], uint16(timeNow>>32))
+	binary.BigEndian.PutUint16(u[6:], uint16(timeNow>>48))
+	binary.BigEndian.PutUint16(u[8:], clockSeq)
+
+	hardwareAddr, err := g.getHardwareAddr()
+	if err != nil {
+		return Nil, err
+	}
+	copy(u[10:], hardwareAddr)
+
+	u.SetVersion(V1)
+	u.SetVariant(VariantRFC4122)
+
+	return u, nil
+}
+
+// NewV2 returns a DCE Security UUID based on the POSIX UID/GID.
+func (g *Gen) NewV2(domain byte) (UUID, error) {
+	u, err := g.NewV1()
+	if err != nil {
+		return Nil, err
+	}
+
+	switch domain {
+	case DomainPerson:
+		binary.BigEndian.PutUint32(u[:], posixUID)
+	case DomainGroup:
+		binary.BigEndian.PutUint32(u[:], posixGID)
+	}
+
+	u[9] = domain
+
+	u.SetVersion(V2)
+	u.SetVariant(VariantRFC4122)
+
+	return u, nil
+}
+
+// NewV3 returns a UUID based on the MD5 hash of the namespace UUID and name.
+func (g *Gen) NewV3(ns UUID, name string) UUID {
+	u := newFromHash(md5.New(), ns, name)
+	u.SetVersion(V3)
+	u.SetVariant(VariantRFC4122)
+
+	return u
+}
+
+// NewV4 returns a randomly generated UUID.
+func (g *Gen) NewV4() (UUID, error) {
+	u := UUID{}
+	if _, err := io.ReadFull(g.rand, u[:]); err != nil {
+		return Nil, err
+	}
+	u.SetVersion(V4)
+	u.SetVariant(VariantRFC4122)
+
+	return u, nil
+}
+
+// NewV5 returns a UUID based on SHA-1 hash of the namespace UUID and name.
+func (g *Gen) NewV5(ns UUID, name string) UUID {
+	u := newFromHash(sha1.New(), ns, name)
+	u.SetVersion(V5)
+	u.SetVariant(VariantRFC4122)
+
+	return u
+}
+
+// Returns the epoch and clock sequence.
+func (g *Gen) getClockSequence() (uint64, uint16, error) {
+	var err error
+	g.clockSequenceOnce.Do(func() {
+		buf := make([]byte, 2)
+		if _, err = io.ReadFull(g.rand, buf); err != nil {
+			return
+		}
+		g.clockSequence = binary.BigEndian.Uint16(buf)
+	})
+	if err != nil {
+		return 0, 0, err
+	}
+
+	g.storageMutex.Lock()
+	defer g.storageMutex.Unlock()
+
+	timeNow := g.getEpoch()
+	// Clock didn't change since last UUID generation.
+	// Should increase clock sequence.
+	if timeNow <= g.lastTime {
+		g.clockSequence++
+	}
+	g.lastTime = timeNow
+
+	return timeNow, g.clockSequence, nil
+}
+
+// Returns the hardware address.
+func (g *Gen) getHardwareAddr() ([]byte, error) {
+	var err error
+	g.hardwareAddrOnce.Do(func() {
+		var hwAddr net.HardwareAddr
+		if hwAddr, err = g.hwAddrFunc(); err == nil {
+			copy(g.hardwareAddr[:], hwAddr)
+			return
+		}
+
+		// Initialize hardwareAddr randomly in case
+		// of real network interfaces absence.
+		if _, err = io.ReadFull(g.rand, g.hardwareAddr[:]); err != nil {
+			return
+		}
+		// Set multicast bit as recommended by RFC-4122
+		g.hardwareAddr[0] |= 0x01
+	})
+	if err != nil {
+		return []byte{}, err
+	}
+	return g.hardwareAddr[:], nil
+}
+
+// Returns the difference between UUID epoch (October 15, 1582)
+// and current time in 100-nanosecond intervals.
+func (g *Gen) getEpoch() uint64 {
+	return epochStart + uint64(g.epochFunc().UnixNano()/100)
+}
+
+// Returns the UUID based on the hashing of the namespace UUID and name.
+func newFromHash(h hash.Hash, ns UUID, name string) UUID {
+	u := UUID{}
+	h.Write(ns[:])
+	h.Write([]byte(name))
+	copy(u[:], h.Sum(nil))
+
+	return u
+}
+
+// Returns the hardware address.
+func defaultHWAddrFunc() (net.HardwareAddr, error) {
+	ifaces, err := net.Interfaces()
+	if err != nil {
+		return []byte{}, err
+	}
+	for _, iface := range ifaces {
+		if len(iface.HardwareAddr) >= 6 {
+			return iface.HardwareAddr, nil
+		}
+	}
+	return []byte{}, fmt.Errorf("uuid: no HW address found")
+}
diff --git a/src/cmd/vendor/github.com/gofrs/uuid/sql.go b/src/cmd/vendor/github.com/gofrs/uuid/sql.go
new file mode 100644
index 00000000000000..6f254a4fd107a0
--- /dev/null
+++ b/src/cmd/vendor/github.com/gofrs/uuid/sql.go
@@ -0,0 +1,109 @@
+// Copyright (C) 2013-2018 by Maxim Bublis <b@codemonkey.ru>
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+package uuid
+
+import (
+	"bytes"
+	"database/sql/driver"
+	"encoding/json"
+	"fmt"
+)
+
+// Value implements the driver.Valuer interface.
+func (u UUID) Value() (driver.Value, error) {
+	return u.String(), nil
+}
+
+// Scan implements the sql.Scanner interface.
+// A 16-byte slice will be handled by UnmarshalBinary, while
+// a longer byte slice or a string will be handled by UnmarshalText.
+func (u *UUID) Scan(src interface{}) error {
+	switch src := src.(type) {
+	case UUID: // support gorm convert from UUID to NullUUID
+		*u = src
+		return nil
+
+	case []byte:
+		if len(src) == Size {
+			return u.UnmarshalBinary(src)
+		}
+		return u.UnmarshalText(src)
+
+	case string:
+		return u.UnmarshalText([]byte(src))
+	}
+
+	return fmt.Errorf("uuid: cannot convert %T to UUID", src)
+}
+
+// NullUUID can be used with the standard sql package to represent a
+// UUID value that can be NULL in the database.
+type NullUUID struct {
+	UUID  UUID
+	Valid bool
+}
+
+// Value implements the driver.Valuer interface.
+func (u NullUUID) Value() (driver.Value, error) {
+	if !u.Valid {
+		return nil, nil
+	}
+	// Delegate to UUID Value function
+	return u.UUID.Value()
+}
+
+// Scan implements the sql.Scanner interface.
+func (u *NullUUID) Scan(src interface{}) error {
+	if src == nil {
+		u.UUID, u.Valid = Nil, false
+		return nil
+	}
+
+	// Delegate to UUID Scan function
+	u.Valid = true
+	return u.UUID.Scan(src)
+}
+
+// MarshalJSON marshals the NullUUID as null or the nested UUID
+func (u NullUUID) MarshalJSON() ([]byte, error) {
+	if !u.Valid {
+		return json.Marshal(nil)
+	}
+
+	return json.Marshal(u.UUID)
+}
+
+// UnmarshalJSON unmarshals a NullUUID
+func (u *NullUUID) UnmarshalJSON(b []byte) error {
+	if bytes.Equal(b, []byte("null")) {
+		u.UUID, u.Valid = Nil, false
+		return nil
+	}
+
+	if err := json.Unmarshal(b, &u.UUID); err != nil {
+		return err
+	}
+
+	u.Valid = true
+
+	return nil
+}
diff --git a/src/cmd/vendor/github.com/gofrs/uuid/uuid.go b/src/cmd/vendor/github.com/gofrs/uuid/uuid.go
new file mode 100644
index 00000000000000..9c4547f17f4ee5
--- /dev/null
+++ b/src/cmd/vendor/github.com/gofrs/uuid/uuid.go
@@ -0,0 +1,250 @@
+// Copyright (C) 2013-2018 by Maxim Bublis <b@codemonkey.ru>
+//
+// Permission is hereby granted, free of charge, to any person obtaining
+// a copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to
+// permit persons to whom the Software is furnished to do so, subject to
+// the following conditions:
+//
+// The above copyright notice and this permission notice shall be
+// included in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+// Package uuid provides implementations of the Universally Unique Identifier (UUID), as specified in RFC-4122 and DCE 1.1.
+//
+// RFC-4122[1] provides the specification for versions 1, 3, 4, and 5.
+//
+// DCE 1.1[2] provides the specification for version 2.
+//
+// [1] https://tools.ietf.org/html/rfc4122
+// [2] http://pubs.opengroup.org/onlinepubs/9696989899/chap5.htm#tagcjh_08_02_01_01
+package uuid
+
+import (
+	"encoding/binary"
+	"encoding/hex"
+	"fmt"
+	"io"
+	"strings"
+	"time"
+)
+
+// Size of a UUID in bytes.
+const Size = 16
+
+// UUID is an array type to represent the value of a UUID, as defined in RFC-4122.
+type UUID [Size]byte
+
+// UUID versions.
+const (
+	_  byte = iota
+	V1      // Version 1 (date-time and MAC address)
+	V2      // Version 2 (date-time and MAC address, DCE security version)
+	V3      // Version 3 (namespace name-based)
+	V4      // Version 4 (random)
+	V5      // Version 5 (namespace name-based)
+)
+
+// UUID layout variants.
+const (
+	VariantNCS byte = iota
+	VariantRFC4122
+	VariantMicrosoft
+	VariantFuture
+)
+
+// UUID DCE domains.
+const (
+	DomainPerson = iota
+	DomainGroup
+	DomainOrg
+)
+
+// Timestamp is the count of 100-nanosecond intervals since 00:00:00.00,
+// 15 October 1582 within a V1 UUID. This type has no meaning for V2-V5
+// UUIDs since they don't have an embedded timestamp.
+type Timestamp uint64
+
+const _100nsPerSecond = 10000000
+
+// Time returns the UTC time.Time representation of a Timestamp
+func (t Timestamp) Time() (time.Time, error) {
+	secs := uint64(t) / _100nsPerSecond
+	nsecs := 100 * (uint64(t) % _100nsPerSecond)
+	return time.Unix(int64(secs)-(epochStart/_100nsPerSecond), int64(nsecs)), nil
+}
+
+// TimestampFromV1 returns the Timestamp embedded within a V1 UUID.
+// Returns an error if the UUID is any version other than 1.
+func TimestampFromV1(u UUID) (Timestamp, error) {
+	if u.Version() != 1 {
+		err := fmt.Errorf("uuid: %s is version %d, not version 1", u, u.Version())
+		return 0, err
+	}
+	low := binary.BigEndian.Uint32(u[0:4])
+	mid := binary.BigEndian.Uint16(u[4:6])
+	hi := binary.BigEndian.Uint16(u[6:8]) & 0xfff
+	return Timestamp(uint64(low) + (uint64(mid) << 32) + (uint64(hi) << 48)), nil
+}
+
+// String parse helpers.
+var (
+	urnPrefix  = []byte("urn:uuid:")
+	byteGroups = []int{8, 4, 4, 4, 12}
+)
+
+// Nil is the nil UUID, as specified in RFC-4122, that has all 128 bits set to
+// zero.
+var Nil = UUID{}
+
+// Predefined namespace UUIDs.
+var (
+	NamespaceDNS  = Must(FromString("6ba7b810-9dad-11d1-80b4-00c04fd430c8"))
+	NamespaceURL  = Must(FromString("6ba7b811-9dad-11d1-80b4-00c04fd430c8"))
+	NamespaceOID  = Must(FromString("6ba7b812-9dad-11d1-80b4-00c04fd430c8"))
+	NamespaceX500 = Must(FromString("6ba7b814-9dad-11d1-80b4-00c04fd430c8"))
+)
+
+// Version returns the algorithm version used to generate the UUID.
+func (u UUID) Version() byte {
+	return u[6] >> 4
+}
+
+// Variant returns the UUID layout variant.
+func (u UUID) Variant() byte {
+	switch {
+	case (u[8] >> 7) == 0x00:
+		return VariantNCS
+	case (u[8] >> 6) == 0x02:
+		return VariantRFC4122
+	case (u[8] >> 5) == 0x06:
+		return VariantMicrosoft
+	case (u[8] >> 5) == 0x07:
+		fallthrough
+	default:
+		return VariantFuture
+	}
+}
+
+// Bytes returns a byte slice representation of the UUID.
+func (u UUID) Bytes() []byte {
+	return u[:]
+}
+
+// String returns a canonical RFC-4122 string representation of the UUID:
+// xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.
+func (u UUID) String() string {
+	buf := make([]byte, 36)
+
+	hex.Encode(buf[0:8], u[0:4])
+	buf[8] = '-'
+	hex.Encode(buf[9:13], u[4:6])
+	buf[13] = '-'
+	hex.Encode(buf[14:18], u[6:8])
+	buf[18] = '-'
+	hex.Encode(buf[19:23], u[8:10])
+	buf[23] = '-'
+	hex.Encode(buf[24:], u[10:])
+
+	return string(buf)
+}
+
+// Format implements fmt.Formatter for UUID values.
+//
+// The behavior is as follows:
+// The 'x' and 'X' verbs output only the hex digits of the UUID, using a-f for 'x' and A-F for 'X'.
+// The 'v', '+v', 's' and 'q' verbs return the canonical RFC-4122 string representation.
+// The 'S' verb returns the RFC-4122 format, but with capital hex digits.
+// The '#v' verb returns the "Go syntax" representation, which is a 16 byte array initializer.
+// All other verbs not handled directly by the fmt package (like '%p') are unsupported and will return
+// "%!verb(uuid.UUID=value)" as recommended by the fmt package.
+func (u UUID) Format(f fmt.State, c rune) {
+	switch c {
+	case 'x', 'X':
+		s := hex.EncodeToString(u.Bytes())
+		if c == 'X' {
+			s = strings.Map(toCapitalHexDigits, s)
+		}
+		_, _ = io.WriteString(f, s)
+	case 'v':
+		var s string
+		if f.Flag('#') {
+			s = fmt.Sprintf("%#v", [Size]byte(u))
+		} else {
+			s = u.String()
+		}
+		_, _ = io.WriteString(f, s)
+	case 's', 'S':
+		s := u.String()
+		if c == 'S' {
+			s = strings.Map(toCapitalHexDigits, s)
+		}
+		_, _ = io.WriteString(f, s)
+	case 'q':
+		_, _ = io.WriteString(f, `"`+u.String()+`"`)
+	default:
+		// invalid/unsupported format verb
+		fmt.Fprintf(f, "%%!%c(uuid.UUID=%s)", c, u.String())
+	}
+}
+
+func toCapitalHexDigits(ch rune) rune {
+	// convert a-f hex digits to A-F
+	switch ch {
+	case 'a':
+		return 'A'
+	case 'b':
+		return 'B'
+	case 'c':
+		return 'C'
+	case 'd':
+		return 'D'
+	case 'e':
+		return 'E'
+	case 'f':
+		return 'F'
+	default:
+		return ch
+	}
+}
+
+// SetVersion sets the version bits.
+func (u *UUID) SetVersion(v byte) {
+	u[6] = (u[6] & 0x0f) | (v << 4)
+}
+
+// SetVariant sets the variant bits.
+func (u *UUID) SetVariant(v byte) {
+	switch v {
+	case VariantNCS:
+		u[8] = (u[8]&(0xff>>1) | (0x00 << 7))
+	case VariantRFC4122:
+		u[8] = (u[8]&(0xff>>2) | (0x02 << 6))
+	case VariantMicrosoft:
+		u[8] = (u[8]&(0xff>>3) | (0x06 << 5))
+	case VariantFuture:
+		fallthrough
+	default:
+		u[8] = (u[8]&(0xff>>3) | (0x07 << 5))
+	}
+}
+
+// Must is a helper that wraps a call to a function returning (UUID, error)
+// and panics if the error is non-nil. It is intended for use in variable
+// initializations such as
+//  var packageUUID = uuid.Must(uuid.FromString("123e4567-e89b-12d3-a456-426655440000"))
+func Must(u UUID, err error) UUID {
+	if err != nil {
+		panic(err)
+	}
+	return u
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/LICENSE b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/LICENSE
new file mode 100644
index 00000000000000..01d022c227048d
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/LICENSE
@@ -0,0 +1,22 @@
+The MIT License (MIT)
+
+Copyright (c) 2015-2017 Microsoft
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
+
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/client.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/client.go
new file mode 100644
index 00000000000000..d532e03a009f73
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/client.go
@@ -0,0 +1,155 @@
+package appinsights
+
+import (
+	"time"
+
+	"github.com/microsoft/ApplicationInsights-Go/appinsights/contracts"
+)
+
+// Application Insights telemetry client provides interface to track telemetry
+// items.
+type TelemetryClient interface {
+	// Gets the telemetry context for this client. Values found on this
+	// context will get written out to every telemetry item tracked by
+	// this client.
+	Context() *TelemetryContext
+
+	// Gets the instrumentation key assigned to this telemetry client.
+	InstrumentationKey() string
+
+	// Gets the telemetry channel used to submit data to the backend.
+	Channel() TelemetryChannel
+
+	// Gets whether this client is enabled and will accept telemetry.
+	IsEnabled() bool
+
+	// Enables or disables the telemetry client. When disabled, telemetry
+	// is silently swallowed by the client. Defaults to enabled.
+	SetIsEnabled(enabled bool)
+
+	// Submits the specified telemetry item.
+	Track(telemetry Telemetry)
+
+	// Log a user action with the specified name
+	TrackEvent(name string)
+
+	// Log a numeric value that is not specified with a specific event.
+	// Typically used to send regular reports of performance indicators.
+	TrackMetric(name string, value float64)
+
+	// Log a trace message with the specified severity level.
+	TrackTrace(name string, severity contracts.SeverityLevel)
+
+	// Log an HTTP request with the specified method, URL, duration and
+	// response code.
+	TrackRequest(method, url string, duration time.Duration, responseCode string)
+
+	// Log a dependency with the specified name, type, target, and
+	// success status.
+	TrackRemoteDependency(name, dependencyType, target string, success bool)
+
+	// Log an availability test result with the specified test name,
+	// duration, and success status.
+	TrackAvailability(name string, duration time.Duration, success bool)
+
+	// Log an exception with the specified error, which may be a string,
+	// error or Stringer. The current callstack is collected
+	// automatically.
+	TrackException(err interface{})
+}
+
+type telemetryClient struct {
+	channel   TelemetryChannel
+	context   *TelemetryContext
+	isEnabled bool
+}
+
+// Creates a new telemetry client instance that submits telemetry with the
+// specified instrumentation key.
+func NewTelemetryClient(iKey string) TelemetryClient {
+	return NewTelemetryClientFromConfig(NewTelemetryConfiguration(iKey))
+}
+
+// Creates a new telemetry client instance configured by the specified
+// TelemetryConfiguration object.
+func NewTelemetryClientFromConfig(config *TelemetryConfiguration) TelemetryClient {
+	return &telemetryClient{
+		channel:   NewInMemoryChannel(config),
+		context:   config.setupContext(),
+		isEnabled: true,
+	}
+}
+
+// Gets the telemetry context for this client.  Values found on this context
+// will get written out to every telemetry item tracked by this client.
+func (tc *telemetryClient) Context() *TelemetryContext {
+	return tc.context
+}
+
+// Gets the telemetry channel used to submit data to the backend.
+func (tc *telemetryClient) Channel() TelemetryChannel {
+	return tc.channel
+}
+
+// Gets the instrumentation key assigned to this telemetry client.
+func (tc *telemetryClient) InstrumentationKey() string {
+	return tc.context.InstrumentationKey()
+}
+
+// Gets whether this client is enabled and will accept telemetry.
+func (tc *telemetryClient) IsEnabled() bool {
+	return tc.isEnabled
+}
+
+// Enables or disables the telemetry client.  When disabled, telemetry is
+// silently swallowed by the client.  Defaults to enabled.
+func (tc *telemetryClient) SetIsEnabled(isEnabled bool) {
+	tc.isEnabled = isEnabled
+}
+
+// Submits the specified telemetry item.
+func (tc *telemetryClient) Track(item Telemetry) {
+	if tc.isEnabled && item != nil {
+		tc.channel.Send(tc.context.envelop(item))
+	}
+}
+
+// Log a user action with the specified name
+func (tc *telemetryClient) TrackEvent(name string) {
+	tc.Track(NewEventTelemetry(name))
+}
+
+// Log a numeric value that is not specified with a specific event.
+// Typically used to send regular reports of performance indicators.
+func (tc *telemetryClient) TrackMetric(name string, value float64) {
+	tc.Track(NewMetricTelemetry(name, value))
+}
+
+// Log a trace message with the specified severity level.
+func (tc *telemetryClient) TrackTrace(message string, severity contracts.SeverityLevel) {
+	tc.Track(NewTraceTelemetry(message, severity))
+}
+
+// Log an HTTP request with the specified method, URL, duration and response
+// code.
+func (tc *telemetryClient) TrackRequest(method, url string, duration time.Duration, responseCode string) {
+	tc.Track(NewRequestTelemetry(method, url, duration, responseCode))
+}
+
+// Log a dependency with the specified name, type, target, and success
+// status.
+func (tc *telemetryClient) TrackRemoteDependency(name, dependencyType, target string, success bool) {
+	tc.Track(NewRemoteDependencyTelemetry(name, dependencyType, target, success))
+}
+
+// Log an availability test result with the specified test name, duration,
+// and success status.
+func (tc *telemetryClient) TrackAvailability(name string, duration time.Duration, success bool) {
+	tc.Track(NewAvailabilityTelemetry(name, duration, success))
+}
+
+// Log an exception with the specified error, which may be a string, error
+// or Stringer.  The current callstack is collected automatically.
+func (tc *telemetryClient) TrackException(err interface{}) {
+	tc.Track(newExceptionTelemetry(err, 1))
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/clock.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/clock.go
new file mode 100644
index 00000000000000..1178b9eaa74d9e
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/clock.go
@@ -0,0 +1,11 @@
+package appinsights
+
+// We need to mock out the clock for tests; we'll use this to do it.
+
+import "code.cloudfoundry.org/clock"
+
+var currentClock clock.Clock
+
+func init() {
+	currentClock = clock.NewClock()
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/configuration.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/configuration.go
new file mode 100644
index 00000000000000..d3f8037bf2f310
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/configuration.go
@@ -0,0 +1,52 @@
+package appinsights
+
+import (
+	"net/http"
+	"os"
+	"runtime"
+	"time"
+)
+
+// Configuration data used to initialize a new TelemetryClient.
+type TelemetryConfiguration struct {
+	// Instrumentation key for the client.
+	InstrumentationKey string
+
+	// Endpoint URL where data will be submitted.
+	EndpointUrl string
+
+	// Maximum number of telemetry items that can be submitted in each
+	// request.  If this many items are buffered, the buffer will be
+	// flushed before MaxBatchInterval expires.
+	MaxBatchSize int
+
+	// Maximum time to wait before sending a batch of telemetry.
+	MaxBatchInterval time.Duration
+
+	// Customized http client if desired (will use http.DefaultClient otherwise)
+	Client *http.Client
+}
+
+// Creates a new TelemetryConfiguration object with the specified
+// instrumentation key and default values.
+func NewTelemetryConfiguration(instrumentationKey string) *TelemetryConfiguration {
+	return &TelemetryConfiguration{
+		InstrumentationKey: instrumentationKey,
+		EndpointUrl:        "https://dc.services.visualstudio.com/v2/track",
+		MaxBatchSize:       1024,
+		MaxBatchInterval:   time.Duration(10) * time.Second,
+	}
+}
+
+func (config *TelemetryConfiguration) setupContext() *TelemetryContext {
+	context := NewTelemetryContext(config.InstrumentationKey)
+	context.Tags.Internal().SetSdkVersion(sdkName + ":" + Version)
+	context.Tags.Device().SetOsVersion(runtime.GOOS)
+
+	if hostname, err := os.Hostname(); err == nil {
+		context.Tags.Device().SetId(hostname)
+		context.Tags.Cloud().SetRoleInstance(hostname)
+	}
+
+	return context
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/constants.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/constants.go
new file mode 100644
index 00000000000000..060ed59d4e281f
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/constants.go
@@ -0,0 +1,20 @@
+package appinsights
+
+// NOTE: This file was automatically generated.
+
+import "github.com/microsoft/ApplicationInsights-Go/appinsights/contracts"
+
+// Type of the metric data measurement.
+const (
+	Measurement contracts.DataPointType = contracts.Measurement
+	Aggregation contracts.DataPointType = contracts.Aggregation
+)
+
+// Defines the level of severity for the event.
+const (
+	Verbose     contracts.SeverityLevel = contracts.Verbose
+	Information contracts.SeverityLevel = contracts.Information
+	Warning     contracts.SeverityLevel = contracts.Warning
+	Error       contracts.SeverityLevel = contracts.Error
+	Critical    contracts.SeverityLevel = contracts.Critical
+)
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/availabilitydata.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/availabilitydata.go
new file mode 100644
index 00000000000000..4f0d709f5c949d
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/availabilitydata.go
@@ -0,0 +1,111 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// Instances of AvailabilityData represent the result of executing an
+// availability test.
+type AvailabilityData struct {
+	Domain
+
+	// Schema version
+	Ver int `json:"ver"`
+
+	// Identifier of a test run. Use it to correlate steps of test run and
+	// telemetry generated by the service.
+	Id string `json:"id"`
+
+	// Name of the test that these availability results represent.
+	Name string `json:"name"`
+
+	// Duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000 days.
+	Duration string `json:"duration"`
+
+	// Success flag.
+	Success bool `json:"success"`
+
+	// Name of the location where the test was run from.
+	RunLocation string `json:"runLocation"`
+
+	// Diagnostic message for the result.
+	Message string `json:"message"`
+
+	// Collection of custom properties.
+	Properties map[string]string `json:"properties,omitempty"`
+
+	// Collection of custom measurements.
+	Measurements map[string]float64 `json:"measurements,omitempty"`
+}
+
+// Returns the name used when this is embedded within an Envelope container.
+func (data *AvailabilityData) EnvelopeName(key string) string {
+	if key != "" {
+		return "Microsoft.ApplicationInsights." + key + ".Availability"
+	} else {
+		return "Microsoft.ApplicationInsights.Availability"
+	}
+}
+
+// Returns the base type when placed within a Data object container.
+func (data *AvailabilityData) BaseType() string {
+	return "AvailabilityData"
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *AvailabilityData) Sanitize() []string {
+	var warnings []string
+
+	if len(data.Id) > 64 {
+		data.Id = data.Id[:64]
+		warnings = append(warnings, "AvailabilityData.Id exceeded maximum length of 64")
+	}
+
+	if len(data.Name) > 1024 {
+		data.Name = data.Name[:1024]
+		warnings = append(warnings, "AvailabilityData.Name exceeded maximum length of 1024")
+	}
+
+	if len(data.RunLocation) > 1024 {
+		data.RunLocation = data.RunLocation[:1024]
+		warnings = append(warnings, "AvailabilityData.RunLocation exceeded maximum length of 1024")
+	}
+
+	if len(data.Message) > 8192 {
+		data.Message = data.Message[:8192]
+		warnings = append(warnings, "AvailabilityData.Message exceeded maximum length of 8192")
+	}
+
+	if data.Properties != nil {
+		for k, v := range data.Properties {
+			if len(v) > 8192 {
+				data.Properties[k] = v[:8192]
+				warnings = append(warnings, "AvailabilityData.Properties has value with length exceeding max of 8192: "+k)
+			}
+			if len(k) > 150 {
+				data.Properties[k[:150]] = data.Properties[k]
+				delete(data.Properties, k)
+				warnings = append(warnings, "AvailabilityData.Properties has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	if data.Measurements != nil {
+		for k, v := range data.Measurements {
+			if len(k) > 150 {
+				data.Measurements[k[:150]] = v
+				delete(data.Measurements, k)
+				warnings = append(warnings, "AvailabilityData.Measurements has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	return warnings
+}
+
+// Creates a new AvailabilityData instance with default values set by the schema.
+func NewAvailabilityData() *AvailabilityData {
+	return &AvailabilityData{
+		Ver: 2,
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/base.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/base.go
new file mode 100644
index 00000000000000..3ceb5022f215af
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/base.go
@@ -0,0 +1,25 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// Data struct to contain only C section with custom fields.
+type Base struct {
+
+	// Name of item (B section) if any. If telemetry data is derived straight from
+	// this, this should be null.
+	BaseType string `json:"baseType"`
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *Base) Sanitize() []string {
+	var warnings []string
+
+	return warnings
+}
+
+// Creates a new Base instance with default values set by the schema.
+func NewBase() *Base {
+	return &Base{}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/contexttagkeys.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/contexttagkeys.go
new file mode 100644
index 00000000000000..eaf57abb310cb1
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/contexttagkeys.go
@@ -0,0 +1,153 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+import "strconv"
+
+const (
+	// Application version. Information in the application context fields is
+	// always about the application that is sending the telemetry.
+	ApplicationVersion string = "ai.application.ver"
+
+	// Unique client device id. Computer name in most cases.
+	DeviceId string = "ai.device.id"
+
+	// Device locale using <language>-<REGION> pattern, following RFC 5646.
+	// Example 'en-US'.
+	DeviceLocale string = "ai.device.locale"
+
+	// Model of the device the end user of the application is using. Used for
+	// client scenarios. If this field is empty then it is derived from the user
+	// agent.
+	DeviceModel string = "ai.device.model"
+
+	// Client device OEM name taken from the browser.
+	DeviceOEMName string = "ai.device.oemName"
+
+	// Operating system name and version of the device the end user of the
+	// application is using. If this field is empty then it is derived from the
+	// user agent. Example 'Windows 10 Pro 10.0.10586.0'
+	DeviceOSVersion string = "ai.device.osVersion"
+
+	// The type of the device the end user of the application is using. Used
+	// primarily to distinguish JavaScript telemetry from server side telemetry.
+	// Examples: 'PC', 'Phone', 'Browser'. 'PC' is the default value.
+	DeviceType string = "ai.device.type"
+
+	// The IP address of the client device. IPv4 and IPv6 are supported.
+	// Information in the location context fields is always about the end user.
+	// When telemetry is sent from a service, the location context is about the
+	// user that initiated the operation in the service.
+	LocationIp string = "ai.location.ip"
+
+	// A unique identifier for the operation instance. The operation.id is created
+	// by either a request or a page view. All other telemetry sets this to the
+	// value for the containing request or page view. Operation.id is used for
+	// finding all the telemetry items for a specific operation instance.
+	OperationId string = "ai.operation.id"
+
+	// The name (group) of the operation. The operation.name is created by either
+	// a request or a page view. All other telemetry items set this to the value
+	// for the containing request or page view. Operation.name is used for finding
+	// all the telemetry items for a group of operations (i.e. 'GET Home/Index').
+	OperationName string = "ai.operation.name"
+
+	// The unique identifier of the telemetry item's immediate parent.
+	OperationParentId string = "ai.operation.parentId"
+
+	// Name of synthetic source. Some telemetry from the application may represent
+	// a synthetic traffic. It may be web crawler indexing the web site, site
+	// availability tests or traces from diagnostic libraries like Application
+	// Insights SDK itself.
+	OperationSyntheticSource string = "ai.operation.syntheticSource"
+
+	// The correlation vector is a light weight vector clock which can be used to
+	// identify and order related events across clients and services.
+	OperationCorrelationVector string = "ai.operation.correlationVector"
+
+	// Session ID - the instance of the user's interaction with the app.
+	// Information in the session context fields is always about the end user.
+	// When telemetry is sent from a service, the session context is about the
+	// user that initiated the operation in the service.
+	SessionId string = "ai.session.id"
+
+	// Boolean value indicating whether the session identified by ai.session.id is
+	// first for the user or not.
+	SessionIsFirst string = "ai.session.isFirst"
+
+	// In multi-tenant applications this is the account ID or name which the user
+	// is acting with. Examples may be subscription ID for Azure portal or blog
+	// name blogging platform.
+	UserAccountId string = "ai.user.accountId"
+
+	// Anonymous user id. Represents the end user of the application. When
+	// telemetry is sent from a service, the user context is about the user that
+	// initiated the operation in the service.
+	UserId string = "ai.user.id"
+
+	// Authenticated user id. The opposite of ai.user.id, this represents the user
+	// with a friendly name. Since it's PII information it is not collected by
+	// default by most SDKs.
+	UserAuthUserId string = "ai.user.authUserId"
+
+	// Name of the role the application is a part of. Maps directly to the role
+	// name in azure.
+	CloudRole string = "ai.cloud.role"
+
+	// Name of the instance where the application is running. Computer name for
+	// on-premisis, instance name for Azure.
+	CloudRoleInstance string = "ai.cloud.roleInstance"
+
+	// SDK version. See
+	// https://github.com/microsoft/ApplicationInsights-Home/blob/master/SDK-AUTHORING.md#sdk-version-specification
+	// for information.
+	InternalSdkVersion string = "ai.internal.sdkVersion"
+
+	// Agent version. Used to indicate the version of StatusMonitor installed on
+	// the computer if it is used for data collection.
+	InternalAgentVersion string = "ai.internal.agentVersion"
+
+	// This is the node name used for billing purposes. Use it to override the
+	// standard detection of nodes.
+	InternalNodeName string = "ai.internal.nodeName"
+)
+
+var tagMaxLengths = map[string]int{
+	"ai.application.ver":             1024,
+	"ai.device.id":                   1024,
+	"ai.device.locale":               64,
+	"ai.device.model":                256,
+	"ai.device.oemName":              256,
+	"ai.device.osVersion":            256,
+	"ai.device.type":                 64,
+	"ai.location.ip":                 46,
+	"ai.operation.id":                128,
+	"ai.operation.name":              1024,
+	"ai.operation.parentId":          128,
+	"ai.operation.syntheticSource":   1024,
+	"ai.operation.correlationVector": 64,
+	"ai.session.id":                  64,
+	"ai.session.isFirst":             5,
+	"ai.user.accountId":              1024,
+	"ai.user.id":                     128,
+	"ai.user.authUserId":             1024,
+	"ai.cloud.role":                  256,
+	"ai.cloud.roleInstance":          256,
+	"ai.internal.sdkVersion":         64,
+	"ai.internal.agentVersion":       64,
+	"ai.internal.nodeName":           256,
+}
+
+// Truncates tag values that exceed their maximum supported lengths.  Returns
+// warnings for each affected field.
+func SanitizeTags(tags map[string]string) []string {
+	var warnings []string
+	for k, v := range tags {
+		if maxlen, ok := tagMaxLengths[k]; ok && len(v) > maxlen {
+			tags[k] = v[:maxlen]
+			warnings = append(warnings, "Value for "+k+" exceeded maximum length of "+strconv.Itoa(maxlen))
+		}
+	}
+
+	return warnings
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/contexttags.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/contexttags.go
new file mode 100644
index 00000000000000..426378318b8c86
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/contexttags.go
@@ -0,0 +1,565 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+type ContextTags map[string]string
+
+// Helper type that provides access to context fields grouped under 'application'.
+// This is returned by TelemetryContext.Tags.Application()
+type ApplicationContextTags ContextTags
+
+// Helper type that provides access to context fields grouped under 'device'.
+// This is returned by TelemetryContext.Tags.Device()
+type DeviceContextTags ContextTags
+
+// Helper type that provides access to context fields grouped under 'location'.
+// This is returned by TelemetryContext.Tags.Location()
+type LocationContextTags ContextTags
+
+// Helper type that provides access to context fields grouped under 'operation'.
+// This is returned by TelemetryContext.Tags.Operation()
+type OperationContextTags ContextTags
+
+// Helper type that provides access to context fields grouped under 'session'.
+// This is returned by TelemetryContext.Tags.Session()
+type SessionContextTags ContextTags
+
+// Helper type that provides access to context fields grouped under 'user'.
+// This is returned by TelemetryContext.Tags.User()
+type UserContextTags ContextTags
+
+// Helper type that provides access to context fields grouped under 'cloud'.
+// This is returned by TelemetryContext.Tags.Cloud()
+type CloudContextTags ContextTags
+
+// Helper type that provides access to context fields grouped under 'internal'.
+// This is returned by TelemetryContext.Tags.Internal()
+type InternalContextTags ContextTags
+
+// Returns a helper to access context fields grouped under 'application'.
+func (tags ContextTags) Application() ApplicationContextTags {
+	return ApplicationContextTags(tags)
+}
+
+// Returns a helper to access context fields grouped under 'device'.
+func (tags ContextTags) Device() DeviceContextTags {
+	return DeviceContextTags(tags)
+}
+
+// Returns a helper to access context fields grouped under 'location'.
+func (tags ContextTags) Location() LocationContextTags {
+	return LocationContextTags(tags)
+}
+
+// Returns a helper to access context fields grouped under 'operation'.
+func (tags ContextTags) Operation() OperationContextTags {
+	return OperationContextTags(tags)
+}
+
+// Returns a helper to access context fields grouped under 'session'.
+func (tags ContextTags) Session() SessionContextTags {
+	return SessionContextTags(tags)
+}
+
+// Returns a helper to access context fields grouped under 'user'.
+func (tags ContextTags) User() UserContextTags {
+	return UserContextTags(tags)
+}
+
+// Returns a helper to access context fields grouped under 'cloud'.
+func (tags ContextTags) Cloud() CloudContextTags {
+	return CloudContextTags(tags)
+}
+
+// Returns a helper to access context fields grouped under 'internal'.
+func (tags ContextTags) Internal() InternalContextTags {
+	return InternalContextTags(tags)
+}
+
+// Application version. Information in the application context fields is
+// always about the application that is sending the telemetry.
+func (tags ApplicationContextTags) GetVer() string {
+	if result, ok := tags["ai.application.ver"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Application version. Information in the application context fields is
+// always about the application that is sending the telemetry.
+func (tags ApplicationContextTags) SetVer(value string) {
+	if value != "" {
+		tags["ai.application.ver"] = value
+	} else {
+		delete(tags, "ai.application.ver")
+	}
+}
+
+// Unique client device id. Computer name in most cases.
+func (tags DeviceContextTags) GetId() string {
+	if result, ok := tags["ai.device.id"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Unique client device id. Computer name in most cases.
+func (tags DeviceContextTags) SetId(value string) {
+	if value != "" {
+		tags["ai.device.id"] = value
+	} else {
+		delete(tags, "ai.device.id")
+	}
+}
+
+// Device locale using <language>-<REGION> pattern, following RFC 5646.
+// Example 'en-US'.
+func (tags DeviceContextTags) GetLocale() string {
+	if result, ok := tags["ai.device.locale"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Device locale using <language>-<REGION> pattern, following RFC 5646.
+// Example 'en-US'.
+func (tags DeviceContextTags) SetLocale(value string) {
+	if value != "" {
+		tags["ai.device.locale"] = value
+	} else {
+		delete(tags, "ai.device.locale")
+	}
+}
+
+// Model of the device the end user of the application is using. Used for
+// client scenarios. If this field is empty then it is derived from the user
+// agent.
+func (tags DeviceContextTags) GetModel() string {
+	if result, ok := tags["ai.device.model"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Model of the device the end user of the application is using. Used for
+// client scenarios. If this field is empty then it is derived from the user
+// agent.
+func (tags DeviceContextTags) SetModel(value string) {
+	if value != "" {
+		tags["ai.device.model"] = value
+	} else {
+		delete(tags, "ai.device.model")
+	}
+}
+
+// Client device OEM name taken from the browser.
+func (tags DeviceContextTags) GetOemName() string {
+	if result, ok := tags["ai.device.oemName"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Client device OEM name taken from the browser.
+func (tags DeviceContextTags) SetOemName(value string) {
+	if value != "" {
+		tags["ai.device.oemName"] = value
+	} else {
+		delete(tags, "ai.device.oemName")
+	}
+}
+
+// Operating system name and version of the device the end user of the
+// application is using. If this field is empty then it is derived from the
+// user agent. Example 'Windows 10 Pro 10.0.10586.0'
+func (tags DeviceContextTags) GetOsVersion() string {
+	if result, ok := tags["ai.device.osVersion"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Operating system name and version of the device the end user of the
+// application is using. If this field is empty then it is derived from the
+// user agent. Example 'Windows 10 Pro 10.0.10586.0'
+func (tags DeviceContextTags) SetOsVersion(value string) {
+	if value != "" {
+		tags["ai.device.osVersion"] = value
+	} else {
+		delete(tags, "ai.device.osVersion")
+	}
+}
+
+// The type of the device the end user of the application is using. Used
+// primarily to distinguish JavaScript telemetry from server side telemetry.
+// Examples: 'PC', 'Phone', 'Browser'. 'PC' is the default value.
+func (tags DeviceContextTags) GetType() string {
+	if result, ok := tags["ai.device.type"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// The type of the device the end user of the application is using. Used
+// primarily to distinguish JavaScript telemetry from server side telemetry.
+// Examples: 'PC', 'Phone', 'Browser'. 'PC' is the default value.
+func (tags DeviceContextTags) SetType(value string) {
+	if value != "" {
+		tags["ai.device.type"] = value
+	} else {
+		delete(tags, "ai.device.type")
+	}
+}
+
+// The IP address of the client device. IPv4 and IPv6 are supported.
+// Information in the location context fields is always about the end user.
+// When telemetry is sent from a service, the location context is about the
+// user that initiated the operation in the service.
+func (tags LocationContextTags) GetIp() string {
+	if result, ok := tags["ai.location.ip"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// The IP address of the client device. IPv4 and IPv6 are supported.
+// Information in the location context fields is always about the end user.
+// When telemetry is sent from a service, the location context is about the
+// user that initiated the operation in the service.
+func (tags LocationContextTags) SetIp(value string) {
+	if value != "" {
+		tags["ai.location.ip"] = value
+	} else {
+		delete(tags, "ai.location.ip")
+	}
+}
+
+// A unique identifier for the operation instance. The operation.id is created
+// by either a request or a page view. All other telemetry sets this to the
+// value for the containing request or page view. Operation.id is used for
+// finding all the telemetry items for a specific operation instance.
+func (tags OperationContextTags) GetId() string {
+	if result, ok := tags["ai.operation.id"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// A unique identifier for the operation instance. The operation.id is created
+// by either a request or a page view. All other telemetry sets this to the
+// value for the containing request or page view. Operation.id is used for
+// finding all the telemetry items for a specific operation instance.
+func (tags OperationContextTags) SetId(value string) {
+	if value != "" {
+		tags["ai.operation.id"] = value
+	} else {
+		delete(tags, "ai.operation.id")
+	}
+}
+
+// The name (group) of the operation. The operation.name is created by either
+// a request or a page view. All other telemetry items set this to the value
+// for the containing request or page view. Operation.name is used for finding
+// all the telemetry items for a group of operations (i.e. 'GET Home/Index').
+func (tags OperationContextTags) GetName() string {
+	if result, ok := tags["ai.operation.name"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// The name (group) of the operation. The operation.name is created by either
+// a request or a page view. All other telemetry items set this to the value
+// for the containing request or page view. Operation.name is used for finding
+// all the telemetry items for a group of operations (i.e. 'GET Home/Index').
+func (tags OperationContextTags) SetName(value string) {
+	if value != "" {
+		tags["ai.operation.name"] = value
+	} else {
+		delete(tags, "ai.operation.name")
+	}
+}
+
+// The unique identifier of the telemetry item's immediate parent.
+func (tags OperationContextTags) GetParentId() string {
+	if result, ok := tags["ai.operation.parentId"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// The unique identifier of the telemetry item's immediate parent.
+func (tags OperationContextTags) SetParentId(value string) {
+	if value != "" {
+		tags["ai.operation.parentId"] = value
+	} else {
+		delete(tags, "ai.operation.parentId")
+	}
+}
+
+// Name of synthetic source. Some telemetry from the application may represent
+// a synthetic traffic. It may be web crawler indexing the web site, site
+// availability tests or traces from diagnostic libraries like Application
+// Insights SDK itself.
+func (tags OperationContextTags) GetSyntheticSource() string {
+	if result, ok := tags["ai.operation.syntheticSource"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Name of synthetic source. Some telemetry from the application may represent
+// a synthetic traffic. It may be web crawler indexing the web site, site
+// availability tests or traces from diagnostic libraries like Application
+// Insights SDK itself.
+func (tags OperationContextTags) SetSyntheticSource(value string) {
+	if value != "" {
+		tags["ai.operation.syntheticSource"] = value
+	} else {
+		delete(tags, "ai.operation.syntheticSource")
+	}
+}
+
+// The correlation vector is a light weight vector clock which can be used to
+// identify and order related events across clients and services.
+func (tags OperationContextTags) GetCorrelationVector() string {
+	if result, ok := tags["ai.operation.correlationVector"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// The correlation vector is a light weight vector clock which can be used to
+// identify and order related events across clients and services.
+func (tags OperationContextTags) SetCorrelationVector(value string) {
+	if value != "" {
+		tags["ai.operation.correlationVector"] = value
+	} else {
+		delete(tags, "ai.operation.correlationVector")
+	}
+}
+
+// Session ID - the instance of the user's interaction with the app.
+// Information in the session context fields is always about the end user.
+// When telemetry is sent from a service, the session context is about the
+// user that initiated the operation in the service.
+func (tags SessionContextTags) GetId() string {
+	if result, ok := tags["ai.session.id"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Session ID - the instance of the user's interaction with the app.
+// Information in the session context fields is always about the end user.
+// When telemetry is sent from a service, the session context is about the
+// user that initiated the operation in the service.
+func (tags SessionContextTags) SetId(value string) {
+	if value != "" {
+		tags["ai.session.id"] = value
+	} else {
+		delete(tags, "ai.session.id")
+	}
+}
+
+// Boolean value indicating whether the session identified by ai.session.id is
+// first for the user or not.
+func (tags SessionContextTags) GetIsFirst() string {
+	if result, ok := tags["ai.session.isFirst"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Boolean value indicating whether the session identified by ai.session.id is
+// first for the user or not.
+func (tags SessionContextTags) SetIsFirst(value string) {
+	if value != "" {
+		tags["ai.session.isFirst"] = value
+	} else {
+		delete(tags, "ai.session.isFirst")
+	}
+}
+
+// In multi-tenant applications this is the account ID or name which the user
+// is acting with. Examples may be subscription ID for Azure portal or blog
+// name blogging platform.
+func (tags UserContextTags) GetAccountId() string {
+	if result, ok := tags["ai.user.accountId"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// In multi-tenant applications this is the account ID or name which the user
+// is acting with. Examples may be subscription ID for Azure portal or blog
+// name blogging platform.
+func (tags UserContextTags) SetAccountId(value string) {
+	if value != "" {
+		tags["ai.user.accountId"] = value
+	} else {
+		delete(tags, "ai.user.accountId")
+	}
+}
+
+// Anonymous user id. Represents the end user of the application. When
+// telemetry is sent from a service, the user context is about the user that
+// initiated the operation in the service.
+func (tags UserContextTags) GetId() string {
+	if result, ok := tags["ai.user.id"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Anonymous user id. Represents the end user of the application. When
+// telemetry is sent from a service, the user context is about the user that
+// initiated the operation in the service.
+func (tags UserContextTags) SetId(value string) {
+	if value != "" {
+		tags["ai.user.id"] = value
+	} else {
+		delete(tags, "ai.user.id")
+	}
+}
+
+// Authenticated user id. The opposite of ai.user.id, this represents the user
+// with a friendly name. Since it's PII information it is not collected by
+// default by most SDKs.
+func (tags UserContextTags) GetAuthUserId() string {
+	if result, ok := tags["ai.user.authUserId"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Authenticated user id. The opposite of ai.user.id, this represents the user
+// with a friendly name. Since it's PII information it is not collected by
+// default by most SDKs.
+func (tags UserContextTags) SetAuthUserId(value string) {
+	if value != "" {
+		tags["ai.user.authUserId"] = value
+	} else {
+		delete(tags, "ai.user.authUserId")
+	}
+}
+
+// Name of the role the application is a part of. Maps directly to the role
+// name in azure.
+func (tags CloudContextTags) GetRole() string {
+	if result, ok := tags["ai.cloud.role"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Name of the role the application is a part of. Maps directly to the role
+// name in azure.
+func (tags CloudContextTags) SetRole(value string) {
+	if value != "" {
+		tags["ai.cloud.role"] = value
+	} else {
+		delete(tags, "ai.cloud.role")
+	}
+}
+
+// Name of the instance where the application is running. Computer name for
+// on-premisis, instance name for Azure.
+func (tags CloudContextTags) GetRoleInstance() string {
+	if result, ok := tags["ai.cloud.roleInstance"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Name of the instance where the application is running. Computer name for
+// on-premisis, instance name for Azure.
+func (tags CloudContextTags) SetRoleInstance(value string) {
+	if value != "" {
+		tags["ai.cloud.roleInstance"] = value
+	} else {
+		delete(tags, "ai.cloud.roleInstance")
+	}
+}
+
+// SDK version. See
+// https://github.com/microsoft/ApplicationInsights-Home/blob/master/SDK-AUTHORING.md#sdk-version-specification
+// for information.
+func (tags InternalContextTags) GetSdkVersion() string {
+	if result, ok := tags["ai.internal.sdkVersion"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// SDK version. See
+// https://github.com/microsoft/ApplicationInsights-Home/blob/master/SDK-AUTHORING.md#sdk-version-specification
+// for information.
+func (tags InternalContextTags) SetSdkVersion(value string) {
+	if value != "" {
+		tags["ai.internal.sdkVersion"] = value
+	} else {
+		delete(tags, "ai.internal.sdkVersion")
+	}
+}
+
+// Agent version. Used to indicate the version of StatusMonitor installed on
+// the computer if it is used for data collection.
+func (tags InternalContextTags) GetAgentVersion() string {
+	if result, ok := tags["ai.internal.agentVersion"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// Agent version. Used to indicate the version of StatusMonitor installed on
+// the computer if it is used for data collection.
+func (tags InternalContextTags) SetAgentVersion(value string) {
+	if value != "" {
+		tags["ai.internal.agentVersion"] = value
+	} else {
+		delete(tags, "ai.internal.agentVersion")
+	}
+}
+
+// This is the node name used for billing purposes. Use it to override the
+// standard detection of nodes.
+func (tags InternalContextTags) GetNodeName() string {
+	if result, ok := tags["ai.internal.nodeName"]; ok {
+		return result
+	}
+
+	return ""
+}
+
+// This is the node name used for billing purposes. Use it to override the
+// standard detection of nodes.
+func (tags InternalContextTags) SetNodeName(value string) {
+	if value != "" {
+		tags["ai.internal.nodeName"] = value
+	} else {
+		delete(tags, "ai.internal.nodeName")
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/data.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/data.go
new file mode 100644
index 00000000000000..144b7a8e50ec64
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/data.go
@@ -0,0 +1,25 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// Data struct to contain both B and C sections.
+type Data struct {
+	Base
+
+	// Container for data item (B section).
+	BaseData interface{} `json:"baseData"`
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *Data) Sanitize() []string {
+	var warnings []string
+
+	return warnings
+}
+
+// Creates a new Data instance with default values set by the schema.
+func NewData() *Data {
+	return &Data{}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/datapoint.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/datapoint.go
new file mode 100644
index 00000000000000..b06beb1e5cfb62
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/datapoint.go
@@ -0,0 +1,54 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// Metric data single measurement.
+type DataPoint struct {
+
+	// Name of the metric.
+	Name string `json:"name"`
+
+	// Metric type. Single measurement or the aggregated value.
+	Kind DataPointType `json:"kind"`
+
+	// Single value for measurement. Sum of individual measurements for the
+	// aggregation.
+	Value float64 `json:"value"`
+
+	// Metric weight of the aggregated metric. Should not be set for a
+	// measurement.
+	Count int `json:"count"`
+
+	// Minimum value of the aggregated metric. Should not be set for a
+	// measurement.
+	Min float64 `json:"min"`
+
+	// Maximum value of the aggregated metric. Should not be set for a
+	// measurement.
+	Max float64 `json:"max"`
+
+	// Standard deviation of the aggregated metric. Should not be set for a
+	// measurement.
+	StdDev float64 `json:"stdDev"`
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *DataPoint) Sanitize() []string {
+	var warnings []string
+
+	if len(data.Name) > 1024 {
+		data.Name = data.Name[:1024]
+		warnings = append(warnings, "DataPoint.Name exceeded maximum length of 1024")
+	}
+
+	return warnings
+}
+
+// Creates a new DataPoint instance with default values set by the schema.
+func NewDataPoint() *DataPoint {
+	return &DataPoint{
+		Kind: Measurement,
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/datapointtype.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/datapointtype.go
new file mode 100644
index 00000000000000..8f468e7a3c4ddd
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/datapointtype.go
@@ -0,0 +1,22 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// Type of the metric data measurement.
+type DataPointType int
+
+const (
+	Measurement DataPointType = 0
+	Aggregation DataPointType = 1
+)
+
+func (value DataPointType) String() string {
+	switch int(value) {
+	case 0:
+		return "Measurement"
+	case 1:
+		return "Aggregation"
+	default:
+		return "<unknown DataPointType>"
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/domain.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/domain.go
new file mode 100644
index 00000000000000..024945baec872b
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/domain.go
@@ -0,0 +1,21 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// The abstract common base of all domains.
+type Domain struct {
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *Domain) Sanitize() []string {
+	var warnings []string
+
+	return warnings
+}
+
+// Creates a new Domain instance with default values set by the schema.
+func NewDomain() *Domain {
+	return &Domain{}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/envelope.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/envelope.go
new file mode 100644
index 00000000000000..91c80a9d5dba1c
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/envelope.go
@@ -0,0 +1,82 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// System variables for a telemetry item.
+type Envelope struct {
+
+	// Envelope version. For internal use only. By assigning this the default, it
+	// will not be serialized within the payload unless changed to a value other
+	// than #1.
+	Ver int `json:"ver"`
+
+	// Type name of telemetry data item.
+	Name string `json:"name"`
+
+	// Event date time when telemetry item was created. This is the wall clock
+	// time on the client when the event was generated. There is no guarantee that
+	// the client's time is accurate. This field must be formatted in UTC ISO 8601
+	// format, with a trailing 'Z' character, as described publicly on
+	// https://en.wikipedia.org/wiki/ISO_8601#UTC. Note: the number of decimal
+	// seconds digits provided are variable (and unspecified). Consumers should
+	// handle this, i.e. managed code consumers should not use format 'O' for
+	// parsing as it specifies a fixed length. Example:
+	// 2009-06-15T13:45:30.0000000Z.
+	Time string `json:"time"`
+
+	// Sampling rate used in application. This telemetry item represents 1 /
+	// sampleRate actual telemetry items.
+	SampleRate float64 `json:"sampleRate"`
+
+	// Sequence field used to track absolute order of uploaded events.
+	Seq string `json:"seq"`
+
+	// The application's instrumentation key. The key is typically represented as
+	// a GUID, but there are cases when it is not a guid. No code should rely on
+	// iKey being a GUID. Instrumentation key is case insensitive.
+	IKey string `json:"iKey"`
+
+	// Key/value collection of context properties. See ContextTagKeys for
+	// information on available properties.
+	Tags map[string]string `json:"tags,omitempty"`
+
+	// Telemetry data item.
+	Data interface{} `json:"data"`
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *Envelope) Sanitize() []string {
+	var warnings []string
+
+	if len(data.Name) > 1024 {
+		data.Name = data.Name[:1024]
+		warnings = append(warnings, "Envelope.Name exceeded maximum length of 1024")
+	}
+
+	if len(data.Time) > 64 {
+		data.Time = data.Time[:64]
+		warnings = append(warnings, "Envelope.Time exceeded maximum length of 64")
+	}
+
+	if len(data.Seq) > 64 {
+		data.Seq = data.Seq[:64]
+		warnings = append(warnings, "Envelope.Seq exceeded maximum length of 64")
+	}
+
+	if len(data.IKey) > 40 {
+		data.IKey = data.IKey[:40]
+		warnings = append(warnings, "Envelope.IKey exceeded maximum length of 40")
+	}
+
+	return warnings
+}
+
+// Creates a new Envelope instance with default values set by the schema.
+func NewEnvelope() *Envelope {
+	return &Envelope{
+		Ver:        1,
+		SampleRate: 100.0,
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/eventdata.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/eventdata.go
new file mode 100644
index 00000000000000..2093c74fd0eac5
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/eventdata.go
@@ -0,0 +1,82 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// Instances of Event represent structured event records that can be grouped
+// and searched by their properties. Event data item also creates a metric of
+// event count by name.
+type EventData struct {
+	Domain
+
+	// Schema version
+	Ver int `json:"ver"`
+
+	// Event name. Keep it low cardinality to allow proper grouping and useful
+	// metrics.
+	Name string `json:"name"`
+
+	// Collection of custom properties.
+	Properties map[string]string `json:"properties,omitempty"`
+
+	// Collection of custom measurements.
+	Measurements map[string]float64 `json:"measurements,omitempty"`
+}
+
+// Returns the name used when this is embedded within an Envelope container.
+func (data *EventData) EnvelopeName(key string) string {
+	if key != "" {
+		return "Microsoft.ApplicationInsights." + key + ".Event"
+	} else {
+		return "Microsoft.ApplicationInsights.Event"
+	}
+}
+
+// Returns the base type when placed within a Data object container.
+func (data *EventData) BaseType() string {
+	return "EventData"
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *EventData) Sanitize() []string {
+	var warnings []string
+
+	if len(data.Name) > 512 {
+		data.Name = data.Name[:512]
+		warnings = append(warnings, "EventData.Name exceeded maximum length of 512")
+	}
+
+	if data.Properties != nil {
+		for k, v := range data.Properties {
+			if len(v) > 8192 {
+				data.Properties[k] = v[:8192]
+				warnings = append(warnings, "EventData.Properties has value with length exceeding max of 8192: "+k)
+			}
+			if len(k) > 150 {
+				data.Properties[k[:150]] = data.Properties[k]
+				delete(data.Properties, k)
+				warnings = append(warnings, "EventData.Properties has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	if data.Measurements != nil {
+		for k, v := range data.Measurements {
+			if len(k) > 150 {
+				data.Measurements[k[:150]] = v
+				delete(data.Measurements, k)
+				warnings = append(warnings, "EventData.Measurements has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	return warnings
+}
+
+// Creates a new EventData instance with default values set by the schema.
+func NewEventData() *EventData {
+	return &EventData{
+		Ver: 2,
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/exceptiondata.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/exceptiondata.go
new file mode 100644
index 00000000000000..fe1c2f2b8e1884
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/exceptiondata.go
@@ -0,0 +1,93 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// An instance of Exception represents a handled or unhandled exception that
+// occurred during execution of the monitored application.
+type ExceptionData struct {
+	Domain
+
+	// Schema version
+	Ver int `json:"ver"`
+
+	// Exception chain - list of inner exceptions.
+	Exceptions []*ExceptionDetails `json:"exceptions"`
+
+	// Severity level. Mostly used to indicate exception severity level when it is
+	// reported by logging library.
+	SeverityLevel SeverityLevel `json:"severityLevel"`
+
+	// Identifier of where the exception was thrown in code. Used for exceptions
+	// grouping. Typically a combination of exception type and a function from the
+	// call stack.
+	ProblemId string `json:"problemId"`
+
+	// Collection of custom properties.
+	Properties map[string]string `json:"properties,omitempty"`
+
+	// Collection of custom measurements.
+	Measurements map[string]float64 `json:"measurements,omitempty"`
+}
+
+// Returns the name used when this is embedded within an Envelope container.
+func (data *ExceptionData) EnvelopeName(key string) string {
+	if key != "" {
+		return "Microsoft.ApplicationInsights." + key + ".Exception"
+	} else {
+		return "Microsoft.ApplicationInsights.Exception"
+	}
+}
+
+// Returns the base type when placed within a Data object container.
+func (data *ExceptionData) BaseType() string {
+	return "ExceptionData"
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *ExceptionData) Sanitize() []string {
+	var warnings []string
+
+	for _, ptr := range data.Exceptions {
+		warnings = append(warnings, ptr.Sanitize()...)
+	}
+
+	if len(data.ProblemId) > 1024 {
+		data.ProblemId = data.ProblemId[:1024]
+		warnings = append(warnings, "ExceptionData.ProblemId exceeded maximum length of 1024")
+	}
+
+	if data.Properties != nil {
+		for k, v := range data.Properties {
+			if len(v) > 8192 {
+				data.Properties[k] = v[:8192]
+				warnings = append(warnings, "ExceptionData.Properties has value with length exceeding max of 8192: "+k)
+			}
+			if len(k) > 150 {
+				data.Properties[k[:150]] = data.Properties[k]
+				delete(data.Properties, k)
+				warnings = append(warnings, "ExceptionData.Properties has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	if data.Measurements != nil {
+		for k, v := range data.Measurements {
+			if len(k) > 150 {
+				data.Measurements[k[:150]] = v
+				delete(data.Measurements, k)
+				warnings = append(warnings, "ExceptionData.Measurements has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	return warnings
+}
+
+// Creates a new ExceptionData instance with default values set by the schema.
+func NewExceptionData() *ExceptionData {
+	return &ExceptionData{
+		Ver: 2,
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/exceptiondetails.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/exceptiondetails.go
new file mode 100644
index 00000000000000..8b768ab6cf046c
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/exceptiondetails.go
@@ -0,0 +1,66 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// Exception details of the exception in a chain.
+type ExceptionDetails struct {
+
+	// In case exception is nested (outer exception contains inner one), the id
+	// and outerId properties are used to represent the nesting.
+	Id int `json:"id"`
+
+	// The value of outerId is a reference to an element in ExceptionDetails that
+	// represents the outer exception
+	OuterId int `json:"outerId"`
+
+	// Exception type name.
+	TypeName string `json:"typeName"`
+
+	// Exception message.
+	Message string `json:"message"`
+
+	// Indicates if full exception stack is provided in the exception. The stack
+	// may be trimmed, such as in the case of a StackOverflow exception.
+	HasFullStack bool `json:"hasFullStack"`
+
+	// Text describing the stack. Either stack or parsedStack should have a value.
+	Stack string `json:"stack"`
+
+	// List of stack frames. Either stack or parsedStack should have a value.
+	ParsedStack []*StackFrame `json:"parsedStack,omitempty"`
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *ExceptionDetails) Sanitize() []string {
+	var warnings []string
+
+	if len(data.TypeName) > 1024 {
+		data.TypeName = data.TypeName[:1024]
+		warnings = append(warnings, "ExceptionDetails.TypeName exceeded maximum length of 1024")
+	}
+
+	if len(data.Message) > 32768 {
+		data.Message = data.Message[:32768]
+		warnings = append(warnings, "ExceptionDetails.Message exceeded maximum length of 32768")
+	}
+
+	if len(data.Stack) > 32768 {
+		data.Stack = data.Stack[:32768]
+		warnings = append(warnings, "ExceptionDetails.Stack exceeded maximum length of 32768")
+	}
+
+	for _, ptr := range data.ParsedStack {
+		warnings = append(warnings, ptr.Sanitize()...)
+	}
+
+	return warnings
+}
+
+// Creates a new ExceptionDetails instance with default values set by the schema.
+func NewExceptionDetails() *ExceptionDetails {
+	return &ExceptionDetails{
+		HasFullStack: true,
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/messagedata.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/messagedata.go
new file mode 100644
index 00000000000000..c0676431f2e063
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/messagedata.go
@@ -0,0 +1,72 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// Instances of Message represent printf-like trace statements that are
+// text-searched. Log4Net, NLog and other text-based log file entries are
+// translated into intances of this type. The message does not have
+// measurements.
+type MessageData struct {
+	Domain
+
+	// Schema version
+	Ver int `json:"ver"`
+
+	// Trace message
+	Message string `json:"message"`
+
+	// Trace severity level.
+	SeverityLevel SeverityLevel `json:"severityLevel"`
+
+	// Collection of custom properties.
+	Properties map[string]string `json:"properties,omitempty"`
+}
+
+// Returns the name used when this is embedded within an Envelope container.
+func (data *MessageData) EnvelopeName(key string) string {
+	if key != "" {
+		return "Microsoft.ApplicationInsights." + key + ".Message"
+	} else {
+		return "Microsoft.ApplicationInsights.Message"
+	}
+}
+
+// Returns the base type when placed within a Data object container.
+func (data *MessageData) BaseType() string {
+	return "MessageData"
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *MessageData) Sanitize() []string {
+	var warnings []string
+
+	if len(data.Message) > 32768 {
+		data.Message = data.Message[:32768]
+		warnings = append(warnings, "MessageData.Message exceeded maximum length of 32768")
+	}
+
+	if data.Properties != nil {
+		for k, v := range data.Properties {
+			if len(v) > 8192 {
+				data.Properties[k] = v[:8192]
+				warnings = append(warnings, "MessageData.Properties has value with length exceeding max of 8192: "+k)
+			}
+			if len(k) > 150 {
+				data.Properties[k[:150]] = data.Properties[k]
+				delete(data.Properties, k)
+				warnings = append(warnings, "MessageData.Properties has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	return warnings
+}
+
+// Creates a new MessageData instance with default values set by the schema.
+func NewMessageData() *MessageData {
+	return &MessageData{
+		Ver: 2,
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/metricdata.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/metricdata.go
new file mode 100644
index 00000000000000..106576f2c75f57
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/metricdata.go
@@ -0,0 +1,68 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// An instance of the Metric item is a list of measurements (single data
+// points) and/or aggregations.
+type MetricData struct {
+	Domain
+
+	// Schema version
+	Ver int `json:"ver"`
+
+	// List of metrics. Only one metric in the list is currently supported by
+	// Application Insights storage. If multiple data points were sent only the
+	// first one will be used.
+	Metrics []*DataPoint `json:"metrics"`
+
+	// Collection of custom properties.
+	Properties map[string]string `json:"properties,omitempty"`
+}
+
+// Returns the name used when this is embedded within an Envelope container.
+func (data *MetricData) EnvelopeName(key string) string {
+	if key != "" {
+		return "Microsoft.ApplicationInsights." + key + ".Metric"
+	} else {
+		return "Microsoft.ApplicationInsights.Metric"
+	}
+}
+
+// Returns the base type when placed within a Data object container.
+func (data *MetricData) BaseType() string {
+	return "MetricData"
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *MetricData) Sanitize() []string {
+	var warnings []string
+
+	for _, ptr := range data.Metrics {
+		warnings = append(warnings, ptr.Sanitize()...)
+	}
+
+	if data.Properties != nil {
+		for k, v := range data.Properties {
+			if len(v) > 8192 {
+				data.Properties[k] = v[:8192]
+				warnings = append(warnings, "MetricData.Properties has value with length exceeding max of 8192: "+k)
+			}
+			if len(k) > 150 {
+				data.Properties[k[:150]] = data.Properties[k]
+				delete(data.Properties, k)
+				warnings = append(warnings, "MetricData.Properties has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	return warnings
+}
+
+// Creates a new MetricData instance with default values set by the schema.
+func NewMetricData() *MetricData {
+	return &MetricData{
+		Ver: 2,
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/package.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/package.go
new file mode 100644
index 00000000000000..ac96d6d35ed5c6
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/package.go
@@ -0,0 +1,4 @@
+// Data contract definitions for telemetry submitted to Application Insights.
+// This is generated from the schemas found at
+// https://github.com/microsoft/ApplicationInsights-Home/tree/master/EndpointSpecs/Schemas/Bond
+package contracts
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/pageviewdata.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/pageviewdata.go
new file mode 100644
index 00000000000000..15e1d0aa935ee6
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/pageviewdata.go
@@ -0,0 +1,85 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// An instance of PageView represents a generic action on a page like a button
+// click. It is also the base type for PageView.
+type PageViewData struct {
+	Domain
+	EventData
+
+	// Request URL with all query string parameters
+	Url string `json:"url"`
+
+	// Request duration in format: DD.HH:MM:SS.MMMMMM. For a page view
+	// (PageViewData), this is the duration. For a page view with performance
+	// information (PageViewPerfData), this is the page load time. Must be less
+	// than 1000 days.
+	Duration string `json:"duration"`
+}
+
+// Returns the name used when this is embedded within an Envelope container.
+func (data *PageViewData) EnvelopeName(key string) string {
+	if key != "" {
+		return "Microsoft.ApplicationInsights." + key + ".PageView"
+	} else {
+		return "Microsoft.ApplicationInsights.PageView"
+	}
+}
+
+// Returns the base type when placed within a Data object container.
+func (data *PageViewData) BaseType() string {
+	return "PageViewData"
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *PageViewData) Sanitize() []string {
+	var warnings []string
+
+	if len(data.Url) > 2048 {
+		data.Url = data.Url[:2048]
+		warnings = append(warnings, "PageViewData.Url exceeded maximum length of 2048")
+	}
+
+	if len(data.Name) > 512 {
+		data.Name = data.Name[:512]
+		warnings = append(warnings, "PageViewData.Name exceeded maximum length of 512")
+	}
+
+	if data.Properties != nil {
+		for k, v := range data.Properties {
+			if len(v) > 8192 {
+				data.Properties[k] = v[:8192]
+				warnings = append(warnings, "PageViewData.Properties has value with length exceeding max of 8192: "+k)
+			}
+			if len(k) > 150 {
+				data.Properties[k[:150]] = data.Properties[k]
+				delete(data.Properties, k)
+				warnings = append(warnings, "PageViewData.Properties has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	if data.Measurements != nil {
+		for k, v := range data.Measurements {
+			if len(k) > 150 {
+				data.Measurements[k[:150]] = v
+				delete(data.Measurements, k)
+				warnings = append(warnings, "PageViewData.Measurements has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	return warnings
+}
+
+// Creates a new PageViewData instance with default values set by the schema.
+func NewPageViewData() *PageViewData {
+	return &PageViewData{
+		EventData: EventData{
+			Ver: 2,
+		},
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/remotedependencydata.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/remotedependencydata.go
new file mode 100644
index 00000000000000..f078243f459702
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/remotedependencydata.go
@@ -0,0 +1,134 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// An instance of Remote Dependency represents an interaction of the monitored
+// component with a remote component/service like SQL or an HTTP endpoint.
+type RemoteDependencyData struct {
+	Domain
+
+	// Schema version
+	Ver int `json:"ver"`
+
+	// Name of the command initiated with this dependency call. Low cardinality
+	// value. Examples are stored procedure name and URL path template.
+	Name string `json:"name"`
+
+	// Identifier of a dependency call instance. Used for correlation with the
+	// request telemetry item corresponding to this dependency call.
+	Id string `json:"id"`
+
+	// Result code of a dependency call. Examples are SQL error code and HTTP
+	// status code.
+	ResultCode string `json:"resultCode"`
+
+	// Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000
+	// days.
+	Duration string `json:"duration"`
+
+	// Indication of successfull or unsuccessfull call.
+	Success bool `json:"success"`
+
+	// Command initiated by this dependency call. Examples are SQL statement and
+	// HTTP URL's with all query parameters.
+	Data string `json:"data"`
+
+	// Target site of a dependency call. Examples are server name, host address.
+	Target string `json:"target"`
+
+	// Dependency type name. Very low cardinality value for logical grouping of
+	// dependencies and interpretation of other fields like commandName and
+	// resultCode. Examples are SQL, Azure table, and HTTP.
+	Type string `json:"type"`
+
+	// Collection of custom properties.
+	Properties map[string]string `json:"properties,omitempty"`
+
+	// Collection of custom measurements.
+	Measurements map[string]float64 `json:"measurements,omitempty"`
+}
+
+// Returns the name used when this is embedded within an Envelope container.
+func (data *RemoteDependencyData) EnvelopeName(key string) string {
+	if key != "" {
+		return "Microsoft.ApplicationInsights." + key + ".RemoteDependency"
+	} else {
+		return "Microsoft.ApplicationInsights.RemoteDependency"
+	}
+}
+
+// Returns the base type when placed within a Data object container.
+func (data *RemoteDependencyData) BaseType() string {
+	return "RemoteDependencyData"
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *RemoteDependencyData) Sanitize() []string {
+	var warnings []string
+
+	if len(data.Name) > 1024 {
+		data.Name = data.Name[:1024]
+		warnings = append(warnings, "RemoteDependencyData.Name exceeded maximum length of 1024")
+	}
+
+	if len(data.Id) > 128 {
+		data.Id = data.Id[:128]
+		warnings = append(warnings, "RemoteDependencyData.Id exceeded maximum length of 128")
+	}
+
+	if len(data.ResultCode) > 1024 {
+		data.ResultCode = data.ResultCode[:1024]
+		warnings = append(warnings, "RemoteDependencyData.ResultCode exceeded maximum length of 1024")
+	}
+
+	if len(data.Data) > 8192 {
+		data.Data = data.Data[:8192]
+		warnings = append(warnings, "RemoteDependencyData.Data exceeded maximum length of 8192")
+	}
+
+	if len(data.Target) > 1024 {
+		data.Target = data.Target[:1024]
+		warnings = append(warnings, "RemoteDependencyData.Target exceeded maximum length of 1024")
+	}
+
+	if len(data.Type) > 1024 {
+		data.Type = data.Type[:1024]
+		warnings = append(warnings, "RemoteDependencyData.Type exceeded maximum length of 1024")
+	}
+
+	if data.Properties != nil {
+		for k, v := range data.Properties {
+			if len(v) > 8192 {
+				data.Properties[k] = v[:8192]
+				warnings = append(warnings, "RemoteDependencyData.Properties has value with length exceeding max of 8192: "+k)
+			}
+			if len(k) > 150 {
+				data.Properties[k[:150]] = data.Properties[k]
+				delete(data.Properties, k)
+				warnings = append(warnings, "RemoteDependencyData.Properties has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	if data.Measurements != nil {
+		for k, v := range data.Measurements {
+			if len(k) > 150 {
+				data.Measurements[k[:150]] = v
+				delete(data.Measurements, k)
+				warnings = append(warnings, "RemoteDependencyData.Measurements has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	return warnings
+}
+
+// Creates a new RemoteDependencyData instance with default values set by the schema.
+func NewRemoteDependencyData() *RemoteDependencyData {
+	return &RemoteDependencyData{
+		Ver:     2,
+		Success: true,
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/requestdata.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/requestdata.go
new file mode 100644
index 00000000000000..7db3b0aa90daf9
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/requestdata.go
@@ -0,0 +1,125 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// An instance of Request represents completion of an external request to the
+// application to do work and contains a summary of that request execution and
+// the results.
+type RequestData struct {
+	Domain
+
+	// Schema version
+	Ver int `json:"ver"`
+
+	// Identifier of a request call instance. Used for correlation between request
+	// and other telemetry items.
+	Id string `json:"id"`
+
+	// Source of the request. Examples are the instrumentation key of the caller
+	// or the ip address of the caller.
+	Source string `json:"source"`
+
+	// Name of the request. Represents code path taken to process request. Low
+	// cardinality value to allow better grouping of requests. For HTTP requests
+	// it represents the HTTP method and URL path template like 'GET
+	// /values/{id}'.
+	Name string `json:"name"`
+
+	// Request duration in format: DD.HH:MM:SS.MMMMMM. Must be less than 1000
+	// days.
+	Duration string `json:"duration"`
+
+	// Result of a request execution. HTTP status code for HTTP requests.
+	ResponseCode string `json:"responseCode"`
+
+	// Indication of successfull or unsuccessfull call.
+	Success bool `json:"success"`
+
+	// Request URL with all query string parameters.
+	Url string `json:"url"`
+
+	// Collection of custom properties.
+	Properties map[string]string `json:"properties,omitempty"`
+
+	// Collection of custom measurements.
+	Measurements map[string]float64 `json:"measurements,omitempty"`
+}
+
+// Returns the name used when this is embedded within an Envelope container.
+func (data *RequestData) EnvelopeName(key string) string {
+	if key != "" {
+		return "Microsoft.ApplicationInsights." + key + ".Request"
+	} else {
+		return "Microsoft.ApplicationInsights.Request"
+	}
+}
+
+// Returns the base type when placed within a Data object container.
+func (data *RequestData) BaseType() string {
+	return "RequestData"
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *RequestData) Sanitize() []string {
+	var warnings []string
+
+	if len(data.Id) > 128 {
+		data.Id = data.Id[:128]
+		warnings = append(warnings, "RequestData.Id exceeded maximum length of 128")
+	}
+
+	if len(data.Source) > 1024 {
+		data.Source = data.Source[:1024]
+		warnings = append(warnings, "RequestData.Source exceeded maximum length of 1024")
+	}
+
+	if len(data.Name) > 1024 {
+		data.Name = data.Name[:1024]
+		warnings = append(warnings, "RequestData.Name exceeded maximum length of 1024")
+	}
+
+	if len(data.ResponseCode) > 1024 {
+		data.ResponseCode = data.ResponseCode[:1024]
+		warnings = append(warnings, "RequestData.ResponseCode exceeded maximum length of 1024")
+	}
+
+	if len(data.Url) > 2048 {
+		data.Url = data.Url[:2048]
+		warnings = append(warnings, "RequestData.Url exceeded maximum length of 2048")
+	}
+
+	if data.Properties != nil {
+		for k, v := range data.Properties {
+			if len(v) > 8192 {
+				data.Properties[k] = v[:8192]
+				warnings = append(warnings, "RequestData.Properties has value with length exceeding max of 8192: "+k)
+			}
+			if len(k) > 150 {
+				data.Properties[k[:150]] = data.Properties[k]
+				delete(data.Properties, k)
+				warnings = append(warnings, "RequestData.Properties has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	if data.Measurements != nil {
+		for k, v := range data.Measurements {
+			if len(k) > 150 {
+				data.Measurements[k[:150]] = v
+				delete(data.Measurements, k)
+				warnings = append(warnings, "RequestData.Measurements has key with length exceeding max of 150: "+k)
+			}
+		}
+	}
+
+	return warnings
+}
+
+// Creates a new RequestData instance with default values set by the schema.
+func NewRequestData() *RequestData {
+	return &RequestData{
+		Ver: 2,
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/severitylevel.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/severitylevel.go
new file mode 100644
index 00000000000000..a2ec9b8f038788
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/severitylevel.go
@@ -0,0 +1,31 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// Defines the level of severity for the event.
+type SeverityLevel int
+
+const (
+	Verbose     SeverityLevel = 0
+	Information SeverityLevel = 1
+	Warning     SeverityLevel = 2
+	Error       SeverityLevel = 3
+	Critical    SeverityLevel = 4
+)
+
+func (value SeverityLevel) String() string {
+	switch int(value) {
+	case 0:
+		return "Verbose"
+	case 1:
+		return "Information"
+	case 2:
+		return "Warning"
+	case 3:
+		return "Error"
+	case 4:
+		return "Critical"
+	default:
+		return "<unknown SeverityLevel>"
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/stackframe.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/stackframe.go
new file mode 100644
index 00000000000000..d012f6b1406323
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/contracts/stackframe.go
@@ -0,0 +1,52 @@
+package contracts
+
+// NOTE: This file was automatically generated.
+
+// Stack frame information.
+type StackFrame struct {
+
+	// Level in the call stack. For the long stacks SDK may not report every
+	// function in a call stack.
+	Level int `json:"level"`
+
+	// Method name.
+	Method string `json:"method"`
+
+	// Name of the assembly (dll, jar, etc.) containing this function.
+	Assembly string `json:"assembly"`
+
+	// File name or URL of the method implementation.
+	FileName string `json:"fileName"`
+
+	// Line number of the code implementation.
+	Line int `json:"line"`
+}
+
+// Truncates string fields that exceed their maximum supported sizes for this
+// object and all objects it references.  Returns a warning for each affected
+// field.
+func (data *StackFrame) Sanitize() []string {
+	var warnings []string
+
+	if len(data.Method) > 1024 {
+		data.Method = data.Method[:1024]
+		warnings = append(warnings, "StackFrame.Method exceeded maximum length of 1024")
+	}
+
+	if len(data.Assembly) > 1024 {
+		data.Assembly = data.Assembly[:1024]
+		warnings = append(warnings, "StackFrame.Assembly exceeded maximum length of 1024")
+	}
+
+	if len(data.FileName) > 1024 {
+		data.FileName = data.FileName[:1024]
+		warnings = append(warnings, "StackFrame.FileName exceeded maximum length of 1024")
+	}
+
+	return warnings
+}
+
+// Creates a new StackFrame instance with default values set by the schema.
+func NewStackFrame() *StackFrame {
+	return &StackFrame{}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/diagnostics.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/diagnostics.go
new file mode 100644
index 00000000000000..7ff90bfaee0388
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/diagnostics.go
@@ -0,0 +1,88 @@
+package appinsights
+
+import (
+	"fmt"
+	"sync"
+)
+
+type diagnosticsMessageWriter struct {
+	listeners []*diagnosticsMessageListener
+	lock      sync.Mutex
+}
+
+// Handler function for receiving diagnostics messages.  If this returns an
+// error, then the listener will be removed.
+type DiagnosticsMessageHandler func(string) error
+
+// Listener type returned by NewDiagnosticsMessageListener.
+type DiagnosticsMessageListener interface {
+	// Stop receiving diagnostics messages from this listener.
+	Remove()
+}
+
+type diagnosticsMessageListener struct {
+	handler DiagnosticsMessageHandler
+	writer  *diagnosticsMessageWriter
+}
+
+func (listener *diagnosticsMessageListener) Remove() {
+	listener.writer.removeListener(listener)
+}
+
+// The one and only diagnostics writer.
+var diagnosticsWriter = &diagnosticsMessageWriter{}
+
+// Subscribes the specified handler to diagnostics messages from the SDK.  The
+// returned interface can be used to unsubscribe.
+func NewDiagnosticsMessageListener(handler DiagnosticsMessageHandler) DiagnosticsMessageListener {
+	listener := &diagnosticsMessageListener{
+		handler: handler,
+		writer:  diagnosticsWriter,
+	}
+
+	diagnosticsWriter.appendListener(listener)
+	return listener
+}
+
+func (writer *diagnosticsMessageWriter) appendListener(listener *diagnosticsMessageListener) {
+	writer.lock.Lock()
+	defer writer.lock.Unlock()
+	writer.listeners = append(writer.listeners, listener)
+}
+
+func (writer *diagnosticsMessageWriter) removeListener(listener *diagnosticsMessageListener) {
+	writer.lock.Lock()
+	defer writer.lock.Unlock()
+
+	for i := 0; i < len(writer.listeners); i++ {
+		if writer.listeners[i] == listener {
+			writer.listeners[i] = writer.listeners[len(writer.listeners)-1]
+			writer.listeners = writer.listeners[:len(writer.listeners)-1]
+			return
+		}
+	}
+}
+
+func (writer *diagnosticsMessageWriter) Write(message string) {
+	var toRemove []*diagnosticsMessageListener
+	for _, listener := range writer.listeners {
+		if err := listener.handler(message); err != nil {
+			toRemove = append(toRemove, listener)
+		}
+	}
+
+	for _, listener := range toRemove {
+		listener.Remove()
+	}
+}
+
+func (writer *diagnosticsMessageWriter) Printf(message string, args ...interface{}) {
+	// Don't bother with Sprintf if nobody is listening
+	if writer.hasListeners() {
+		writer.Write(fmt.Sprintf(message, args...))
+	}
+}
+
+func (writer *diagnosticsMessageWriter) hasListeners() bool {
+	return len(writer.listeners) > 0
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/exception.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/exception.go
new file mode 100644
index 00000000000000..c440797dcf8f42
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/exception.go
@@ -0,0 +1,150 @@
+package appinsights
+
+import (
+	"fmt"
+	"reflect"
+	"runtime"
+	"strings"
+
+	"github.com/microsoft/ApplicationInsights-Go/appinsights/contracts"
+)
+
+// Exception telemetry items represent a handled or unhandled exceptions that
+// occurred during execution of the monitored application.
+type ExceptionTelemetry struct {
+	BaseTelemetry
+	BaseTelemetryMeasurements
+
+	// Panic message: string, error, or Stringer
+	Error interface{}
+
+	// List of stack frames. Use GetCallstack to generate this data.
+	Frames []*contracts.StackFrame
+
+	// Severity level.
+	SeverityLevel contracts.SeverityLevel
+}
+
+// Creates a new exception telemetry item with the specified error and the
+// current callstack. This should be used directly from a function that
+// handles a recover(), or to report an unexpected error return value from
+// a function.
+func NewExceptionTelemetry(err interface{}) *ExceptionTelemetry {
+	return newExceptionTelemetry(err, 1)
+}
+
+func newExceptionTelemetry(err interface{}, skip int) *ExceptionTelemetry {
+	return &ExceptionTelemetry{
+		Error:         err,
+		Frames:        GetCallstack(2 + skip),
+		SeverityLevel: Error,
+		BaseTelemetry: BaseTelemetry{
+			Timestamp:  currentClock.Now(),
+			Tags:       make(contracts.ContextTags),
+			Properties: make(map[string]string),
+		},
+		BaseTelemetryMeasurements: BaseTelemetryMeasurements{
+			Measurements: make(map[string]float64),
+		},
+	}
+}
+
+func (telem *ExceptionTelemetry) TelemetryData() TelemetryData {
+	details := contracts.NewExceptionDetails()
+	details.HasFullStack = len(telem.Frames) > 0
+	details.ParsedStack = telem.Frames
+
+	if err, ok := telem.Error.(error); ok {
+		details.Message = err.Error()
+		details.TypeName = reflect.TypeOf(telem.Error).String()
+	} else if str, ok := telem.Error.(string); ok {
+		details.Message = str
+		details.TypeName = "string"
+	} else if stringer, ok := telem.Error.(fmt.Stringer); ok {
+		details.Message = stringer.String()
+		details.TypeName = reflect.TypeOf(telem.Error).String()
+	} else if stringer, ok := telem.Error.(fmt.GoStringer); ok {
+		details.Message = stringer.GoString()
+		details.TypeName = reflect.TypeOf(telem.Error).String()
+	} else {
+		details.Message = "<unknown>"
+		details.TypeName = "<unknown>"
+	}
+
+	data := contracts.NewExceptionData()
+	data.SeverityLevel = telem.SeverityLevel
+	data.Exceptions = []*contracts.ExceptionDetails{details}
+	data.Properties = telem.Properties
+	data.Measurements = telem.Measurements
+
+	return data
+}
+
+// Generates a callstack suitable for inclusion in Application Insights
+// exception telemetry for the current goroutine, skipping a number of frames
+// specified by skip.
+func GetCallstack(skip int) []*contracts.StackFrame {
+	var stackFrames []*contracts.StackFrame
+
+	if skip < 0 {
+		skip = 0
+	}
+
+	stack := make([]uintptr, 64+skip)
+	depth := runtime.Callers(skip+1, stack)
+	if depth == 0 {
+		return stackFrames
+	}
+
+	frames := runtime.CallersFrames(stack[:depth])
+	level := 0
+	for {
+		frame, more := frames.Next()
+
+		stackFrame := &contracts.StackFrame{
+			Level:    level,
+			FileName: frame.File,
+			Line:     frame.Line,
+		}
+
+		if frame.Function != "" {
+			/* Default */
+			stackFrame.Method = frame.Function
+
+			/* Break up function into assembly/function */
+			lastSlash := strings.LastIndexByte(frame.Function, '/')
+			if lastSlash < 0 {
+				// e.g. "runtime.gopanic"
+				// The below works with lastSlash=0
+				lastSlash = 0
+			}
+
+			firstDot := strings.IndexByte(frame.Function[lastSlash:], '.')
+			if firstDot >= 0 {
+				stackFrame.Assembly = frame.Function[:lastSlash+firstDot]
+				stackFrame.Method = frame.Function[lastSlash+firstDot+1:]
+			}
+		}
+
+		stackFrames = append(stackFrames, stackFrame)
+
+		level++
+		if !more {
+			break
+		}
+	}
+
+	return stackFrames
+}
+
+// Recovers from any active panics and tracks them to the specified
+// TelemetryClient.  If rethrow is set to true, then this will panic.
+// Should be invoked via defer in functions to monitor.
+func TrackPanic(client TelemetryClient, rethrow bool) {
+	if r := recover(); r != nil {
+		client.Track(newExceptionTelemetry(r, 1))
+		if rethrow {
+			panic(r)
+		}
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/inmemorychannel.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/inmemorychannel.go
new file mode 100644
index 00000000000000..4296e4c899672a
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/inmemorychannel.go
@@ -0,0 +1,449 @@
+package appinsights
+
+import (
+	"sync"
+	"time"
+
+	"code.cloudfoundry.org/clock"
+	"github.com/microsoft/ApplicationInsights-Go/appinsights/contracts"
+)
+
+var (
+	submit_retries = []time.Duration{time.Duration(10 * time.Second), time.Duration(30 * time.Second), time.Duration(60 * time.Second)}
+)
+
+// A telemetry channel that stores events exclusively in memory.  Presently
+// the only telemetry channel implementation available.
+type InMemoryChannel struct {
+	endpointAddress string
+	isDeveloperMode bool
+	collectChan     chan *contracts.Envelope
+	controlChan     chan *inMemoryChannelControl
+	batchSize       int
+	batchInterval   time.Duration
+	waitgroup       sync.WaitGroup
+	throttle        *throttleManager
+	transmitter     transmitter
+}
+
+type inMemoryChannelControl struct {
+	// If true, flush the buffer.
+	flush bool
+
+	// If true, stop listening on the channel.  (Flush is required if any events are to be sent)
+	stop bool
+
+	// If stopping and flushing, this specifies whether to retry submissions on error.
+	retry bool
+
+	// If retrying, what is the max time to wait before finishing up?
+	timeout time.Duration
+
+	// If specified, a message will be sent on this channel when all pending telemetry items have been submitted
+	callback chan struct{}
+}
+
+// Creates an InMemoryChannel instance and starts a background submission
+// goroutine.
+func NewInMemoryChannel(config *TelemetryConfiguration) *InMemoryChannel {
+	channel := &InMemoryChannel{
+		endpointAddress: config.EndpointUrl,
+		collectChan:     make(chan *contracts.Envelope),
+		controlChan:     make(chan *inMemoryChannelControl),
+		batchSize:       config.MaxBatchSize,
+		batchInterval:   config.MaxBatchInterval,
+		throttle:        newThrottleManager(),
+		transmitter:     newTransmitter(config.EndpointUrl, config.Client),
+	}
+
+	go channel.acceptLoop()
+
+	return channel
+}
+
+// The address of the endpoint to which telemetry is sent
+func (channel *InMemoryChannel) EndpointAddress() string {
+	return channel.endpointAddress
+}
+
+// Queues a single telemetry item
+func (channel *InMemoryChannel) Send(item *contracts.Envelope) {
+	if item != nil && channel.collectChan != nil {
+		channel.collectChan <- item
+	}
+}
+
+// Forces the current queue to be sent
+func (channel *InMemoryChannel) Flush() {
+	if channel.controlChan != nil {
+		channel.controlChan <- &inMemoryChannelControl{
+			flush: true,
+		}
+	}
+}
+
+// Tears down the submission goroutines, closes internal channels.  Any
+// telemetry waiting to be sent is discarded.  Further calls to Send() have
+// undefined behavior.  This is a more abrupt version of Close().
+func (channel *InMemoryChannel) Stop() {
+	if channel.controlChan != nil {
+		channel.controlChan <- &inMemoryChannelControl{
+			stop: true,
+		}
+	}
+}
+
+// Returns true if this channel has been throttled by the data collector.
+func (channel *InMemoryChannel) IsThrottled() bool {
+	return channel.throttle != nil && channel.throttle.IsThrottled()
+}
+
+// Flushes and tears down the submission goroutine and closes internal
+// channels.  Returns a channel that is closed when all pending telemetry
+// items have been submitted and it is safe to shut down without losing
+// telemetry.
+//
+// If retryTimeout is specified and non-zero, then failed submissions will
+// be retried until one succeeds or the timeout expires, whichever occurs
+// first.  A retryTimeout of zero indicates that failed submissions will be
+// retried as usual.  An omitted retryTimeout indicates that submissions
+// should not be retried if they fail.
+//
+// Note that the returned channel may not be closed before retryTimeout even
+// if it is specified.  This is because retryTimeout only applies to the
+// latest telemetry buffer.  This may be typical for applications that
+// submit a large amount of telemetry or are prone to being throttled.  When
+// exiting, you should select on the result channel and your own timer to
+// avoid long delays.
+func (channel *InMemoryChannel) Close(timeout ...time.Duration) <-chan struct{} {
+	if channel.controlChan != nil {
+		callback := make(chan struct{})
+
+		ctl := &inMemoryChannelControl{
+			stop:     true,
+			flush:    true,
+			retry:    false,
+			callback: callback,
+		}
+
+		if len(timeout) > 0 {
+			ctl.retry = true
+			ctl.timeout = timeout[0]
+		}
+
+		channel.controlChan <- ctl
+
+		return callback
+	} else {
+		return nil
+	}
+}
+
+func (channel *InMemoryChannel) acceptLoop() {
+	channelState := newInMemoryChannelState(channel)
+
+	for !channelState.stopping {
+		channelState.start()
+	}
+
+	channelState.stop()
+}
+
+// Data shared between parts of a channel
+type inMemoryChannelState struct {
+	channel      *InMemoryChannel
+	stopping     bool
+	buffer       telemetryBufferItems
+	retry        bool
+	retryTimeout time.Duration
+	callback     chan struct{}
+	timer        clock.Timer
+}
+
+func newInMemoryChannelState(channel *InMemoryChannel) *inMemoryChannelState {
+	// Initialize timer to stopped -- avoid any chance of a race condition.
+	timer := currentClock.NewTimer(time.Hour)
+	timer.Stop()
+
+	return &inMemoryChannelState{
+		channel:  channel,
+		buffer:   make(telemetryBufferItems, 0, 16),
+		stopping: false,
+		timer:    timer,
+	}
+}
+
+// Part of channel accept loop: Initialize buffer and accept first message, handle controls.
+func (state *inMemoryChannelState) start() bool {
+	if len(state.buffer) > 16 {
+		// Start out with the size of the previous buffer
+		state.buffer = make(telemetryBufferItems, 0, cap(state.buffer))
+	} else if len(state.buffer) > 0 {
+		// Start out with at least 16 slots
+		state.buffer = make(telemetryBufferItems, 0, 16)
+	}
+
+	// Wait for an event
+	select {
+	case event := <-state.channel.collectChan:
+		if event == nil {
+			// Channel closed?  Not intercepted by Send()?
+			panic("Received nil event")
+		}
+
+		state.buffer = append(state.buffer, event)
+
+	case ctl := <-state.channel.controlChan:
+		// The buffer is empty, so there would be no point in flushing
+		state.channel.signalWhenDone(ctl.callback)
+
+		if ctl.stop {
+			state.stopping = true
+			return false
+		}
+	}
+
+	if len(state.buffer) == 0 {
+		return true
+	}
+
+	return state.waitToSend()
+}
+
+// Part of channel accept loop: Wait for buffer to fill, timeout to expire, or flush
+func (state *inMemoryChannelState) waitToSend() bool {
+	// Things that are used by the sender if we receive a control message
+	state.retryTimeout = 0
+	state.retry = true
+	state.callback = nil
+
+	// Delay until timeout passes or buffer fills up
+	state.timer.Reset(state.channel.batchInterval)
+
+	for {
+		if len(state.buffer) >= state.channel.batchSize {
+			if !state.timer.Stop() {
+				<-state.timer.C()
+			}
+
+			return state.send()
+		}
+
+		select {
+		case event := <-state.channel.collectChan:
+			if event == nil {
+				// Channel closed?  Not intercepted by Send()?
+				panic("Received nil event")
+			}
+
+			state.buffer = append(state.buffer, event)
+
+		case ctl := <-state.channel.controlChan:
+			if ctl.stop {
+				state.stopping = true
+				state.retry = ctl.retry
+				if !ctl.flush {
+					// No flush? Just exit.
+					state.channel.signalWhenDone(ctl.callback)
+					return false
+				}
+			}
+
+			if ctl.flush {
+				if !state.timer.Stop() {
+					<-state.timer.C()
+				}
+
+				state.retryTimeout = ctl.timeout
+				state.callback = ctl.callback
+				return state.send()
+			}
+
+		case <-state.timer.C():
+			// Timeout expired
+			return state.send()
+		}
+	}
+}
+
+// Part of channel accept loop: Check and wait on throttle, submit pending telemetry
+func (state *inMemoryChannelState) send() bool {
+	// Hold up transmission if we're being throttled
+	if !state.stopping && state.channel.throttle.IsThrottled() {
+		if !state.waitThrottle() {
+			// Stopped
+			return false
+		}
+	}
+
+	// Send
+	if len(state.buffer) > 0 {
+		state.channel.waitgroup.Add(1)
+
+		// If we have a callback, wait on the waitgroup now that it's
+		// incremented.
+		state.channel.signalWhenDone(state.callback)
+
+		go func(buffer telemetryBufferItems, retry bool, retryTimeout time.Duration) {
+			defer state.channel.waitgroup.Done()
+			state.channel.transmitRetry(buffer, retry, retryTimeout)
+		}(state.buffer, state.retry, state.retryTimeout)
+	} else if state.callback != nil {
+		state.channel.signalWhenDone(state.callback)
+	}
+
+	return true
+}
+
+// Part of channel accept loop: Wait for throttle to expire while dropping messages
+func (state *inMemoryChannelState) waitThrottle() bool {
+	// Channel is currently throttled.  Once the buffer fills, messages will
+	// be lost...  If we're exiting, then we'll just try to submit anyway.  That
+	// request may be throttled and transmitRetry will perform the backoff correctly.
+
+	diagnosticsWriter.Write("Channel is throttled, events may be dropped.")
+	throttleDone := state.channel.throttle.NotifyWhenReady()
+	dropped := 0
+
+	defer diagnosticsWriter.Printf("Channel dropped %d events while throttled", dropped)
+
+	for {
+		select {
+		case <-throttleDone:
+			close(throttleDone)
+			return true
+
+		case event := <-state.channel.collectChan:
+			// If there's still room in the buffer, then go ahead and add it.
+			if len(state.buffer) < state.channel.batchSize {
+				state.buffer = append(state.buffer, event)
+			} else {
+				if dropped == 0 {
+					diagnosticsWriter.Write("Buffer is full, dropping further events.")
+				}
+
+				dropped++
+			}
+
+		case ctl := <-state.channel.controlChan:
+			if ctl.stop {
+				state.stopping = true
+				state.retry = ctl.retry
+				if !ctl.flush {
+					state.channel.signalWhenDone(ctl.callback)
+					return false
+				} else {
+					// Make an exception when stopping
+					return true
+				}
+			}
+
+			// Cannot flush
+			// TODO: Figure out what to do about callback?
+			if ctl.flush {
+				state.channel.signalWhenDone(ctl.callback)
+			}
+		}
+	}
+}
+
+// Part of channel accept loop: Clean up and close telemetry channel
+func (state *inMemoryChannelState) stop() {
+	close(state.channel.collectChan)
+	close(state.channel.controlChan)
+
+	state.channel.collectChan = nil
+	state.channel.controlChan = nil
+
+	// Throttle can't close until transmitters are done using it.
+	state.channel.waitgroup.Wait()
+	state.channel.throttle.Stop()
+
+	state.channel.throttle = nil
+}
+
+func (channel *InMemoryChannel) transmitRetry(items telemetryBufferItems, retry bool, retryTimeout time.Duration) {
+	payload := items.serialize()
+	retryTimeRemaining := retryTimeout
+
+	for _, wait := range submit_retries {
+		result, err := channel.transmitter.Transmit(payload, items)
+		if err == nil && result != nil && result.IsSuccess() {
+			return
+		}
+
+		if !retry {
+			diagnosticsWriter.Write("Refusing to retry telemetry submission (retry==false)")
+			return
+		}
+
+		// Check for success, determine if we need to retry anything
+		if result != nil {
+			if result.CanRetry() {
+				// Filter down to failed items
+				payload, items = result.GetRetryItems(payload, items)
+				if len(payload) == 0 || len(items) == 0 {
+					return
+				}
+			} else {
+				diagnosticsWriter.Write("Cannot retry telemetry submission")
+				return
+			}
+
+			// Check for throttling
+			if result.IsThrottled() {
+				if result.retryAfter != nil {
+					diagnosticsWriter.Printf("Channel is throttled until %s", *result.retryAfter)
+					channel.throttle.RetryAfter(*result.retryAfter)
+				} else {
+					// TODO: Pick a time
+				}
+			}
+		}
+
+		if retryTimeout > 0 {
+			// We're on a time schedule here.  Make sure we don't try longer
+			// than we have been allowed.
+			if retryTimeRemaining < wait {
+				// One more chance left -- we'll wait the max time we can
+				// and then retry on the way out.
+				currentClock.Sleep(retryTimeRemaining)
+				break
+			} else {
+				// Still have time left to go through the rest of the regular
+				// retry schedule
+				retryTimeRemaining -= wait
+			}
+		}
+
+		diagnosticsWriter.Printf("Waiting %s to retry submission", wait)
+		currentClock.Sleep(wait)
+
+		// Wait if the channel is throttled and we're not on a schedule
+		if channel.IsThrottled() && retryTimeout == 0 {
+			diagnosticsWriter.Printf("Channel is throttled; extending wait time.")
+			ch := channel.throttle.NotifyWhenReady()
+			result := <-ch
+			close(ch)
+
+			if !result {
+				return
+			}
+		}
+	}
+
+	// One final try
+	_, err := channel.transmitter.Transmit(payload, items)
+	if err != nil {
+		diagnosticsWriter.Write("Gave up transmitting payload; exhausted retries")
+	}
+}
+
+func (channel *InMemoryChannel) signalWhenDone(callback chan struct{}) {
+	if callback != nil {
+		go func() {
+			channel.waitgroup.Wait()
+			close(callback)
+		}()
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/jsonserializer.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/jsonserializer.go
new file mode 100644
index 00000000000000..4706cd764d5b25
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/jsonserializer.go
@@ -0,0 +1,25 @@
+package appinsights
+
+import (
+	"bytes"
+	"encoding/json"
+
+	"github.com/microsoft/ApplicationInsights-Go/appinsights/contracts"
+)
+
+type telemetryBufferItems []*contracts.Envelope
+
+func (items telemetryBufferItems) serialize() []byte {
+	var result bytes.Buffer
+	encoder := json.NewEncoder(&result)
+
+	for _, item := range items {
+		end := result.Len()
+		if err := encoder.Encode(item); err != nil {
+			diagnosticsWriter.Printf("Telemetry item failed to serialize: %s", err.Error())
+			result.Truncate(end)
+		}
+	}
+
+	return result.Bytes()
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/package.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/package.go
new file mode 100644
index 00000000000000..8944a516175188
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/package.go
@@ -0,0 +1,8 @@
+// Package appinsights provides an interface to submit telemetry to Application Insights.
+// See more at https://azure.microsoft.com/en-us/services/application-insights/
+package appinsights
+
+const (
+	sdkName = "go"
+	Version = "0.4.4"
+)
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/telemetry.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/telemetry.go
new file mode 100644
index 00000000000000..54b88781e74e23
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/telemetry.go
@@ -0,0 +1,652 @@
+package appinsights
+
+import (
+	"fmt"
+	"math"
+	"net/url"
+	"strconv"
+	"time"
+
+	"github.com/microsoft/ApplicationInsights-Go/appinsights/contracts"
+)
+
+// Common interface implemented by telemetry data contracts
+type TelemetryData interface {
+	EnvelopeName(string) string
+	BaseType() string
+	Sanitize() []string
+}
+
+// Common interface implemented by telemetry items that can be passed to
+// TelemetryClient.Track
+type Telemetry interface {
+	// Gets the time when this item was measured
+	Time() time.Time
+
+	// Sets the timestamp to the specified time.
+	SetTime(time.Time)
+
+	// Gets context data containing extra, optional tags.  Overrides
+	// values found on client TelemetryContext.
+	ContextTags() map[string]string
+
+	// Gets the data contract as it will be submitted to the data
+	// collector.
+	TelemetryData() TelemetryData
+
+	// Gets custom properties to submit with the telemetry item.
+	GetProperties() map[string]string
+
+	// Gets custom measurements to submit with the telemetry item.
+	GetMeasurements() map[string]float64
+}
+
+// BaseTelemetry is the common base struct for telemetry items.
+type BaseTelemetry struct {
+	// The time this when this item was measured
+	Timestamp time.Time
+
+	// Custom properties
+	Properties map[string]string
+
+	// Telemetry Context containing extra, optional tags.
+	Tags contracts.ContextTags
+}
+
+// BaseTelemetryMeasurements provides the Measurements field for telemetry
+// items that support it.
+type BaseTelemetryMeasurements struct {
+	// Custom measurements
+	Measurements map[string]float64
+}
+
+// BaseTelemetryNoMeasurements provides no Measurements field for telemetry
+// items that omit it.
+type BaseTelemetryNoMeasurements struct {
+}
+
+// Time returns the timestamp when this was measured.
+func (item *BaseTelemetry) Time() time.Time {
+	return item.Timestamp
+}
+
+// SetTime sets the timestamp to the specified time.
+func (item *BaseTelemetry) SetTime(t time.Time) {
+	item.Timestamp = t
+}
+
+// Gets context data containing extra, optional tags.  Overrides values
+// found on client TelemetryContext.
+func (item *BaseTelemetry) ContextTags() map[string]string {
+	return item.Tags
+}
+
+// Gets custom properties to submit with the telemetry item.
+func (item *BaseTelemetry) GetProperties() map[string]string {
+	return item.Properties
+}
+
+// Gets custom measurements to submit with the telemetry item.
+func (item *BaseTelemetryMeasurements) GetMeasurements() map[string]float64 {
+	return item.Measurements
+}
+
+// GetMeasurements returns nil for telemetry items that do not support measurements.
+func (item *BaseTelemetryNoMeasurements) GetMeasurements() map[string]float64 {
+	return nil
+}
+
+// Trace telemetry items represent printf-like trace statements that can be
+// text searched.
+type TraceTelemetry struct {
+	BaseTelemetry
+	BaseTelemetryNoMeasurements
+
+	// Trace message
+	Message string
+
+	// Severity level
+	SeverityLevel contracts.SeverityLevel
+}
+
+// Creates a trace telemetry item with the specified message and severity
+// level.
+func NewTraceTelemetry(message string, severityLevel contracts.SeverityLevel) *TraceTelemetry {
+	return &TraceTelemetry{
+		Message:       message,
+		SeverityLevel: severityLevel,
+		BaseTelemetry: BaseTelemetry{
+			Timestamp:  currentClock.Now(),
+			Tags:       make(contracts.ContextTags),
+			Properties: make(map[string]string),
+		},
+	}
+}
+
+func (trace *TraceTelemetry) TelemetryData() TelemetryData {
+	data := contracts.NewMessageData()
+	data.Message = trace.Message
+	data.Properties = trace.Properties
+	data.SeverityLevel = trace.SeverityLevel
+
+	return data
+}
+
+// Event telemetry items represent structured event records.
+type EventTelemetry struct {
+	BaseTelemetry
+	BaseTelemetryMeasurements
+
+	// Event name
+	Name string
+}
+
+// Creates an event telemetry item with the specified name.
+func NewEventTelemetry(name string) *EventTelemetry {
+	return &EventTelemetry{
+		Name: name,
+		BaseTelemetry: BaseTelemetry{
+			Timestamp:  currentClock.Now(),
+			Tags:       make(contracts.ContextTags),
+			Properties: make(map[string]string),
+		},
+		BaseTelemetryMeasurements: BaseTelemetryMeasurements{
+			Measurements: make(map[string]float64),
+		},
+	}
+}
+
+func (event *EventTelemetry) TelemetryData() TelemetryData {
+	data := contracts.NewEventData()
+	data.Name = event.Name
+	data.Properties = event.Properties
+	data.Measurements = event.Measurements
+
+	return data
+}
+
+// Metric telemetry items each represent a single data point.
+type MetricTelemetry struct {
+	BaseTelemetry
+	BaseTelemetryNoMeasurements
+
+	// Metric name
+	Name string
+
+	// Sampled value
+	Value float64
+}
+
+// Creates a metric telemetry sample with the specified name and value.
+func NewMetricTelemetry(name string, value float64) *MetricTelemetry {
+	return &MetricTelemetry{
+		Name:  name,
+		Value: value,
+		BaseTelemetry: BaseTelemetry{
+			Timestamp:  currentClock.Now(),
+			Tags:       make(contracts.ContextTags),
+			Properties: make(map[string]string),
+		},
+	}
+}
+
+func (metric *MetricTelemetry) TelemetryData() TelemetryData {
+	dataPoint := contracts.NewDataPoint()
+	dataPoint.Name = metric.Name
+	dataPoint.Value = metric.Value
+	dataPoint.Count = 1
+	dataPoint.Kind = contracts.Measurement
+
+	data := contracts.NewMetricData()
+	data.Metrics = []*contracts.DataPoint{dataPoint}
+	data.Properties = metric.Properties
+
+	return data
+}
+
+// Aggregated metric telemetry items represent an aggregation of data points
+// over time. These values can be calculated by the caller or with the AddData
+// function.
+type AggregateMetricTelemetry struct {
+	BaseTelemetry
+	BaseTelemetryNoMeasurements
+
+	// Metric name
+	Name string
+
+	// Sum of individual measurements
+	Value float64
+
+	// Minimum value of the aggregated metric
+	Min float64
+
+	// Maximum value of the aggregated metric
+	Max float64
+
+	// Count of measurements in the sample
+	Count int
+
+	// Standard deviation of the aggregated metric
+	StdDev float64
+
+	// Variance of the aggregated metric.  As an invariant,
+	// either this or the StdDev should be zero at any given time.
+	// If both are non-zero then StdDev takes precedence.
+	Variance float64
+}
+
+// Creates a new aggregated metric telemetry item with the specified name.
+// Values should be set on the object returned before submission.
+func NewAggregateMetricTelemetry(name string) *AggregateMetricTelemetry {
+	return &AggregateMetricTelemetry{
+		Name:  name,
+		Count: 0,
+		BaseTelemetry: BaseTelemetry{
+			Timestamp:  currentClock.Now(),
+			Tags:       make(contracts.ContextTags),
+			Properties: make(map[string]string),
+		},
+	}
+}
+
+// Adds data points to the aggregate totals included in this telemetry item.
+// This can be used for all the data at once or incrementally.  Calculates
+// Min, Max, Sum, Count, and StdDev (by way of Variance).
+func (agg *AggregateMetricTelemetry) AddData(values []float64) {
+	if agg.StdDev != 0.0 {
+		// If StdDev is non-zero, then square it to produce
+		// the variance, which is better for incremental calculations,
+		// and then zero it out.
+		agg.Variance = agg.StdDev * agg.StdDev
+		agg.StdDev = 0.0
+	}
+
+	vsum := agg.addData(values, agg.Variance*float64(agg.Count))
+	if agg.Count > 0 {
+		agg.Variance = vsum / float64(agg.Count)
+	}
+}
+
+// Adds sampled data points to the aggregate totals included in this telemetry item.
+// This can be used for all the data at once or incrementally.  Differs from AddData
+// in how it calculates standard deviation, and should not be used interchangeably
+// with AddData.
+func (agg *AggregateMetricTelemetry) AddSampledData(values []float64) {
+	if agg.StdDev != 0.0 {
+		// If StdDev is non-zero, then square it to produce
+		// the variance, which is better for incremental calculations,
+		// and then zero it out.
+		agg.Variance = agg.StdDev * agg.StdDev
+		agg.StdDev = 0.0
+	}
+
+	vsum := agg.addData(values, agg.Variance*float64(agg.Count-1))
+	if agg.Count > 1 {
+		// Sampled values should divide by n-1
+		agg.Variance = vsum / float64(agg.Count-1)
+	}
+}
+
+func (agg *AggregateMetricTelemetry) addData(values []float64, vsum float64) float64 {
+	if len(values) == 0 {
+		return vsum
+	}
+
+	// Running tally of the mean is important for incremental variance computation.
+	var mean float64
+
+	if agg.Count == 0 {
+		agg.Min = values[0]
+		agg.Max = values[0]
+	} else {
+		mean = agg.Value / float64(agg.Count)
+	}
+
+	for _, x := range values {
+		// Update Min, Max, Count, and Value
+		agg.Count++
+		agg.Value += x
+
+		if x < agg.Min {
+			agg.Min = x
+		}
+
+		if x > agg.Max {
+			agg.Max = x
+		}
+
+		// Welford's algorithm to compute variance.  The divide occurs in the caller.
+		newMean := agg.Value / float64(agg.Count)
+		vsum += (x - mean) * (x - newMean)
+		mean = newMean
+	}
+
+	return vsum
+}
+
+func (agg *AggregateMetricTelemetry) TelemetryData() TelemetryData {
+	dataPoint := contracts.NewDataPoint()
+	dataPoint.Name = agg.Name
+	dataPoint.Value = agg.Value
+	dataPoint.Kind = contracts.Aggregation
+	dataPoint.Min = agg.Min
+	dataPoint.Max = agg.Max
+	dataPoint.Count = agg.Count
+
+	if agg.StdDev != 0.0 {
+		dataPoint.StdDev = agg.StdDev
+	} else if agg.Variance > 0.0 {
+		dataPoint.StdDev = math.Sqrt(agg.Variance)
+	}
+
+	data := contracts.NewMetricData()
+	data.Metrics = []*contracts.DataPoint{dataPoint}
+	data.Properties = agg.Properties
+
+	return data
+}
+
+// Request telemetry items represents completion of an external request to the
+// application and contains a summary of that request execution and results.
+type RequestTelemetry struct {
+	BaseTelemetry
+	BaseTelemetryMeasurements
+
+	// Identifier of a request call instance. Used for correlation between request
+	// and other telemetry items.
+	Id string
+
+	// Request name. For HTTP requests it represents the HTTP method and URL path template.
+	Name string
+
+	// URL of the request with all query string parameters.
+	Url string
+
+	// Duration to serve the request.
+	Duration time.Duration
+
+	// Results of a request execution. HTTP status code for HTTP requests.
+	ResponseCode string
+
+	// Indication of successful or unsuccessful call.
+	Success bool
+
+	// Source of the request. Examplese are the instrumentation key of the caller
+	// or the ip address of the caller.
+	Source string
+}
+
+// Creates a new request telemetry item for HTTP requests. The success value will be
+// computed from responseCode, and the timestamp will be set to the current time minus
+// the duration.
+func NewRequestTelemetry(method, uri string, duration time.Duration, responseCode string) *RequestTelemetry {
+	success := true
+	code, err := strconv.Atoi(responseCode)
+	if err == nil {
+		success = code < 400 || code == 401
+	}
+
+	nameUri := uri
+
+	// Sanitize URL for the request name
+	if parsedUrl, err := url.Parse(uri); err == nil {
+		// Remove the query
+		parsedUrl.RawQuery = ""
+		parsedUrl.ForceQuery = false
+
+		// Remove the fragment
+		parsedUrl.Fragment = ""
+
+		// Remove the user info, if any.
+		parsedUrl.User = nil
+
+		// Write back to name
+		nameUri = parsedUrl.String()
+	}
+
+	return &RequestTelemetry{
+		Name:         fmt.Sprintf("%s %s", method, nameUri),
+		Url:          uri,
+		Id:           newUUID().String(),
+		Duration:     duration,
+		ResponseCode: responseCode,
+		Success:      success,
+		BaseTelemetry: BaseTelemetry{
+			Timestamp:  currentClock.Now().Add(-duration),
+			Tags:       make(contracts.ContextTags),
+			Properties: make(map[string]string),
+		},
+		BaseTelemetryMeasurements: BaseTelemetryMeasurements{
+			Measurements: make(map[string]float64),
+		},
+	}
+}
+
+// Sets the timestamp and duration of this telemetry item based on the provided
+// start and end times.
+func (request *RequestTelemetry) MarkTime(startTime, endTime time.Time) {
+	request.Timestamp = startTime
+	request.Duration = endTime.Sub(startTime)
+}
+
+func (request *RequestTelemetry) TelemetryData() TelemetryData {
+	data := contracts.NewRequestData()
+	data.Name = request.Name
+	data.Duration = formatDuration(request.Duration)
+	data.ResponseCode = request.ResponseCode
+	data.Success = request.Success
+	data.Url = request.Url
+	data.Source = request.Source
+
+	if request.Id == "" {
+		data.Id = newUUID().String()
+	} else {
+		data.Id = request.Id
+	}
+
+	data.Properties = request.Properties
+	data.Measurements = request.Measurements
+	return data
+}
+
+// Remote dependency telemetry items represent interactions of the monitored
+// component with a remote component/service like SQL or an HTTP endpoint.
+type RemoteDependencyTelemetry struct {
+	BaseTelemetry
+	BaseTelemetryMeasurements
+
+	// Name of the command that initiated this dependency call. Low cardinality
+	// value. Examples are stored procedure name and URL path template.
+	Name string
+
+	// Identifier of a dependency call instance. Used for correlation with the
+	// request telemetry item corresponding to this dependency call.
+	Id string
+
+	// Result code of a dependency call. Examples are SQL error code and HTTP
+	// status code.
+	ResultCode string
+
+	// Duration of the remote call.
+	Duration time.Duration
+
+	// Indication of successful or unsuccessful call.
+	Success bool
+
+	// Command initiated by this dependency call. Examples are SQL statement and
+	// HTTP URL's with all the query parameters.
+	Data string
+
+	// Dependency type name. Very low cardinality. Examples are SQL, Azure table,
+	// and HTTP.
+	Type string
+
+	// Target site of a dependency call. Examples are server name, host address.
+	Target string
+}
+
+// Builds a new Remote Dependency telemetry item, with the specified name,
+// dependency type, target site, and success status.
+func NewRemoteDependencyTelemetry(name, dependencyType, target string, success bool) *RemoteDependencyTelemetry {
+	return &RemoteDependencyTelemetry{
+		Name:    name,
+		Type:    dependencyType,
+		Target:  target,
+		Success: success,
+		BaseTelemetry: BaseTelemetry{
+			Timestamp:  currentClock.Now(),
+			Tags:       make(contracts.ContextTags),
+			Properties: make(map[string]string),
+		},
+		BaseTelemetryMeasurements: BaseTelemetryMeasurements{
+			Measurements: make(map[string]float64),
+		},
+	}
+}
+
+// Sets the timestamp and duration of this telemetry item based on the provided
+// start and end times.
+func (telem *RemoteDependencyTelemetry) MarkTime(startTime, endTime time.Time) {
+	telem.Timestamp = startTime
+	telem.Duration = endTime.Sub(startTime)
+}
+
+func (telem *RemoteDependencyTelemetry) TelemetryData() TelemetryData {
+	data := contracts.NewRemoteDependencyData()
+	data.Name = telem.Name
+	data.Id = telem.Id
+	data.ResultCode = telem.ResultCode
+	data.Duration = formatDuration(telem.Duration)
+	data.Success = telem.Success
+	data.Data = telem.Data
+	data.Target = telem.Target
+	data.Properties = telem.Properties
+	data.Measurements = telem.Measurements
+	data.Type = telem.Type
+
+	return data
+}
+
+// Avaibility telemetry items represent the result of executing an availability
+// test.
+type AvailabilityTelemetry struct {
+	BaseTelemetry
+	BaseTelemetryMeasurements
+
+	// Identifier of a test run. Used to correlate steps of test run and
+	// telemetry generated by the service.
+	Id string
+
+	// Name of the test that this result represents.
+	Name string
+
+	// Duration of the test run.
+	Duration time.Duration
+
+	// Success flag.
+	Success bool
+
+	// Name of the location where the test was run.
+	RunLocation string
+
+	// Diagnostic message for the result.
+	Message string
+}
+
+// Creates a new availability telemetry item with the specified test name,
+// duration and success code.
+func NewAvailabilityTelemetry(name string, duration time.Duration, success bool) *AvailabilityTelemetry {
+	return &AvailabilityTelemetry{
+		Name:     name,
+		Duration: duration,
+		Success:  success,
+		BaseTelemetry: BaseTelemetry{
+			Timestamp:  currentClock.Now(),
+			Tags:       make(contracts.ContextTags),
+			Properties: make(map[string]string),
+		},
+		BaseTelemetryMeasurements: BaseTelemetryMeasurements{
+			Measurements: make(map[string]float64),
+		},
+	}
+}
+
+// Sets the timestamp and duration of this telemetry item based on the provided
+// start and end times.
+func (telem *AvailabilityTelemetry) MarkTime(startTime, endTime time.Time) {
+	telem.Timestamp = startTime
+	telem.Duration = endTime.Sub(startTime)
+}
+
+func (telem *AvailabilityTelemetry) TelemetryData() TelemetryData {
+	data := contracts.NewAvailabilityData()
+	data.Name = telem.Name
+	data.Duration = formatDuration(telem.Duration)
+	data.Success = telem.Success
+	data.RunLocation = telem.RunLocation
+	data.Message = telem.Message
+	data.Properties = telem.Properties
+	data.Id = telem.Id
+	data.Measurements = telem.Measurements
+
+	return data
+}
+
+// Page view telemetry items represent generic actions on a page like a button
+// click.
+type PageViewTelemetry struct {
+	BaseTelemetry
+	BaseTelemetryMeasurements
+
+	// Request URL with all query string parameters
+	Url string
+
+	// Request duration.
+	Duration time.Duration
+
+	// Event name.
+	Name string
+}
+
+// Creates a new page view telemetry item with the specified name and url.
+func NewPageViewTelemetry(name, url string) *PageViewTelemetry {
+	return &PageViewTelemetry{
+		Name: name,
+		Url:  url,
+		BaseTelemetry: BaseTelemetry{
+			Timestamp:  currentClock.Now(),
+			Tags:       make(contracts.ContextTags),
+			Properties: make(map[string]string),
+		},
+		BaseTelemetryMeasurements: BaseTelemetryMeasurements{
+			Measurements: make(map[string]float64),
+		},
+	}
+}
+
+// Sets the timestamp and duration of this telemetry item based on the provided
+// start and end times.
+func (telem *PageViewTelemetry) MarkTime(startTime, endTime time.Time) {
+	telem.Timestamp = startTime
+	telem.Duration = endTime.Sub(startTime)
+}
+
+func (telem *PageViewTelemetry) TelemetryData() TelemetryData {
+	data := contracts.NewPageViewData()
+	data.Url = telem.Url
+	data.Duration = formatDuration(telem.Duration)
+	data.Name = telem.Name
+	data.Properties = telem.Properties
+	data.Measurements = telem.Measurements
+	return data
+}
+
+func formatDuration(d time.Duration) string {
+	ticks := int64(d/(time.Nanosecond*100)) % 10000000
+	seconds := int64(d/time.Second) % 60
+	minutes := int64(d/time.Minute) % 60
+	hours := int64(d/time.Hour) % 24
+	days := int64(d / (time.Hour * 24))
+
+	return fmt.Sprintf("%d.%02d:%02d:%02d.%07d", days, hours, minutes, seconds, ticks)
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/telemetrychannel.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/telemetrychannel.go
new file mode 100644
index 00000000000000..c539d4ebd693de
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/telemetrychannel.go
@@ -0,0 +1,50 @@
+package appinsights
+
+import (
+	"github.com/microsoft/ApplicationInsights-Go/appinsights/contracts"
+	"time"
+)
+
+// Implementations of TelemetryChannel are responsible for queueing and
+// periodically submitting telemetry items.
+type TelemetryChannel interface {
+	// The address of the endpoint to which telemetry is sent
+	EndpointAddress() string
+
+	// Queues a single telemetry item
+	Send(*contracts.Envelope)
+
+	// Forces the current queue to be sent
+	Flush()
+
+	// Tears down the submission goroutines, closes internal channels.
+	// Any telemetry waiting to be sent is discarded.  Further calls to
+	// Send() have undefined behavior.  This is a more abrupt version of
+	// Close().
+	Stop()
+
+	// Returns true if this channel has been throttled by the data
+	// collector.
+	IsThrottled() bool
+
+	// Flushes and tears down the submission goroutine and closes
+	// internal channels.  Returns a channel that is closed when all
+	// pending telemetry items have been submitted and it is safe to
+	// shut down without losing telemetry.
+	//
+	// If retryTimeout is specified and non-zero, then failed
+	// submissions will be retried until one succeeds or the timeout
+	// expires, whichever occurs first.  A retryTimeout of zero
+	// indicates that failed submissions will be retried as usual.  An
+	// omitted retryTimeout indicates that submissions should not be
+	// retried if they fail.
+	//
+	// Note that the returned channel may not be closed before
+	// retryTimeout even if it is specified.  This is because
+	// retryTimeout only applies to the latest telemetry buffer.  This
+	// may be typical for applications that submit a large amount of
+	// telemetry or are prone to being throttled.  When exiting, you
+	// should select on the result channel and your own timer to avoid
+	// long delays.
+	Close(retryTimeout ...time.Duration) <-chan struct{}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/telemetrycontext.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/telemetrycontext.go
new file mode 100644
index 00000000000000..f54e36d1463144
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/telemetrycontext.go
@@ -0,0 +1,104 @@
+package appinsights
+
+import (
+	"strings"
+
+	"github.com/microsoft/ApplicationInsights-Go/appinsights/contracts"
+)
+
+// Encapsulates contextual data common to all telemetry submitted through a
+// TelemetryClient instance such as including instrumentation key, tags, and
+// common properties.
+type TelemetryContext struct {
+	// Instrumentation key
+	iKey string
+
+	// Stripped-down instrumentation key used in envelope name
+	nameIKey string
+
+	// Collection of tag data to attach to the telemetry item.
+	Tags contracts.ContextTags
+
+	// Common properties to add to each telemetry item.  This only has
+	// an effect from the TelemetryClient's context instance.  This will
+	// be nil on telemetry items.
+	CommonProperties map[string]string
+}
+
+// Creates a new, empty TelemetryContext
+func NewTelemetryContext(ikey string) *TelemetryContext {
+	return &TelemetryContext{
+		iKey:             ikey,
+		nameIKey:         strings.Replace(ikey, "-", "", -1),
+		Tags:             make(contracts.ContextTags),
+		CommonProperties: make(map[string]string),
+	}
+}
+
+// Gets the instrumentation key associated with this TelemetryContext.  This
+// will be an empty string on telemetry items' context instances.
+func (context *TelemetryContext) InstrumentationKey() string {
+	return context.iKey
+}
+
+// Wraps a telemetry item in an envelope with the information found in this
+// context.
+func (context *TelemetryContext) envelop(item Telemetry) *contracts.Envelope {
+	// Apply common properties
+	if props := item.GetProperties(); props != nil && context.CommonProperties != nil {
+		for k, v := range context.CommonProperties {
+			if _, ok := props[k]; !ok {
+				props[k] = v
+			}
+		}
+	}
+
+	tdata := item.TelemetryData()
+	data := contracts.NewData()
+	data.BaseType = tdata.BaseType()
+	data.BaseData = tdata
+
+	envelope := contracts.NewEnvelope()
+	envelope.Name = tdata.EnvelopeName(context.nameIKey)
+	envelope.Data = data
+	envelope.IKey = context.iKey
+
+	timestamp := item.Time()
+	if timestamp.IsZero() {
+		timestamp = currentClock.Now()
+	}
+
+	envelope.Time = timestamp.UTC().Format("2006-01-02T15:04:05.999999Z")
+
+	if contextTags := item.ContextTags(); contextTags != nil {
+		envelope.Tags = contextTags
+
+		// Copy in default tag values.
+		for tagkey, tagval := range context.Tags {
+			if _, ok := contextTags[tagkey]; !ok {
+				contextTags[tagkey] = tagval
+			}
+		}
+	} else {
+		// Create new tags object
+		envelope.Tags = make(map[string]string)
+		for k, v := range context.Tags {
+			envelope.Tags[k] = v
+		}
+	}
+
+	// Create operation ID if it does not exist
+	if _, ok := envelope.Tags[contracts.OperationId]; !ok {
+		envelope.Tags[contracts.OperationId] = newUUID().String()
+	}
+
+	// Sanitize.
+	for _, warn := range tdata.Sanitize() {
+		diagnosticsWriter.Printf("Telemetry data warning: %s", warn)
+	}
+	for _, warn := range contracts.SanitizeTags(envelope.Tags) {
+		diagnosticsWriter.Printf("Telemetry tag warning: %s", warn)
+	}
+
+	return envelope
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/throttle.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/throttle.go
new file mode 100644
index 00000000000000..2c85800d14aa9d
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/throttle.go
@@ -0,0 +1,144 @@
+package appinsights
+
+import (
+	"time"
+)
+
+type throttleManager struct {
+	msgs chan *throttleMessage
+}
+
+type throttleMessage struct {
+	query     bool
+	wait      bool
+	throttle  bool
+	stop      bool
+	timestamp time.Time
+	result    chan bool
+}
+
+func newThrottleManager() *throttleManager {
+	result := &throttleManager{
+		msgs: make(chan *throttleMessage),
+	}
+
+	go result.run()
+	return result
+}
+
+func (throttle *throttleManager) RetryAfter(t time.Time) {
+	throttle.msgs <- &throttleMessage{
+		throttle:  true,
+		timestamp: t,
+	}
+}
+
+func (throttle *throttleManager) IsThrottled() bool {
+	ch := make(chan bool)
+	throttle.msgs <- &throttleMessage{
+		query:  true,
+		result: ch,
+	}
+
+	result := <-ch
+	close(ch)
+	return result
+}
+
+func (throttle *throttleManager) NotifyWhenReady() chan bool {
+	result := make(chan bool, 1)
+	throttle.msgs <- &throttleMessage{
+		wait:   true,
+		result: result,
+	}
+
+	return result
+}
+
+func (throttle *throttleManager) Stop() {
+	result := make(chan bool)
+	throttle.msgs <- &throttleMessage{
+		stop:   true,
+		result: result,
+	}
+
+	<-result
+	close(result)
+}
+
+func (throttle *throttleManager) run() {
+	for {
+		throttledUntil, ok := throttle.waitForThrottle()
+		if !ok {
+			break
+		}
+
+		if !throttle.waitForReady(throttledUntil) {
+			break
+		}
+	}
+
+	close(throttle.msgs)
+}
+
+func (throttle *throttleManager) waitForThrottle() (time.Time, bool) {
+	for {
+		msg := <-throttle.msgs
+		if msg.query {
+			msg.result <- false
+		} else if msg.wait {
+			msg.result <- true
+		} else if msg.stop {
+			return time.Time{}, false
+		} else if msg.throttle {
+			return msg.timestamp, true
+		}
+	}
+}
+
+func (throttle *throttleManager) waitForReady(throttledUntil time.Time) bool {
+	duration := throttledUntil.Sub(currentClock.Now())
+	if duration <= 0 {
+		return true
+	}
+
+	var notify []chan bool
+
+	// --- Throttled and waiting ---
+	t := currentClock.NewTimer(duration)
+
+	for {
+		select {
+		case <-t.C():
+			for _, n := range notify {
+				n <- true
+			}
+
+			return true
+		case msg := <-throttle.msgs:
+			if msg.query {
+				msg.result <- true
+			} else if msg.wait {
+				notify = append(notify, msg.result)
+			} else if msg.stop {
+				for _, n := range notify {
+					n <- false
+				}
+
+				msg.result <- true
+
+				return false
+			} else if msg.throttle {
+				if msg.timestamp.After(throttledUntil) {
+					throttledUntil = msg.timestamp
+
+					if !t.Stop() {
+						<-t.C()
+					}
+
+					t.Reset(throttledUntil.Sub(currentClock.Now()))
+				}
+			}
+		}
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/transmitter.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/transmitter.go
new file mode 100644
index 00000000000000..33a8be03bb36bf
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/transmitter.go
@@ -0,0 +1,240 @@
+package appinsights
+
+import (
+	"bytes"
+	"compress/gzip"
+	"encoding/json"
+	"io/ioutil"
+	"net/http"
+	"sort"
+	"time"
+)
+
+type transmitter interface {
+	Transmit(payload []byte, items telemetryBufferItems) (*transmissionResult, error)
+}
+
+type httpTransmitter struct {
+	endpoint string
+	client   *http.Client
+}
+
+type transmissionResult struct {
+	statusCode int
+	retryAfter *time.Time
+	response   *backendResponse
+}
+
+// Structures returned by data collector
+type backendResponse struct {
+	ItemsReceived int                     `json:"itemsReceived"`
+	ItemsAccepted int                     `json:"itemsAccepted"`
+	Errors        itemTransmissionResults `json:"errors"`
+}
+
+// This needs to be its own type because it implements sort.Interface
+type itemTransmissionResults []*itemTransmissionResult
+
+type itemTransmissionResult struct {
+	Index      int    `json:"index"`
+	StatusCode int    `json:"statusCode"`
+	Message    string `json:"message"`
+}
+
+const (
+	successResponse                         = 200
+	partialSuccessResponse                  = 206
+	requestTimeoutResponse                  = 408
+	tooManyRequestsResponse                 = 429
+	tooManyRequestsOverExtendedTimeResponse = 439
+	errorResponse                           = 500
+	serviceUnavailableResponse              = 503
+)
+
+func newTransmitter(endpointAddress string, client *http.Client) transmitter {
+	if client == nil {
+		client = http.DefaultClient
+	}
+	return &httpTransmitter{endpointAddress, client}
+}
+
+func (transmitter *httpTransmitter) Transmit(payload []byte, items telemetryBufferItems) (*transmissionResult, error) {
+	diagnosticsWriter.Printf("--------- Transmitting %d items ---------", len(items))
+	startTime := time.Now()
+
+	// Compress the payload
+	var postBody bytes.Buffer
+	gzipWriter := gzip.NewWriter(&postBody)
+	if _, err := gzipWriter.Write(payload); err != nil {
+		diagnosticsWriter.Printf("Failed to compress the payload: %s", err.Error())
+		gzipWriter.Close()
+		return nil, err
+	}
+
+	gzipWriter.Close()
+
+	req, err := http.NewRequest("POST", transmitter.endpoint, &postBody)
+	if err != nil {
+		return nil, err
+	}
+
+	req.Header.Set("Content-Encoding", "gzip")
+	req.Header.Set("Content-Type", "application/x-json-stream")
+	req.Header.Set("Accept-Encoding", "gzip, deflate")
+
+	resp, err := transmitter.client.Do(req)
+	if err != nil {
+		diagnosticsWriter.Printf("Failed to transmit telemetry: %s", err.Error())
+		return nil, err
+	}
+
+	defer resp.Body.Close()
+
+	body, err := ioutil.ReadAll(resp.Body)
+	if err != nil {
+		diagnosticsWriter.Printf("Failed to read response from server: %s", err.Error())
+		return nil, err
+	}
+
+	duration := time.Since(startTime)
+
+	result := &transmissionResult{statusCode: resp.StatusCode}
+
+	// Grab Retry-After header
+	if retryAfterValue, ok := resp.Header[http.CanonicalHeaderKey("Retry-After")]; ok && len(retryAfterValue) == 1 {
+		if retryAfterTime, err := time.Parse(time.RFC1123, retryAfterValue[0]); err == nil {
+			result.retryAfter = &retryAfterTime
+		}
+	}
+
+	// Parse body, if possible
+	response := &backendResponse{}
+	if err := json.Unmarshal(body, &response); err == nil {
+		result.response = response
+	}
+
+	// Write diagnostics
+	if diagnosticsWriter.hasListeners() {
+		diagnosticsWriter.Printf("Telemetry transmitted in %s", duration)
+		diagnosticsWriter.Printf("Response: %d", result.statusCode)
+		if result.response != nil {
+			diagnosticsWriter.Printf("Items accepted/received: %d/%d", result.response.ItemsAccepted, result.response.ItemsReceived)
+			if len(result.response.Errors) > 0 {
+				diagnosticsWriter.Printf("Errors:")
+				for _, err := range result.response.Errors {
+					if err.Index < len(items) {
+						diagnosticsWriter.Printf("#%d - %d %s", err.Index, err.StatusCode, err.Message)
+						diagnosticsWriter.Printf("Telemetry item:\n\t%s", string(items[err.Index:err.Index+1].serialize()))
+					}
+				}
+			}
+		}
+	}
+
+	return result, nil
+}
+
+func (result *transmissionResult) IsSuccess() bool {
+	return result.statusCode == successResponse ||
+		// Partial response but all items accepted
+		(result.statusCode == partialSuccessResponse &&
+			result.response != nil &&
+			result.response.ItemsReceived == result.response.ItemsAccepted)
+}
+
+func (result *transmissionResult) IsFailure() bool {
+	return result.statusCode != successResponse && result.statusCode != partialSuccessResponse
+}
+
+func (result *transmissionResult) CanRetry() bool {
+	if result.IsSuccess() {
+		return false
+	}
+
+	return result.statusCode == partialSuccessResponse ||
+		result.retryAfter != nil ||
+		(result.statusCode == requestTimeoutResponse ||
+			result.statusCode == serviceUnavailableResponse ||
+			result.statusCode == errorResponse ||
+			result.statusCode == tooManyRequestsResponse ||
+			result.statusCode == tooManyRequestsOverExtendedTimeResponse)
+}
+
+func (result *transmissionResult) IsPartialSuccess() bool {
+	return result.statusCode == partialSuccessResponse &&
+		result.response != nil &&
+		result.response.ItemsReceived != result.response.ItemsAccepted
+}
+
+func (result *transmissionResult) IsThrottled() bool {
+	return result.statusCode == tooManyRequestsResponse ||
+		result.statusCode == tooManyRequestsOverExtendedTimeResponse ||
+		result.retryAfter != nil
+}
+
+func (result *itemTransmissionResult) CanRetry() bool {
+	return result.StatusCode == requestTimeoutResponse ||
+		result.StatusCode == serviceUnavailableResponse ||
+		result.StatusCode == errorResponse ||
+		result.StatusCode == tooManyRequestsResponse ||
+		result.StatusCode == tooManyRequestsOverExtendedTimeResponse
+}
+
+func (result *transmissionResult) GetRetryItems(payload []byte, items telemetryBufferItems) ([]byte, telemetryBufferItems) {
+	if result.statusCode == partialSuccessResponse && result.response != nil {
+		// Make sure errors are ordered by index
+		sort.Sort(result.response.Errors)
+
+		var resultPayload bytes.Buffer
+		resultItems := make(telemetryBufferItems, 0)
+		ptr := 0
+		idx := 0
+
+		// Find each retryable error
+		for _, responseResult := range result.response.Errors {
+			if responseResult.CanRetry() {
+				// Advance ptr to start of desired line
+				for ; idx < responseResult.Index && ptr < len(payload); ptr++ {
+					if payload[ptr] == '\n' {
+						idx++
+					}
+				}
+
+				startPtr := ptr
+
+				// Read to end of line
+				for ; idx == responseResult.Index && ptr < len(payload); ptr++ {
+					if payload[ptr] == '\n' {
+						idx++
+					}
+				}
+
+				// Copy item into output buffer
+				resultPayload.Write(payload[startPtr:ptr])
+				resultItems = append(resultItems, items[responseResult.Index])
+			}
+		}
+
+		return resultPayload.Bytes(), resultItems
+	} else if result.CanRetry() {
+		return payload, items
+	} else {
+		return payload[:0], items[:0]
+	}
+}
+
+// sort.Interface implementation for Errors[] list
+
+func (results itemTransmissionResults) Len() int {
+	return len(results)
+}
+
+func (results itemTransmissionResults) Less(i, j int) bool {
+	return results[i].Index < results[j].Index
+}
+
+func (results itemTransmissionResults) Swap(i, j int) {
+	tmp := results[i]
+	results[i] = results[j]
+	results[j] = tmp
+}
diff --git a/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/uuid.go b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/uuid.go
new file mode 100644
index 00000000000000..08c6786f09664d
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/ApplicationInsights-Go/appinsights/uuid.go
@@ -0,0 +1,72 @@
+package appinsights
+
+import (
+	crand "crypto/rand"
+	"encoding/binary"
+	"io"
+	"math/rand"
+	"sync"
+	"time"
+
+	"github.com/gofrs/uuid"
+)
+
+// uuidGenerator is a wrapper for gofrs/uuid, an active fork of satori/go.uuid used for a few reasons:
+//   - Avoids build failures due to version differences when a project imports us but
+//     does not respect our vendoring. (satori/go.uuid#77, #71, #66, ...)
+//   - Avoids error output when creaing new UUID's: if the crypto reader fails,
+//     this will fallback on the standard library PRNG, since this is never used
+//     for a sensitive application.
+//   - Uses io.ReadFull to guarantee fully-populated UUID's (satori/go.uuid#73)
+type uuidGenerator struct {
+	sync.Mutex
+	fallbackRand *rand.Rand
+	reader       io.Reader
+}
+
+var uuidgen *uuidGenerator = newUuidGenerator(crand.Reader)
+
+// newUuidGenerator creates a new uuiGenerator with the specified crypto random reader.
+func newUuidGenerator(reader io.Reader) *uuidGenerator {
+	// Setup seed for fallback random generator
+	var seed int64
+	b := make([]byte, 8)
+	if _, err := io.ReadFull(reader, b); err == nil {
+		seed = int64(binary.BigEndian.Uint64(b))
+	} else {
+		// Otherwise just use the timestamp
+		seed = time.Now().UTC().UnixNano()
+	}
+
+	return &uuidGenerator{
+		reader:       reader,
+		fallbackRand: rand.New(rand.NewSource(seed)),
+	}
+}
+
+// newUUID generates a new V4 UUID
+func (gen *uuidGenerator) newUUID() uuid.UUID {
+	//call the standard generator
+	u, err := uuid.NewV4()
+	//err will be either EOF or unexpected EOF
+	if err != nil {
+		gen.fallback(&u)
+	}
+
+	return u
+}
+
+// fallback populates the specified UUID with the standard library's PRNG
+func (gen *uuidGenerator) fallback(u *uuid.UUID) {
+	gen.Lock()
+	defer gen.Unlock()
+	// This does not fail as per documentation
+	gen.fallbackRand.Read(u[:])
+	u.SetVersion(uuid.V4)
+	u.SetVariant(uuid.VariantRFC4122)
+}
+
+// newUUID generates a new V4 UUID
+func newUUID() uuid.UUID {
+	return uuidgen.newUUID()
+}
diff --git a/src/cmd/vendor/github.com/microsoft/go-deviceid/.gitignore b/src/cmd/vendor/github.com/microsoft/go-deviceid/.gitignore
new file mode 100644
index 00000000000000..8a30d258ed9d02
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/go-deviceid/.gitignore
@@ -0,0 +1,398 @@
+## Ignore Visual Studio temporary files, build results, and
+## files generated by popular Visual Studio add-ons.
+##
+## Get latest from https://github.com/github/gitignore/blob/main/VisualStudio.gitignore
+
+# User-specific files
+*.rsuser
+*.suo
+*.user
+*.userosscache
+*.sln.docstates
+
+# User-specific files (MonoDevelop/Xamarin Studio)
+*.userprefs
+
+# Mono auto generated files
+mono_crash.*
+
+# Build results
+[Dd]ebug/
+[Dd]ebugPublic/
+[Rr]elease/
+[Rr]eleases/
+x64/
+x86/
+[Ww][Ii][Nn]32/
+[Aa][Rr][Mm]/
+[Aa][Rr][Mm]64/
+bld/
+[Bb]in/
+[Oo]bj/
+[Ll]og/
+[Ll]ogs/
+
+# Visual Studio 2015/2017 cache/options directory
+.vs/
+# Uncomment if you have tasks that create the project's static files in wwwroot
+#wwwroot/
+
+# Visual Studio 2017 auto generated files
+Generated\ Files/
+
+# MSTest test Results
+[Tt]est[Rr]esult*/
+[Bb]uild[Ll]og.*
+
+# NUnit
+*.VisualState.xml
+TestResult.xml
+nunit-*.xml
+
+# Build Results of an ATL Project
+[Dd]ebugPS/
+[Rr]eleasePS/
+dlldata.c
+
+# Benchmark Results
+BenchmarkDotNet.Artifacts/
+
+# .NET Core
+project.lock.json
+project.fragment.lock.json
+artifacts/
+
+# ASP.NET Scaffolding
+ScaffoldingReadMe.txt
+
+# StyleCop
+StyleCopReport.xml
+
+# Files built by Visual Studio
+*_i.c
+*_p.c
+*_h.h
+*.ilk
+*.meta
+*.obj
+*.iobj
+*.pch
+*.pdb
+*.ipdb
+*.pgc
+*.pgd
+*.rsp
+*.sbr
+*.tlb
+*.tli
+*.tlh
+*.tmp
+*.tmp_proj
+*_wpftmp.csproj
+*.log
+*.tlog
+*.vspscc
+*.vssscc
+.builds
+*.pidb
+*.svclog
+*.scc
+
+# Chutzpah Test files
+_Chutzpah*
+
+# Visual C++ cache files
+ipch/
+*.aps
+*.ncb
+*.opendb
+*.opensdf
+*.sdf
+*.cachefile
+*.VC.db
+*.VC.VC.opendb
+
+# Visual Studio profiler
+*.psess
+*.vsp
+*.vspx
+*.sap
+
+# Visual Studio Trace Files
+*.e2e
+
+# TFS 2012 Local Workspace
+$tf/
+
+# Guidance Automation Toolkit
+*.gpState
+
+# ReSharper is a .NET coding add-in
+_ReSharper*/
+*.[Rr]e[Ss]harper
+*.DotSettings.user
+
+# TeamCity is a build add-in
+_TeamCity*
+
+# DotCover is a Code Coverage Tool
+*.dotCover
+
+# AxoCover is a Code Coverage Tool
+.axoCover/*
+!.axoCover/settings.json
+
+# Coverlet is a free, cross platform Code Coverage Tool
+coverage*.json
+coverage*.xml
+coverage*.info
+
+# Visual Studio code coverage results
+*.coverage
+*.coveragexml
+
+# NCrunch
+_NCrunch_*
+.*crunch*.local.xml
+nCrunchTemp_*
+
+# MightyMoose
+*.mm.*
+AutoTest.Net/
+
+# Web workbench (sass)
+.sass-cache/
+
+# Installshield output folder
+[Ee]xpress/
+
+# DocProject is a documentation generator add-in
+DocProject/buildhelp/
+DocProject/Help/*.HxT
+DocProject/Help/*.HxC
+DocProject/Help/*.hhc
+DocProject/Help/*.hhk
+DocProject/Help/*.hhp
+DocProject/Help/Html2
+DocProject/Help/html
+
+# Click-Once directory
+publish/
+
+# Publish Web Output
+*.[Pp]ublish.xml
+*.azurePubxml
+# Note: Comment the next line if you want to checkin your web deploy settings,
+# but database connection strings (with potential passwords) will be unencrypted
+*.pubxml
+*.publishproj
+
+# Microsoft Azure Web App publish settings. Comment the next line if you want to
+# checkin your Azure Web App publish settings, but sensitive information contained
+# in these scripts will be unencrypted
+PublishScripts/
+
+# NuGet Packages
+*.nupkg
+# NuGet Symbol Packages
+*.snupkg
+# The packages folder can be ignored because of Package Restore
+**/[Pp]ackages/*
+# except build/, which is used as an MSBuild target.
+!**/[Pp]ackages/build/
+# Uncomment if necessary however generally it will be regenerated when needed
+#!**/[Pp]ackages/repositories.config
+# NuGet v3's project.json files produces more ignorable files
+*.nuget.props
+*.nuget.targets
+
+# Microsoft Azure Build Output
+csx/
+*.build.csdef
+
+# Microsoft Azure Emulator
+ecf/
+rcf/
+
+# Windows Store app package directories and files
+AppPackages/
+BundleArtifacts/
+Package.StoreAssociation.xml
+_pkginfo.txt
+*.appx
+*.appxbundle
+*.appxupload
+
+# Visual Studio cache files
+# files ending in .cache can be ignored
+*.[Cc]ache
+# but keep track of directories ending in .cache
+!?*.[Cc]ache/
+
+# Others
+ClientBin/
+~$*
+*~
+*.dbmdl
+*.dbproj.schemaview
+*.jfm
+*.pfx
+*.publishsettings
+orleans.codegen.cs
+
+# Including strong name files can present a security risk
+# (https://github.com/github/gitignore/pull/2483#issue-259490424)
+#*.snk
+
+# Since there are multiple workflows, uncomment next line to ignore bower_components
+# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
+#bower_components/
+
+# RIA/Silverlight projects
+Generated_Code/
+
+# Backup & report files from converting an old project file
+# to a newer Visual Studio version. Backup files are not needed,
+# because we have git ;-)
+_UpgradeReport_Files/
+Backup*/
+UpgradeLog*.XML
+UpgradeLog*.htm
+ServiceFabricBackup/
+*.rptproj.bak
+
+# SQL Server files
+*.mdf
+*.ldf
+*.ndf
+
+# Business Intelligence projects
+*.rdl.data
+*.bim.layout
+*.bim_*.settings
+*.rptproj.rsuser
+*- [Bb]ackup.rdl
+*- [Bb]ackup ([0-9]).rdl
+*- [Bb]ackup ([0-9][0-9]).rdl
+
+# Microsoft Fakes
+FakesAssemblies/
+
+# GhostDoc plugin setting file
+*.GhostDoc.xml
+
+# Node.js Tools for Visual Studio
+.ntvs_analysis.dat
+node_modules/
+
+# Visual Studio 6 build log
+*.plg
+
+# Visual Studio 6 workspace options file
+*.opt
+
+# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
+*.vbw
+
+# Visual Studio 6 auto-generated project file (contains which files were open etc.)
+*.vbp
+
+# Visual Studio 6 workspace and project file (working project files containing files to include in project)
+*.dsw
+*.dsp
+
+# Visual Studio 6 technical files
+*.ncb
+*.aps
+
+# Visual Studio LightSwitch build output
+**/*.HTMLClient/GeneratedArtifacts
+**/*.DesktopClient/GeneratedArtifacts
+**/*.DesktopClient/ModelManifest.xml
+**/*.Server/GeneratedArtifacts
+**/*.Server/ModelManifest.xml
+_Pvt_Extensions
+
+# Paket dependency manager
+.paket/paket.exe
+paket-files/
+
+# FAKE - F# Make
+.fake/
+
+# CodeRush personal settings
+.cr/personal
+
+# Python Tools for Visual Studio (PTVS)
+__pycache__/
+*.pyc
+
+# Cake - Uncomment if you are using it
+# tools/**
+# !tools/packages.config
+
+# Tabs Studio
+*.tss
+
+# Telerik's JustMock configuration file
+*.jmconfig
+
+# BizTalk build output
+*.btp.cs
+*.btm.cs
+*.odx.cs
+*.xsd.cs
+
+# OpenCover UI analysis results
+OpenCover/
+
+# Azure Stream Analytics local run output
+ASALocalRun/
+
+# MSBuild Binary and Structured Log
+*.binlog
+
+# NVidia Nsight GPU debugger configuration file
+*.nvuser
+
+# MFractors (Xamarin productivity tool) working folder
+.mfractor/
+
+# Local History for Visual Studio
+.localhistory/
+
+# Visual Studio History (VSHistory) files
+.vshistory/
+
+# BeatPulse healthcheck temp database
+healthchecksdb
+
+# Backup folder for Package Reference Convert tool in Visual Studio 2017
+MigrationBackup/
+
+# Ionide (cross platform F# VS Code tools) working folder
+.ionide/
+
+# Fody - auto-generated XML schema
+FodyWeavers.xsd
+
+# VS Code files for those working on multiple tools
+.vscode/*
+!.vscode/settings.json
+!.vscode/tasks.json
+!.vscode/launch.json
+!.vscode/extensions.json
+*.code-workspace
+
+# Local History for Visual Studio Code
+.history/
+
+# Windows Installer files from build outputs
+*.cab
+*.msi
+*.msix
+*.msm
+*.msp
+
+# JetBrains Rider
+*.sln.iml
diff --git a/src/cmd/vendor/github.com/microsoft/go-deviceid/CODE_OF_CONDUCT.md b/src/cmd/vendor/github.com/microsoft/go-deviceid/CODE_OF_CONDUCT.md
new file mode 100644
index 00000000000000..e249d84e7230de
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/go-deviceid/CODE_OF_CONDUCT.md
@@ -0,0 +1,9 @@
+# Microsoft Open Source Code of Conduct
+
+This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).
+
+Resources:
+
+- [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/)
+- [Microsoft Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)
+- Contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with questions or concerns.
\ No newline at end of file
diff --git a/src/cmd/vendor/github.com/microsoft/go-deviceid/CONTRIBUTING.md b/src/cmd/vendor/github.com/microsoft/go-deviceid/CONTRIBUTING.md
new file mode 100644
index 00000000000000..c282e9a1adacca
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/go-deviceid/CONTRIBUTING.md
@@ -0,0 +1,14 @@
+# Contributing
+
+This project welcomes contributions and suggestions. Most contributions require you to
+agree to a Contributor License Agreement (CLA) declaring that you have the right to,
+and actually do, grant us the rights to use your contribution. For details, visit
+https://cla.microsoft.com.
+
+When you submit a pull request, a CLA-bot will automatically determine whether you need
+to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the
+instructions provided by the bot. You will only need to do this once across all repositories using our CLA.
+
+This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).
+For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/)
+or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.
\ No newline at end of file
diff --git a/src/cmd/vendor/github.com/microsoft/go-deviceid/LICENSE.txt b/src/cmd/vendor/github.com/microsoft/go-deviceid/LICENSE.txt
new file mode 100644
index 00000000000000..0aad79bdeeb25e
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/go-deviceid/LICENSE.txt
@@ -0,0 +1,23 @@
+go-deviceid
+
+Copyright (c) Microsoft Corporation.
+
+MIT License
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/src/cmd/vendor/github.com/microsoft/go-deviceid/README.md b/src/cmd/vendor/github.com/microsoft/go-deviceid/README.md
new file mode 100644
index 00000000000000..a4be0e9b215dfb
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/go-deviceid/README.md
@@ -0,0 +1,42 @@
+# Device ID for Go
+
+`deviceid` provides a device ID for a given system, based on the `DevDeviceId` specification.
+
+## Installation
+
+`go get github.com/microsoft/go-deviceid`
+
+## Usage
+
+```golang
+import deviceid "github.com/microsoft/go-deviceid"
+
+deviceId, err := deviceid.Get()
+if err != nil {
+  // handle error
+}
+
+fmt.Println("Device ID is: ", deviceId)
+```
+
+## Contributing
+
+This project welcomes contributions and suggestions.  Most contributions require you to agree to a
+Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us
+the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com.
+
+When you submit a pull request, a CLA bot will automatically determine whether you need to provide
+a CLA and decorate the PR appropriately (e.g., status check, comment). Simply follow the instructions
+provided by the bot. You will only need to do this once across all repos using our CLA.
+
+This project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/).
+For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or
+contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.
+
+## Trademarks
+
+This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft 
+trademarks or logos is subject to and must follow 
+[Microsoft's Trademark & Brand Guidelines](https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/usage/general).
+Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship.
+Any use of third-party trademarks or logos are subject to those third-party's policies.
diff --git a/src/cmd/vendor/github.com/microsoft/go-deviceid/SECURITY.md b/src/cmd/vendor/github.com/microsoft/go-deviceid/SECURITY.md
new file mode 100644
index 00000000000000..b3c89efc852e22
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/go-deviceid/SECURITY.md
@@ -0,0 +1,41 @@
+<!-- BEGIN MICROSOFT SECURITY.MD V0.0.9 BLOCK -->
+
+## Security
+
+Microsoft takes the security of our software products and services seriously, which includes all source code repositories managed through our GitHub organizations, which include [Microsoft](https://github.com/Microsoft), [Azure](https://github.com/Azure), [DotNet](https://github.com/dotnet), [AspNet](https://github.com/aspnet) and [Xamarin](https://github.com/xamarin).
+
+If you believe you have found a security vulnerability in any Microsoft-owned repository that meets [Microsoft's definition of a security vulnerability](https://aka.ms/security.md/definition), please report it to us as described below.
+
+## Reporting Security Issues
+
+**Please do not report security vulnerabilities through public GitHub issues.**
+
+Instead, please report them to the Microsoft Security Response Center (MSRC) at [https://msrc.microsoft.com/create-report](https://aka.ms/security.md/msrc/create-report).
+
+If you prefer to submit without logging in, send email to [secure@microsoft.com](mailto:secure@microsoft.com).  If possible, encrypt your message with our PGP key; please download it from the [Microsoft Security Response Center PGP Key page](https://aka.ms/security.md/msrc/pgp).
+
+You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Additional information can be found at [microsoft.com/msrc](https://www.microsoft.com/msrc). 
+
+Please include the requested information listed below (as much as you can provide) to help us better understand the nature and scope of the possible issue:
+
+  * Type of issue (e.g. buffer overflow, SQL injection, cross-site scripting, etc.)
+  * Full paths of source file(s) related to the manifestation of the issue
+  * The location of the affected source code (tag/branch/commit or direct URL)
+  * Any special configuration required to reproduce the issue
+  * Step-by-step instructions to reproduce the issue
+  * Proof-of-concept or exploit code (if possible)
+  * Impact of the issue, including how an attacker might exploit the issue
+
+This information will help us triage your report more quickly.
+
+If you are reporting for a bug bounty, more complete reports can contribute to a higher bounty award. Please visit our [Microsoft Bug Bounty Program](https://aka.ms/security.md/msrc/bounty) page for more details about our active programs.
+
+## Preferred Languages
+
+We prefer all communications to be in English.
+
+## Policy
+
+Microsoft follows the principle of [Coordinated Vulnerability Disclosure](https://aka.ms/security.md/cvd).
+
+<!-- END MICROSOFT SECURITY.MD BLOCK -->
diff --git a/src/cmd/vendor/github.com/microsoft/go-deviceid/SUPPORT.md b/src/cmd/vendor/github.com/microsoft/go-deviceid/SUPPORT.md
new file mode 100644
index 00000000000000..91ff06fd79ef09
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/go-deviceid/SUPPORT.md
@@ -0,0 +1,8 @@
+# Support
+## How to file issues and get help
+This project uses GitHub Issues to track bugs and feature requests. Please search the existing issues before filing new issues to avoid duplicates. For new issues, file your bug or feature request as a new Issue.
+
+For help and questions about using this project, please open an issue.
+
+## Microsoft Support Policy
+Support for this PROJECT or PRODUCT is limited to the resources listed above.
\ No newline at end of file
diff --git a/src/cmd/vendor/github.com/microsoft/go-deviceid/devid_all_platforms.go b/src/cmd/vendor/github.com/microsoft/go-deviceid/devid_all_platforms.go
new file mode 100644
index 00000000000000..ff8b5fb3be701c
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/go-deviceid/devid_all_platforms.go
@@ -0,0 +1,87 @@
+// Copyright (c) Microsoft Corporation. All rights reserved.
+// Licensed under the MIT License.
+
+package deviceid
+
+import (
+	"crypto/rand"
+	"errors"
+	"fmt"
+	"os"
+	"path"
+	"strings"
+)
+
+// generateDeviceID generates values in the format of:
+// `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`
+// Where 'x' is any legal lowercased hex digit.
+func generateDeviceID() (string, error) {
+	randBytes := make([]byte, 4+2+2+2+6)
+
+	if _, err := rand.Read(randBytes); err != nil {
+		return "", err
+	}
+
+	return formatGUID(randBytes), nil
+}
+
+// formatGUID takes 16 bytes and formats it into a lowercased GUID (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx)
+// NOTE: there's no error checking here, I just split this out from generateDeviceID so we can unit test it.
+func formatGUID(randBytes []byte) string {
+	return fmt.Sprintf("%x-%x-%x-%x-%x",
+		randBytes[0:4],
+		randBytes[4:6],
+		randBytes[6:8],
+		randBytes[8:10],
+		randBytes[10:])
+}
+
+// readWriteDeviceIDFile reads a deviceid from a file in dir + "/deviceid" and returns it.
+// If the file doesn't exist it creates the file with a newly generated device id and returns the new deviceid.
+//   - dir is the folder we'll write our deviceid file to.
+//   - scrubValue is a free form description of what this directory represents, like the environment variable we used
+//     to form the path. When errors occur that have the 'dir' in them it'll be replaced by this value.
+func readWriteDeviceIDFile(dir string, scrubValue string) (string, error) {
+	err := os.MkdirAll(dir, 0700)
+
+	if err != nil {
+		return "", scrubPathError(dir, scrubValue, err)
+	}
+
+	filePath := path.Join(dir, "deviceid")
+
+	contents, err := os.ReadFile(filePath)
+
+	if os.IsNotExist(err) {
+		deviceID, err := generateDeviceID()
+
+		if err != nil {
+			return "", newError(err)
+		}
+
+		if err := os.WriteFile(filePath, []byte(deviceID), 0600); err != nil {
+			// this error might have some user information in it (via the home folder)
+			// so let's scrub that out and make it something non-identifying and generic.
+			return "", scrubPathError(dir, scrubValue, err)
+		}
+
+		return deviceID, nil
+	} else if err != nil {
+		return "", scrubPathError(dir, scrubValue, err)
+	}
+
+	return string(contents), nil
+}
+
+func newError(err error) error {
+	// we're purposefully removing any type/chain information here - there's no type
+	// guarantees for errors returned from this library.
+	return errors.New(err.Error())
+}
+
+func scrubPathError(folder string, replace string, err error) error {
+	oldMessage := err.Error()
+	newMessage := strings.Replace(oldMessage, folder, replace, 1)
+
+	return newError(errors.New(newMessage))
+}
diff --git a/src/cmd/vendor/github.com/microsoft/go-deviceid/devid_darwin.go b/src/cmd/vendor/github.com/microsoft/go-deviceid/devid_darwin.go
new file mode 100644
index 00000000000000..253a1eaebb1355
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/go-deviceid/devid_darwin.go
@@ -0,0 +1,30 @@
+//go:build darwin
+
+// Copyright (c) Microsoft Corporation. All rights reserved.
+// Licensed under the MIT License.
+
+package deviceid
+
+import (
+	"errors"
+	"os"
+	"path"
+)
+
+// Get returns the device id for the current system.
+func Get() (string, error) {
+	// 1.3 Mac
+	// * The folder path will be $HOME\Library\Application Support\Microsoft\DeveloperTools where $HOME is the user's home directory.
+	// * The file will be called 'deviceid'
+	// * The value should be stored in plain text, UTF-8, and in the format specified in Section 1.
+	home := os.Getenv("HOME")
+
+	if home == "" {
+		return "", errors.New("environment variable HOME is not set")
+	}
+
+	return readWriteDeviceIDFile(
+		path.Join(home, `Library/Application Support/Microsoft/DeveloperTools`),
+		"HOME",
+	)
+}
diff --git a/src/cmd/vendor/github.com/microsoft/go-deviceid/devid_linux.go b/src/cmd/vendor/github.com/microsoft/go-deviceid/devid_linux.go
new file mode 100644
index 00000000000000..d25d3276cf53a2
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/go-deviceid/devid_linux.go
@@ -0,0 +1,35 @@
+//go:build linux
+
+// Copyright (c) Microsoft Corporation. All rights reserved.
+// Licensed under the MIT License.
+
+package deviceid
+
+import (
+	"fmt"
+	"os"
+	"path"
+)
+
+// Get returns the device id for the current system.
+func Get() (string, error) {
+	// 1.2 Linux
+	// * The folder path will be <RootPath>/Microsoft/DeveloperTools where <RootPath> is $XDG_CACHE_HOME if it is set and not empty, else use $HOME/.cache.
+	// * The file will be called 'deviceid'.
+	// * The value should be stored in plain text, UTF-8, and in the format specified in Section 1.
+	xdgCacheHome := os.Getenv("XDG_CACHE_HOME")
+	home := os.Getenv("HOME")
+
+	const devToolsSubPath = `Microsoft/DeveloperTools`
+
+	switch {
+	case xdgCacheHome != "":
+		dir := path.Join(xdgCacheHome, devToolsSubPath)
+		return readWriteDeviceIDFile(dir, "XDG_CACHE_HOME")
+	case home != "":
+		dir := path.Join(home, ".cache", devToolsSubPath)
+		return readWriteDeviceIDFile(dir, "HOME")
+	default:
+		return "", fmt.Errorf("neither XDG_CACHE_HOME or HOME are set")
+	}
+}
diff --git a/src/cmd/vendor/github.com/microsoft/go-deviceid/devid_windows.go b/src/cmd/vendor/github.com/microsoft/go-deviceid/devid_windows.go
new file mode 100644
index 00000000000000..405071a2402cff
--- /dev/null
+++ b/src/cmd/vendor/github.com/microsoft/go-deviceid/devid_windows.go
@@ -0,0 +1,59 @@
+//go:build windows
+
+// Copyright (c) Microsoft Corporation. All rights reserved.
+// Licensed under the MIT License.
+
+package deviceid
+
+import (
+	"errors"
+
+	"golang.org/x/sys/windows/registry"
+)
+
+// Get returns the device id for the current system.
+func Get() (string, error) {
+	return readWriteDeviceIDRegistry(devToolsSubPath)
+}
+
+const devToolsSubPath = `SOFTWARE\Microsoft\DeveloperTools`
+const deviceIDValueName = "deviceid"
+
+// readWriteDeviceIDRegistry reads a deviceid from a registry key value in subKeyPath + "\deviceid" and returns it.
+// If the value doesn't exist, it creates the registry key value with a newly generated device id
+// and returns the new deviceid.
+func readWriteDeviceIDRegistry(subKeyPath string) (string, error) {
+	// 1.1 Windows
+	// * The value is cached in the 64-bit Windows Registry under HKeyCurrentUser\SOFTWARE\Microsoft\DeveloperTools.
+	// * The key should be named 'deviceid' and should be of type REG_SZ (String value).
+	// * The value should be stored in plain text and in the format specified in Section 1.
+	key, _, err := registry.CreateKey(registry.CURRENT_USER, subKeyPath, registry.READ|registry.WRITE)
+
+	if err != nil {
+		return "", newError(err)
+	}
+
+	defer key.Close()
+
+	value, _, err := key.GetStringValue(deviceIDValueName)
+
+	if err == nil {
+		return value, nil
+	}
+
+	if !errors.Is(err, registry.ErrNotExist) {
+		return "", newError(err)
+	}
+
+	devID, err := generateDeviceID()
+
+	if err != nil {
+		return "", newError(err)
+	}
+
+	if err := key.SetStringValue(deviceIDValueName, devID); err != nil {
+		return "", newError(err)
+	}
+
+	return devID, nil
+}
diff --git a/src/cmd/vendor/golang.org/x/sync/errgroup/errgroup.go b/src/cmd/vendor/golang.org/x/sync/errgroup/errgroup.go
deleted file mode 100644
index 948a3ee63d4ffe..00000000000000
--- a/src/cmd/vendor/golang.org/x/sync/errgroup/errgroup.go
+++ /dev/null
@@ -1,135 +0,0 @@
-// Copyright 2016 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-// Package errgroup provides synchronization, error propagation, and Context
-// cancelation for groups of goroutines working on subtasks of a common task.
-//
-// [errgroup.Group] is related to [sync.WaitGroup] but adds handling of tasks
-// returning errors.
-package errgroup
-
-import (
-	"context"
-	"fmt"
-	"sync"
-)
-
-type token struct{}
-
-// A Group is a collection of goroutines working on subtasks that are part of
-// the same overall task.
-//
-// A zero Group is valid, has no limit on the number of active goroutines,
-// and does not cancel on error.
-type Group struct {
-	cancel func(error)
-
-	wg sync.WaitGroup
-
-	sem chan token
-
-	errOnce sync.Once
-	err     error
-}
-
-func (g *Group) done() {
-	if g.sem != nil {
-		<-g.sem
-	}
-	g.wg.Done()
-}
-
-// WithContext returns a new Group and an associated Context derived from ctx.
-//
-// The derived Context is canceled the first time a function passed to Go
-// returns a non-nil error or the first time Wait returns, whichever occurs
-// first.
-func WithContext(ctx context.Context) (*Group, context.Context) {
-	ctx, cancel := withCancelCause(ctx)
-	return &Group{cancel: cancel}, ctx
-}
-
-// Wait blocks until all function calls from the Go method have returned, then
-// returns the first non-nil error (if any) from them.
-func (g *Group) Wait() error {
-	g.wg.Wait()
-	if g.cancel != nil {
-		g.cancel(g.err)
-	}
-	return g.err
-}
-
-// Go calls the given function in a new goroutine.
-// It blocks until the new goroutine can be added without the number of
-// active goroutines in the group exceeding the configured limit.
-//
-// The first call to return a non-nil error cancels the group's context, if the
-// group was created by calling WithContext. The error will be returned by Wait.
-func (g *Group) Go(f func() error) {
-	if g.sem != nil {
-		g.sem <- token{}
-	}
-
-	g.wg.Add(1)
-	go func() {
-		defer g.done()
-
-		if err := f(); err != nil {
-			g.errOnce.Do(func() {
-				g.err = err
-				if g.cancel != nil {
-					g.cancel(g.err)
-				}
-			})
-		}
-	}()
-}
-
-// TryGo calls the given function in a new goroutine only if the number of
-// active goroutines in the group is currently below the configured limit.
-//
-// The return value reports whether the goroutine was started.
-func (g *Group) TryGo(f func() error) bool {
-	if g.sem != nil {
-		select {
-		case g.sem <- token{}:
-			// Note: this allows barging iff channels in general allow barging.
-		default:
-			return false
-		}
-	}
-
-	g.wg.Add(1)
-	go func() {
-		defer g.done()
-
-		if err := f(); err != nil {
-			g.errOnce.Do(func() {
-				g.err = err
-				if g.cancel != nil {
-					g.cancel(g.err)
-				}
-			})
-		}
-	}()
-	return true
-}
-
-// SetLimit limits the number of active goroutines in this group to at most n.
-// A negative value indicates no limit.
-//
-// Any subsequent call to the Go method will block until it can add an active
-// goroutine without exceeding the configured limit.
-//
-// The limit must not be modified while any goroutines in the group are active.
-func (g *Group) SetLimit(n int) {
-	if n < 0 {
-		g.sem = nil
-		return
-	}
-	if len(g.sem) != 0 {
-		panic(fmt.Errorf("errgroup: modify limit while %v goroutines in the group are still active", len(g.sem)))
-	}
-	g.sem = make(chan token, n)
-}
diff --git a/src/cmd/vendor/golang.org/x/sync/errgroup/go120.go b/src/cmd/vendor/golang.org/x/sync/errgroup/go120.go
deleted file mode 100644
index f93c740b638ca5..00000000000000
--- a/src/cmd/vendor/golang.org/x/sync/errgroup/go120.go
+++ /dev/null
@@ -1,13 +0,0 @@
-// Copyright 2023 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-//go:build go1.20
-
-package errgroup
-
-import "context"
-
-func withCancelCause(parent context.Context) (context.Context, func(error)) {
-	return context.WithCancelCause(parent)
-}
diff --git a/src/cmd/vendor/golang.org/x/sync/errgroup/pre_go120.go b/src/cmd/vendor/golang.org/x/sync/errgroup/pre_go120.go
deleted file mode 100644
index 88ce33434e2387..00000000000000
--- a/src/cmd/vendor/golang.org/x/sync/errgroup/pre_go120.go
+++ /dev/null
@@ -1,14 +0,0 @@
-// Copyright 2023 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-//go:build !go1.20
-
-package errgroup
-
-import "context"
-
-func withCancelCause(parent context.Context) (context.Context, func(error)) {
-	ctx, cancel := context.WithCancel(parent)
-	return ctx, func(error) { cancel() }
-}
diff --git a/src/cmd/vendor/golang.org/x/sys/windows/registry/key.go b/src/cmd/vendor/golang.org/x/sys/windows/registry/key.go
new file mode 100644
index 00000000000000..fd8632444ec243
--- /dev/null
+++ b/src/cmd/vendor/golang.org/x/sys/windows/registry/key.go
@@ -0,0 +1,205 @@
+// Copyright 2015 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build windows
+
+// Package registry provides access to the Windows registry.
+//
+// Here is a simple example, opening a registry key and reading a string value from it.
+//
+//	k, err := registry.OpenKey(registry.LOCAL_MACHINE, `SOFTWARE\Microsoft\Windows NT\CurrentVersion`, registry.QUERY_VALUE)
+//	if err != nil {
+//		log.Fatal(err)
+//	}
+//	defer k.Close()
+//
+//	s, _, err := k.GetStringValue("SystemRoot")
+//	if err != nil {
+//		log.Fatal(err)
+//	}
+//	fmt.Printf("Windows system root is %q\n", s)
+package registry
+
+import (
+	"io"
+	"runtime"
+	"syscall"
+	"time"
+)
+
+const (
+	// Registry key security and access rights.
+	// See https://msdn.microsoft.com/en-us/library/windows/desktop/ms724878.aspx
+	// for details.
+	ALL_ACCESS         = 0xf003f
+	CREATE_LINK        = 0x00020
+	CREATE_SUB_KEY     = 0x00004
+	ENUMERATE_SUB_KEYS = 0x00008
+	EXECUTE            = 0x20019
+	NOTIFY             = 0x00010
+	QUERY_VALUE        = 0x00001
+	READ               = 0x20019
+	SET_VALUE          = 0x00002
+	WOW64_32KEY        = 0x00200
+	WOW64_64KEY        = 0x00100
+	WRITE              = 0x20006
+)
+
+// Key is a handle to an open Windows registry key.
+// Keys can be obtained by calling OpenKey; there are
+// also some predefined root keys such as CURRENT_USER.
+// Keys can be used directly in the Windows API.
+type Key syscall.Handle
+
+const (
+	// Windows defines some predefined root keys that are always open.
+	// An application can use these keys as entry points to the registry.
+	// Normally these keys are used in OpenKey to open new keys,
+	// but they can also be used anywhere a Key is required.
+	CLASSES_ROOT     = Key(syscall.HKEY_CLASSES_ROOT)
+	CURRENT_USER     = Key(syscall.HKEY_CURRENT_USER)
+	LOCAL_MACHINE    = Key(syscall.HKEY_LOCAL_MACHINE)
+	USERS            = Key(syscall.HKEY_USERS)
+	CURRENT_CONFIG   = Key(syscall.HKEY_CURRENT_CONFIG)
+	PERFORMANCE_DATA = Key(syscall.HKEY_PERFORMANCE_DATA)
+)
+
+// Close closes open key k.
+func (k Key) Close() error {
+	return syscall.RegCloseKey(syscall.Handle(k))
+}
+
+// OpenKey opens a new key with path name relative to key k.
+// It accepts any open key, including CURRENT_USER and others,
+// and returns the new key and an error.
+// The access parameter specifies desired access rights to the
+// key to be opened.
+func OpenKey(k Key, path string, access uint32) (Key, error) {
+	p, err := syscall.UTF16PtrFromString(path)
+	if err != nil {
+		return 0, err
+	}
+	var subkey syscall.Handle
+	err = syscall.RegOpenKeyEx(syscall.Handle(k), p, 0, access, &subkey)
+	if err != nil {
+		return 0, err
+	}
+	return Key(subkey), nil
+}
+
+// OpenRemoteKey opens a predefined registry key on another
+// computer pcname. The key to be opened is specified by k, but
+// can only be one of LOCAL_MACHINE, PERFORMANCE_DATA or USERS.
+// If pcname is "", OpenRemoteKey returns local computer key.
+func OpenRemoteKey(pcname string, k Key) (Key, error) {
+	var err error
+	var p *uint16
+	if pcname != "" {
+		p, err = syscall.UTF16PtrFromString(`\\` + pcname)
+		if err != nil {
+			return 0, err
+		}
+	}
+	var remoteKey syscall.Handle
+	err = regConnectRegistry(p, syscall.Handle(k), &remoteKey)
+	if err != nil {
+		return 0, err
+	}
+	return Key(remoteKey), nil
+}
+
+// ReadSubKeyNames returns the names of subkeys of key k.
+// The parameter n controls the number of returned names,
+// analogous to the way os.File.Readdirnames works.
+func (k Key) ReadSubKeyNames(n int) ([]string, error) {
+	// RegEnumKeyEx must be called repeatedly and to completion.
+	// During this time, this goroutine cannot migrate away from
+	// its current thread. See https://golang.org/issue/49320 and
+	// https://golang.org/issue/49466.
+	runtime.LockOSThread()
+	defer runtime.UnlockOSThread()
+
+	names := make([]string, 0)
+	// Registry key size limit is 255 bytes and described there:
+	// https://msdn.microsoft.com/library/windows/desktop/ms724872.aspx
+	buf := make([]uint16, 256) //plus extra room for terminating zero byte
+loopItems:
+	for i := uint32(0); ; i++ {
+		if n > 0 {
+			if len(names) == n {
+				return names, nil
+			}
+		}
+		l := uint32(len(buf))
+		for {
+			err := syscall.RegEnumKeyEx(syscall.Handle(k), i, &buf[0], &l, nil, nil, nil, nil)
+			if err == nil {
+				break
+			}
+			if err == syscall.ERROR_MORE_DATA {
+				// Double buffer size and try again.
+				l = uint32(2 * len(buf))
+				buf = make([]uint16, l)
+				continue
+			}
+			if err == _ERROR_NO_MORE_ITEMS {
+				break loopItems
+			}
+			return names, err
+		}
+		names = append(names, syscall.UTF16ToString(buf[:l]))
+	}
+	if n > len(names) {
+		return names, io.EOF
+	}
+	return names, nil
+}
+
+// CreateKey creates a key named path under open key k.
+// CreateKey returns the new key and a boolean flag that reports
+// whether the key already existed.
+// The access parameter specifies the access rights for the key
+// to be created.
+func CreateKey(k Key, path string, access uint32) (newk Key, openedExisting bool, err error) {
+	var h syscall.Handle
+	var d uint32
+	err = regCreateKeyEx(syscall.Handle(k), syscall.StringToUTF16Ptr(path),
+		0, nil, _REG_OPTION_NON_VOLATILE, access, nil, &h, &d)
+	if err != nil {
+		return 0, false, err
+	}
+	return Key(h), d == _REG_OPENED_EXISTING_KEY, nil
+}
+
+// DeleteKey deletes the subkey path of key k and its values.
+func DeleteKey(k Key, path string) error {
+	return regDeleteKey(syscall.Handle(k), syscall.StringToUTF16Ptr(path))
+}
+
+// A KeyInfo describes the statistics of a key. It is returned by Stat.
+type KeyInfo struct {
+	SubKeyCount     uint32
+	MaxSubKeyLen    uint32 // size of the key's subkey with the longest name, in Unicode characters, not including the terminating zero byte
+	ValueCount      uint32
+	MaxValueNameLen uint32 // size of the key's longest value name, in Unicode characters, not including the terminating zero byte
+	MaxValueLen     uint32 // longest data component among the key's values, in bytes
+	lastWriteTime   syscall.Filetime
+}
+
+// ModTime returns the key's last write time.
+func (ki *KeyInfo) ModTime() time.Time {
+	return time.Unix(0, ki.lastWriteTime.Nanoseconds())
+}
+
+// Stat retrieves information about the open key k.
+func (k Key) Stat() (*KeyInfo, error) {
+	var ki KeyInfo
+	err := syscall.RegQueryInfoKey(syscall.Handle(k), nil, nil, nil,
+		&ki.SubKeyCount, &ki.MaxSubKeyLen, nil, &ki.ValueCount,
+		&ki.MaxValueNameLen, &ki.MaxValueLen, nil, &ki.lastWriteTime)
+	if err != nil {
+		return nil, err
+	}
+	return &ki, nil
+}
diff --git a/src/cmd/vendor/golang.org/x/sys/windows/registry/mksyscall.go b/src/cmd/vendor/golang.org/x/sys/windows/registry/mksyscall.go
new file mode 100644
index 00000000000000..bbf86ccf0c05f7
--- /dev/null
+++ b/src/cmd/vendor/golang.org/x/sys/windows/registry/mksyscall.go
@@ -0,0 +1,9 @@
+// Copyright 2015 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build generate
+
+package registry
+
+//go:generate go run golang.org/x/sys/windows/mkwinsyscall -output zsyscall_windows.go syscall.go
diff --git a/src/cmd/vendor/golang.org/x/sys/windows/registry/syscall.go b/src/cmd/vendor/golang.org/x/sys/windows/registry/syscall.go
new file mode 100644
index 00000000000000..f533091c19ef16
--- /dev/null
+++ b/src/cmd/vendor/golang.org/x/sys/windows/registry/syscall.go
@@ -0,0 +1,32 @@
+// Copyright 2015 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build windows
+
+package registry
+
+import "syscall"
+
+const (
+	_REG_OPTION_NON_VOLATILE = 0
+
+	_REG_CREATED_NEW_KEY     = 1
+	_REG_OPENED_EXISTING_KEY = 2
+
+	_ERROR_NO_MORE_ITEMS syscall.Errno = 259
+)
+
+func LoadRegLoadMUIString() error {
+	return procRegLoadMUIStringW.Find()
+}
+
+//sys	regCreateKeyEx(key syscall.Handle, subkey *uint16, reserved uint32, class *uint16, options uint32, desired uint32, sa *syscall.SecurityAttributes, result *syscall.Handle, disposition *uint32) (regerrno error) = advapi32.RegCreateKeyExW
+//sys	regDeleteKey(key syscall.Handle, subkey *uint16) (regerrno error) = advapi32.RegDeleteKeyW
+//sys	regSetValueEx(key syscall.Handle, valueName *uint16, reserved uint32, vtype uint32, buf *byte, bufsize uint32) (regerrno error) = advapi32.RegSetValueExW
+//sys	regEnumValue(key syscall.Handle, index uint32, name *uint16, nameLen *uint32, reserved *uint32, valtype *uint32, buf *byte, buflen *uint32) (regerrno error) = advapi32.RegEnumValueW
+//sys	regDeleteValue(key syscall.Handle, name *uint16) (regerrno error) = advapi32.RegDeleteValueW
+//sys   regLoadMUIString(key syscall.Handle, name *uint16, buf *uint16, buflen uint32, buflenCopied *uint32, flags uint32, dir *uint16) (regerrno error) = advapi32.RegLoadMUIStringW
+//sys	regConnectRegistry(machinename *uint16, key syscall.Handle, result *syscall.Handle) (regerrno error) = advapi32.RegConnectRegistryW
+
+//sys	expandEnvironmentStrings(src *uint16, dst *uint16, size uint32) (n uint32, err error) = kernel32.ExpandEnvironmentStringsW
diff --git a/src/cmd/vendor/golang.org/x/sys/windows/registry/value.go b/src/cmd/vendor/golang.org/x/sys/windows/registry/value.go
new file mode 100644
index 00000000000000..74db26b94dfaab
--- /dev/null
+++ b/src/cmd/vendor/golang.org/x/sys/windows/registry/value.go
@@ -0,0 +1,386 @@
+// Copyright 2015 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+//go:build windows
+
+package registry
+
+import (
+	"errors"
+	"io"
+	"syscall"
+	"unicode/utf16"
+	"unsafe"
+)
+
+const (
+	// Registry value types.
+	NONE                       = 0
+	SZ                         = 1
+	EXPAND_SZ                  = 2
+	BINARY                     = 3
+	DWORD                      = 4
+	DWORD_BIG_ENDIAN           = 5
+	LINK                       = 6
+	MULTI_SZ                   = 7
+	RESOURCE_LIST              = 8
+	FULL_RESOURCE_DESCRIPTOR   = 9
+	RESOURCE_REQUIREMENTS_LIST = 10
+	QWORD                      = 11
+)
+
+var (
+	// ErrShortBuffer is returned when the buffer was too short for the operation.
+	ErrShortBuffer = syscall.ERROR_MORE_DATA
+
+	// ErrNotExist is returned when a registry key or value does not exist.
+	ErrNotExist = syscall.ERROR_FILE_NOT_FOUND
+
+	// ErrUnexpectedType is returned by Get*Value when the value's type was unexpected.
+	ErrUnexpectedType = errors.New("unexpected key value type")
+)
+
+// GetValue retrieves the type and data for the specified value associated
+// with an open key k. It fills up buffer buf and returns the retrieved
+// byte count n. If buf is too small to fit the stored value it returns
+// ErrShortBuffer error along with the required buffer size n.
+// If no buffer is provided, it returns true and actual buffer size n.
+// If no buffer is provided, GetValue returns the value's type only.
+// If the value does not exist, the error returned is ErrNotExist.
+//
+// GetValue is a low level function. If value's type is known, use the appropriate
+// Get*Value function instead.
+func (k Key) GetValue(name string, buf []byte) (n int, valtype uint32, err error) {
+	pname, err := syscall.UTF16PtrFromString(name)
+	if err != nil {
+		return 0, 0, err
+	}
+	var pbuf *byte
+	if len(buf) > 0 {
+		pbuf = (*byte)(unsafe.Pointer(&buf[0]))
+	}
+	l := uint32(len(buf))
+	err = syscall.RegQueryValueEx(syscall.Handle(k), pname, nil, &valtype, pbuf, &l)
+	if err != nil {
+		return int(l), valtype, err
+	}
+	return int(l), valtype, nil
+}
+
+func (k Key) getValue(name string, buf []byte) (data []byte, valtype uint32, err error) {
+	p, err := syscall.UTF16PtrFromString(name)
+	if err != nil {
+		return nil, 0, err
+	}
+	var t uint32
+	n := uint32(len(buf))
+	for {
+		err = syscall.RegQueryValueEx(syscall.Handle(k), p, nil, &t, (*byte)(unsafe.Pointer(&buf[0])), &n)
+		if err == nil {
+			return buf[:n], t, nil
+		}
+		if err != syscall.ERROR_MORE_DATA {
+			return nil, 0, err
+		}
+		if n <= uint32(len(buf)) {
+			return nil, 0, err
+		}
+		buf = make([]byte, n)
+	}
+}
+
+// GetStringValue retrieves the string value for the specified
+// value name associated with an open key k. It also returns the value's type.
+// If value does not exist, GetStringValue returns ErrNotExist.
+// If value is not SZ or EXPAND_SZ, it will return the correct value
+// type and ErrUnexpectedType.
+func (k Key) GetStringValue(name string) (val string, valtype uint32, err error) {
+	data, typ, err2 := k.getValue(name, make([]byte, 64))
+	if err2 != nil {
+		return "", typ, err2
+	}
+	switch typ {
+	case SZ, EXPAND_SZ:
+	default:
+		return "", typ, ErrUnexpectedType
+	}
+	if len(data) == 0 {
+		return "", typ, nil
+	}
+	u := (*[1 << 29]uint16)(unsafe.Pointer(&data[0]))[: len(data)/2 : len(data)/2]
+	return syscall.UTF16ToString(u), typ, nil
+}
+
+// GetMUIStringValue retrieves the localized string value for
+// the specified value name associated with an open key k.
+// If the value name doesn't exist or the localized string value
+// can't be resolved, GetMUIStringValue returns ErrNotExist.
+// GetMUIStringValue panics if the system doesn't support
+// regLoadMUIString; use LoadRegLoadMUIString to check if
+// regLoadMUIString is supported before calling this function.
+func (k Key) GetMUIStringValue(name string) (string, error) {
+	pname, err := syscall.UTF16PtrFromString(name)
+	if err != nil {
+		return "", err
+	}
+
+	buf := make([]uint16, 1024)
+	var buflen uint32
+	var pdir *uint16
+
+	err = regLoadMUIString(syscall.Handle(k), pname, &buf[0], uint32(len(buf)), &buflen, 0, pdir)
+	if err == syscall.ERROR_FILE_NOT_FOUND { // Try fallback path
+
+		// Try to resolve the string value using the system directory as
+		// a DLL search path; this assumes the string value is of the form
+		// @[path]\dllname,-strID but with no path given, e.g. @tzres.dll,-320.
+
+		// This approach works with tzres.dll but may have to be revised
+		// in the future to allow callers to provide custom search paths.
+
+		var s string
+		s, err = ExpandString("%SystemRoot%\\system32\\")
+		if err != nil {
+			return "", err
+		}
+		pdir, err = syscall.UTF16PtrFromString(s)
+		if err != nil {
+			return "", err
+		}
+
+		err = regLoadMUIString(syscall.Handle(k), pname, &buf[0], uint32(len(buf)), &buflen, 0, pdir)
+	}
+
+	for err == syscall.ERROR_MORE_DATA { // Grow buffer if needed
+		if buflen <= uint32(len(buf)) {
+			break // Buffer not growing, assume race; break
+		}
+		buf = make([]uint16, buflen)
+		err = regLoadMUIString(syscall.Handle(k), pname, &buf[0], uint32(len(buf)), &buflen, 0, pdir)
+	}
+
+	if err != nil {
+		return "", err
+	}
+
+	return syscall.UTF16ToString(buf), nil
+}
+
+// ExpandString expands environment-variable strings and replaces
+// them with the values defined for the current user.
+// Use ExpandString to expand EXPAND_SZ strings.
+func ExpandString(value string) (string, error) {
+	if value == "" {
+		return "", nil
+	}
+	p, err := syscall.UTF16PtrFromString(value)
+	if err != nil {
+		return "", err
+	}
+	r := make([]uint16, 100)
+	for {
+		n, err := expandEnvironmentStrings(p, &r[0], uint32(len(r)))
+		if err != nil {
+			return "", err
+		}
+		if n <= uint32(len(r)) {
+			return syscall.UTF16ToString(r[:n]), nil
+		}
+		r = make([]uint16, n)
+	}
+}
+
+// GetStringsValue retrieves the []string value for the specified
+// value name associated with an open key k. It also returns the value's type.
+// If value does not exist, GetStringsValue returns ErrNotExist.
+// If value is not MULTI_SZ, it will return the correct value
+// type and ErrUnexpectedType.
+func (k Key) GetStringsValue(name string) (val []string, valtype uint32, err error) {
+	data, typ, err2 := k.getValue(name, make([]byte, 64))
+	if err2 != nil {
+		return nil, typ, err2
+	}
+	if typ != MULTI_SZ {
+		return nil, typ, ErrUnexpectedType
+	}
+	if len(data) == 0 {
+		return nil, typ, nil
+	}
+	p := (*[1 << 29]uint16)(unsafe.Pointer(&data[0]))[: len(data)/2 : len(data)/2]
+	if len(p) == 0 {
+		return nil, typ, nil
+	}
+	if p[len(p)-1] == 0 {
+		p = p[:len(p)-1] // remove terminating null
+	}
+	val = make([]string, 0, 5)
+	from := 0
+	for i, c := range p {
+		if c == 0 {
+			val = append(val, string(utf16.Decode(p[from:i])))
+			from = i + 1
+		}
+	}
+	return val, typ, nil
+}
+
+// GetIntegerValue retrieves the integer value for the specified
+// value name associated with an open key k. It also returns the value's type.
+// If value does not exist, GetIntegerValue returns ErrNotExist.
+// If value is not DWORD or QWORD, it will return the correct value
+// type and ErrUnexpectedType.
+func (k Key) GetIntegerValue(name string) (val uint64, valtype uint32, err error) {
+	data, typ, err2 := k.getValue(name, make([]byte, 8))
+	if err2 != nil {
+		return 0, typ, err2
+	}
+	switch typ {
+	case DWORD:
+		if len(data) != 4 {
+			return 0, typ, errors.New("DWORD value is not 4 bytes long")
+		}
+		var val32 uint32
+		copy((*[4]byte)(unsafe.Pointer(&val32))[:], data)
+		return uint64(val32), DWORD, nil
+	case QWORD:
+		if len(data) != 8 {
+			return 0, typ, errors.New("QWORD value is not 8 bytes long")
+		}
+		copy((*[8]byte)(unsafe.Pointer(&val))[:], data)
+		return val, QWORD, nil
+	default:
+		return 0, typ, ErrUnexpectedType
+	}
+}
+
+// GetBinaryValue retrieves the binary value for the specified
+// value name associated with an open key k. It also returns the value's type.
+// If value does not exist, GetBinaryValue returns ErrNotExist.
+// If value is not BINARY, it will return the correct value
+// type and ErrUnexpectedType.
+func (k Key) GetBinaryValue(name string) (val []byte, valtype uint32, err error) {
+	data, typ, err2 := k.getValue(name, make([]byte, 64))
+	if err2 != nil {
+		return nil, typ, err2
+	}
+	if typ != BINARY {
+		return nil, typ, ErrUnexpectedType
+	}
+	return data, typ, nil
+}
+
+func (k Key) setValue(name string, valtype uint32, data []byte) error {
+	p, err := syscall.UTF16PtrFromString(name)
+	if err != nil {
+		return err
+	}
+	if len(data) == 0 {
+		return regSetValueEx(syscall.Handle(k), p, 0, valtype, nil, 0)
+	}
+	return regSetValueEx(syscall.Handle(k), p, 0, valtype, &data[0], uint32(len(data)))
+}
+
+// SetDWordValue sets the data and type of a name value
+// under key k to value and DWORD.
+func (k Key) SetDWordValue(name string, value uint32) error {
+	return k.setValue(name, DWORD, (*[4]byte)(unsafe.Pointer(&value))[:])
+}
+
+// SetQWordValue sets the data and type of a name value
+// under key k to value and QWORD.
+func (k Key) SetQWordValue(name string, value uint64) error {
+	return k.setValue(name, QWORD, (*[8]byte)(unsafe.Pointer(&value))[:])
+}
+
+func (k Key) setStringValue(name string, valtype uint32, value string) error {
+	v, err := syscall.UTF16FromString(value)
+	if err != nil {
+		return err
+	}
+	buf := (*[1 << 29]byte)(unsafe.Pointer(&v[0]))[: len(v)*2 : len(v)*2]
+	return k.setValue(name, valtype, buf)
+}
+
+// SetStringValue sets the data and type of a name value
+// under key k to value and SZ. The value must not contain a zero byte.
+func (k Key) SetStringValue(name, value string) error {
+	return k.setStringValue(name, SZ, value)
+}
+
+// SetExpandStringValue sets the data and type of a name value
+// under key k to value and EXPAND_SZ. The value must not contain a zero byte.
+func (k Key) SetExpandStringValue(name, value string) error {
+	return k.setStringValue(name, EXPAND_SZ, value)
+}
+
+// SetStringsValue sets the data and type of a name value
+// under key k to value and MULTI_SZ. The value strings
+// must not contain a zero byte.
+func (k Key) SetStringsValue(name string, value []string) error {
+	ss := ""
+	for _, s := range value {
+		for i := 0; i < len(s); i++ {
+			if s[i] == 0 {
+				return errors.New("string cannot have 0 inside")
+			}
+		}
+		ss += s + "\x00"
+	}
+	v := utf16.Encode([]rune(ss + "\x00"))
+	buf := (*[1 << 29]byte)(unsafe.Pointer(&v[0]))[: len(v)*2 : len(v)*2]
+	return k.setValue(name, MULTI_SZ, buf)
+}
+
+// SetBinaryValue sets the data and type of a name value
+// under key k to value and BINARY.
+func (k Key) SetBinaryValue(name string, value []byte) error {
+	return k.setValue(name, BINARY, value)
+}
+
+// DeleteValue removes a named value from the key k.
+func (k Key) DeleteValue(name string) error {
+	return regDeleteValue(syscall.Handle(k), syscall.StringToUTF16Ptr(name))
+}
+
+// ReadValueNames returns the value names of key k.
+// The parameter n controls the number of returned names,
+// analogous to the way os.File.Readdirnames works.
+func (k Key) ReadValueNames(n int) ([]string, error) {
+	ki, err := k.Stat()
+	if err != nil {
+		return nil, err
+	}
+	names := make([]string, 0, ki.ValueCount)
+	buf := make([]uint16, ki.MaxValueNameLen+1) // extra room for terminating null character
+loopItems:
+	for i := uint32(0); ; i++ {
+		if n > 0 {
+			if len(names) == n {
+				return names, nil
+			}
+		}
+		l := uint32(len(buf))
+		for {
+			err := regEnumValue(syscall.Handle(k), i, &buf[0], &l, nil, nil, nil, nil)
+			if err == nil {
+				break
+			}
+			if err == syscall.ERROR_MORE_DATA {
+				// Double buffer size and try again.
+				l = uint32(2 * len(buf))
+				buf = make([]uint16, l)
+				continue
+			}
+			if err == _ERROR_NO_MORE_ITEMS {
+				break loopItems
+			}
+			return names, err
+		}
+		names = append(names, syscall.UTF16ToString(buf[:l]))
+	}
+	if n > len(names) {
+		return names, io.EOF
+	}
+	return names, nil
+}
diff --git a/src/cmd/vendor/golang.org/x/sys/windows/registry/zsyscall_windows.go b/src/cmd/vendor/golang.org/x/sys/windows/registry/zsyscall_windows.go
new file mode 100644
index 00000000000000..fc1835d8a233aa
--- /dev/null
+++ b/src/cmd/vendor/golang.org/x/sys/windows/registry/zsyscall_windows.go
@@ -0,0 +1,117 @@
+// Code generated by 'go generate'; DO NOT EDIT.
+
+package registry
+
+import (
+	"syscall"
+	"unsafe"
+
+	"golang.org/x/sys/windows"
+)
+
+var _ unsafe.Pointer
+
+// Do the interface allocations only once for common
+// Errno values.
+const (
+	errnoERROR_IO_PENDING = 997
+)
+
+var (
+	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
+	errERROR_EINVAL     error = syscall.EINVAL
+)
+
+// errnoErr returns common boxed Errno values, to prevent
+// allocations at runtime.
+func errnoErr(e syscall.Errno) error {
+	switch e {
+	case 0:
+		return errERROR_EINVAL
+	case errnoERROR_IO_PENDING:
+		return errERROR_IO_PENDING
+	}
+	// TODO: add more here, after collecting data on the common
+	// error values see on Windows. (perhaps when running
+	// all.bat?)
+	return e
+}
+
+var (
+	modadvapi32 = windows.NewLazySystemDLL("advapi32.dll")
+	modkernel32 = windows.NewLazySystemDLL("kernel32.dll")
+
+	procRegConnectRegistryW       = modadvapi32.NewProc("RegConnectRegistryW")
+	procRegCreateKeyExW           = modadvapi32.NewProc("RegCreateKeyExW")
+	procRegDeleteKeyW             = modadvapi32.NewProc("RegDeleteKeyW")
+	procRegDeleteValueW           = modadvapi32.NewProc("RegDeleteValueW")
+	procRegEnumValueW             = modadvapi32.NewProc("RegEnumValueW")
+	procRegLoadMUIStringW         = modadvapi32.NewProc("RegLoadMUIStringW")
+	procRegSetValueExW            = modadvapi32.NewProc("RegSetValueExW")
+	procExpandEnvironmentStringsW = modkernel32.NewProc("ExpandEnvironmentStringsW")
+)
+
+func regConnectRegistry(machinename *uint16, key syscall.Handle, result *syscall.Handle) (regerrno error) {
+	r0, _, _ := syscall.Syscall(procRegConnectRegistryW.Addr(), 3, uintptr(unsafe.Pointer(machinename)), uintptr(key), uintptr(unsafe.Pointer(result)))
+	if r0 != 0 {
+		regerrno = syscall.Errno(r0)
+	}
+	return
+}
+
+func regCreateKeyEx(key syscall.Handle, subkey *uint16, reserved uint32, class *uint16, options uint32, desired uint32, sa *syscall.SecurityAttributes, result *syscall.Handle, disposition *uint32) (regerrno error) {
+	r0, _, _ := syscall.Syscall9(procRegCreateKeyExW.Addr(), 9, uintptr(key), uintptr(unsafe.Pointer(subkey)), uintptr(reserved), uintptr(unsafe.Pointer(class)), uintptr(options), uintptr(desired), uintptr(unsafe.Pointer(sa)), uintptr(unsafe.Pointer(result)), uintptr(unsafe.Pointer(disposition)))
+	if r0 != 0 {
+		regerrno = syscall.Errno(r0)
+	}
+	return
+}
+
+func regDeleteKey(key syscall.Handle, subkey *uint16) (regerrno error) {
+	r0, _, _ := syscall.Syscall(procRegDeleteKeyW.Addr(), 2, uintptr(key), uintptr(unsafe.Pointer(subkey)), 0)
+	if r0 != 0 {
+		regerrno = syscall.Errno(r0)
+	}
+	return
+}
+
+func regDeleteValue(key syscall.Handle, name *uint16) (regerrno error) {
+	r0, _, _ := syscall.Syscall(procRegDeleteValueW.Addr(), 2, uintptr(key), uintptr(unsafe.Pointer(name)), 0)
+	if r0 != 0 {
+		regerrno = syscall.Errno(r0)
+	}
+	return
+}
+
+func regEnumValue(key syscall.Handle, index uint32, name *uint16, nameLen *uint32, reserved *uint32, valtype *uint32, buf *byte, buflen *uint32) (regerrno error) {
+	r0, _, _ := syscall.Syscall9(procRegEnumValueW.Addr(), 8, uintptr(key), uintptr(index), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(nameLen)), uintptr(unsafe.Pointer(reserved)), uintptr(unsafe.Pointer(valtype)), uintptr(unsafe.Pointer(buf)), uintptr(unsafe.Pointer(buflen)), 0)
+	if r0 != 0 {
+		regerrno = syscall.Errno(r0)
+	}
+	return
+}
+
+func regLoadMUIString(key syscall.Handle, name *uint16, buf *uint16, buflen uint32, buflenCopied *uint32, flags uint32, dir *uint16) (regerrno error) {
+	r0, _, _ := syscall.Syscall9(procRegLoadMUIStringW.Addr(), 7, uintptr(key), uintptr(unsafe.Pointer(name)), uintptr(unsafe.Pointer(buf)), uintptr(buflen), uintptr(unsafe.Pointer(buflenCopied)), uintptr(flags), uintptr(unsafe.Pointer(dir)), 0, 0)
+	if r0 != 0 {
+		regerrno = syscall.Errno(r0)
+	}
+	return
+}
+
+func regSetValueEx(key syscall.Handle, valueName *uint16, reserved uint32, vtype uint32, buf *byte, bufsize uint32) (regerrno error) {
+	r0, _, _ := syscall.Syscall6(procRegSetValueExW.Addr(), 6, uintptr(key), uintptr(unsafe.Pointer(valueName)), uintptr(reserved), uintptr(vtype), uintptr(unsafe.Pointer(buf)), uintptr(bufsize))
+	if r0 != 0 {
+		regerrno = syscall.Errno(r0)
+	}
+	return
+}
+
+func expandEnvironmentStrings(src *uint16, dst *uint16, size uint32) (n uint32, err error) {
+	r0, _, e1 := syscall.Syscall(procExpandEnvironmentStringsW.Addr(), 3, uintptr(unsafe.Pointer(src)), uintptr(unsafe.Pointer(dst)), uintptr(size))
+	n = uint32(r0)
+	if n == 0 {
+		err = errnoErr(e1)
+	}
+	return
+}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/.dockerignore b/src/cmd/vendor/golang.org/x/telemetry/.dockerignore
deleted file mode 100644
index 416ae44a0dbe8e..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/.dockerignore
+++ /dev/null
@@ -1,17 +0,0 @@
-.git
-.localstorage
-node_modules
-devtools
-.eslint*
-.gitignore
-.prettier*
-.stylelint*
-CONTRIBUTING.md
-LICENSE
-npm
-npx
-package-lock.json
-package.json
-PATENTS
-README.md
-tsconfig.json
\ No newline at end of file
diff --git a/src/cmd/vendor/golang.org/x/telemetry/.eslintrc.json b/src/cmd/vendor/golang.org/x/telemetry/.eslintrc.json
deleted file mode 100644
index ba5e242bb96f33..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/.eslintrc.json
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-  "extends": [
-    "eslint:recommended",
-    "plugin:@typescript-eslint/recommended",
-    "prettier"
-  ],
-  "parser": "@typescript-eslint/parser",
-  "plugins": ["@typescript-eslint"],
-  "root": true,
-  "ignorePatterns": ["*.min.js"]
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/.gitattributes b/src/cmd/vendor/golang.org/x/telemetry/.gitattributes
deleted file mode 100644
index f529a1140b4b45..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/.gitattributes
+++ /dev/null
@@ -1,14 +0,0 @@
-# Treat all files in the repo as binary, with no git magic updating
-# line endings. This produces predictable results in different environments.
-#
-# Windows users contributing to Go will need to use a modern version
-# of git and editors capable of LF line endings.
-#
-# Windows .bat files are known to have multiple bugs when run with LF
-# endings. So if they are checked in with CRLF endings, there should
-# be a test like the one in test/winbatch.go in the go repository.
-# (See golang.org/issue/37791.)
-#
-# See golang.org/issue/9281.
-
-* -text
diff --git a/src/cmd/vendor/golang.org/x/telemetry/.gitignore b/src/cmd/vendor/golang.org/x/telemetry/.gitignore
deleted file mode 100644
index 46770c48fa86e0..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/.gitignore
+++ /dev/null
@@ -1,2 +0,0 @@
-node_modules
-.localstorage
\ No newline at end of file
diff --git a/src/cmd/vendor/golang.org/x/telemetry/.prettierrc.json b/src/cmd/vendor/golang.org/x/telemetry/.prettierrc.json
deleted file mode 100644
index 91c0b9444cb995..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/.prettierrc.json
+++ /dev/null
@@ -1 +0,0 @@
-{"proseWrap": "always"}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/.stylelintrc.json b/src/cmd/vendor/golang.org/x/telemetry/.stylelintrc.json
deleted file mode 100644
index adccf47b3937e8..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/.stylelintrc.json
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-  "extends": ["stylelint-config-standard"],
-  "rules": {
-    "declaration-property-value-allowed-list": {
-      "/color/": ["/^var\\(--/", "transparent"]
-    },
-    "unit-disallowed-list": ["px"],
-    "selector-class-pattern": "^[a-zA-Z\\-]+$"
-  },
-  "ignoreFiles": ["**/*.min.css"]
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/CONTRIBUTING.md b/src/cmd/vendor/golang.org/x/telemetry/CONTRIBUTING.md
deleted file mode 100644
index e913373f3d5dfd..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/CONTRIBUTING.md
+++ /dev/null
@@ -1,30 +0,0 @@
-# Contributing to Go
-
-Go is an open source project.
-
-It is the work of hundreds of contributors. We appreciate your help!
-
-## Filing issues
-
-When [filing an issue](https://golang.org/issue/new), make sure to answer these
-five questions:
-
-1.  What version of Go are you using (`go version`)?
-2.  What operating system and processor architecture are you using?
-3.  What did you do?
-4.  What did you expect to see?
-5.  What did you see instead?
-
-General questions should go to the
-[golang-nuts mailing list](https://groups.google.com/group/golang-nuts) instead
-of the issue tracker. The gophers there will answer or ask you to file an issue
-if you've tripped over a bug.
-
-## Contributing code
-
-Please read the
-[Contribution Guidelines](https://golang.org/doc/contribute.html) before sending
-patches.
-
-Unless otherwise noted, the Go source files are distributed under the BSD-style
-license found in the LICENSE file.
diff --git a/src/cmd/vendor/golang.org/x/telemetry/README.md b/src/cmd/vendor/golang.org/x/telemetry/README.md
deleted file mode 100644
index 81a15749c5b66b..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/README.md
+++ /dev/null
@@ -1,62 +0,0 @@
-# Go Telemetry
-
-This repository holds the Go Telemetry server code and libraries, used for
-hosting [telemetry.go.dev](https://telemetry.go.dev) and instrumenting Go
-toolchain programs with opt-in telemetry.
-
-**Warning**: this repository is intended for use only in tools maintained by
-the Go team, including tools in the Go distribution and auxiliary tools like
-[gopls](https://pkg.go.dev/golang.org/x/tools/gopls) or
-[govulncheck](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck). There are
-no compatibility guarantees for any of the packages here: public APIs will
-change in breaking ways as the telemetry integration is refined.
-
-## Notable Packages
-
-- The [x/telemetry/counter](https://pkg.go.dev/golang.org/x/telemetry/counter)
-  package provides a library for instrumenting programs with counters and stack
-  reports.
-- The [x/telemetry/upload](https://pkg.go.dev/golang.org/x/telemetry/upload)
-  package provides a hook for Go toolchain programs to upload telemetry data,
-  if the user has opted in to telemetry uploading.
-- The [x/telemetry/cmd/gotelemetry](https://pkg.go.dev/pkg/golang.org/x/telemetry/cmd/gotelemetry)
-  command is used for managing telemetry data and configuration.
-- The [x/telemetry/config](https://pkg.go.dev/pkg/golang.org/x/telemetry/config)
-  package defines the subset of telemetry data that has been approved for
-  uploading by the telemetry proposal process.
-- The [x/telemetry/godev](https://pkg.go.dev/pkg/golang.org/x/telemetry/godev) directory defines
-  the services running at [telemetry.go.dev](https://telemetry.go.dev).
-
-## Contributing
-
-This repository uses Gerrit for code changes. To learn how to submit changes to
-this repository, see https://go.dev/doc/contribute.
-
-The git repository is https://go.googlesource.com/telemetry.
-
-The main issue tracker for the telemetry repository is located at
-https://go.dev/issues. Prefix your issue with "x/telemetry:" in
-the subject line, so it is easy to find.
-
-### Linting & Formatting
-
-This repository uses [eslint](https://eslint.org/) to format TS files,
-[stylelint](https://stylelint.io/) to format CSS files, and
-[prettier](https://prettier.io/) to format TS, CSS, Markdown, and YAML files.
-
-See the style guides:
-
-- [TypeScript](https://google.github.io/styleguide/tsguide.html)
-- [CSS](https://go.dev/wiki/CSSStyleGuide)
-
-It is encouraged that all TS and CSS code be run through formatters before
-submitting a change. However, it is not a strict requirement enforced by CI.
-
-### Installing npm Dependencies:
-
-1. Install [docker](https://docs.docker.com/get-docker/)
-2. Run `./npm install`
-
-### Run ESLint, Stylelint, & Prettier
-
-    ./npm run all
diff --git a/src/cmd/vendor/golang.org/x/telemetry/dir.go b/src/cmd/vendor/golang.org/x/telemetry/dir.go
deleted file mode 100644
index 5931669e724bb9..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/dir.go
+++ /dev/null
@@ -1,12 +0,0 @@
-// Copyright 2024 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package telemetry
-
-import "golang.org/x/telemetry/internal/telemetry"
-
-// Dir returns the telemetry directory.
-func Dir() string {
-	return telemetry.Default.Dir()
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/doc.go b/src/cmd/vendor/golang.org/x/telemetry/doc.go
deleted file mode 100644
index 073f40d23f2bb4..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/doc.go
+++ /dev/null
@@ -1 +0,0 @@
-package telemetry
diff --git a/src/cmd/vendor/golang.org/x/telemetry/internal/config/config.go b/src/cmd/vendor/golang.org/x/telemetry/internal/config/config.go
deleted file mode 100644
index 533a889c476407..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/internal/config/config.go
+++ /dev/null
@@ -1,140 +0,0 @@
-// Copyright 2023 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-// package config provides methods for loading and querying a
-// telemetry upload config file.
-package config
-
-import (
-	"encoding/json"
-	"os"
-	"strings"
-
-	"golang.org/x/telemetry/internal/telemetry"
-)
-
-// Config is a wrapper around telemetry.UploadConfig that provides some
-// convenience methods for checking the contents of a report.
-type Config struct {
-	*telemetry.UploadConfig
-	program         map[string]bool
-	goos            map[string]bool
-	goarch          map[string]bool
-	goversion       map[string]bool
-	pgversion       map[pgkey]bool
-	pgcounter       map[pgkey]bool
-	pgcounterprefix map[pgkey]bool
-	pgstack         map[pgkey]bool
-	rate            map[pgkey]float64
-}
-
-type pgkey struct {
-	program, key string
-}
-
-func ReadConfig(file string) (*Config, error) {
-	data, err := os.ReadFile(file)
-	if err != nil {
-		return nil, err
-	}
-	var cfg telemetry.UploadConfig
-	if err := json.Unmarshal(data, &cfg); err != nil {
-		return nil, err
-	}
-	return NewConfig(&cfg), nil
-}
-
-func NewConfig(cfg *telemetry.UploadConfig) *Config {
-	ucfg := Config{UploadConfig: cfg}
-	ucfg.goos = set(ucfg.GOOS)
-	ucfg.goarch = set(ucfg.GOARCH)
-	ucfg.goversion = set(ucfg.GoVersion)
-	ucfg.program = make(map[string]bool, len(ucfg.Programs))
-	ucfg.pgversion = make(map[pgkey]bool, len(ucfg.Programs))
-	ucfg.pgcounter = make(map[pgkey]bool, len(ucfg.Programs))
-	ucfg.pgcounterprefix = make(map[pgkey]bool, len(ucfg.Programs))
-	ucfg.pgstack = make(map[pgkey]bool, len(ucfg.Programs))
-	ucfg.rate = make(map[pgkey]float64)
-	for _, p := range ucfg.Programs {
-		ucfg.program[p.Name] = true
-		for _, v := range p.Versions {
-			ucfg.pgversion[pgkey{p.Name, v}] = true
-		}
-		for _, c := range p.Counters {
-			for _, e := range Expand(c.Name) {
-				ucfg.pgcounter[pgkey{p.Name, e}] = true
-				ucfg.rate[pgkey{p.Name, e}] = c.Rate
-			}
-			prefix, _, found := strings.Cut(c.Name, ":")
-			if found {
-				ucfg.pgcounterprefix[pgkey{p.Name, prefix}] = true
-			}
-		}
-		for _, s := range p.Stacks {
-			ucfg.pgstack[pgkey{p.Name, s.Name}] = true
-			ucfg.rate[pgkey{p.Name, s.Name}] = s.Rate
-		}
-	}
-	return &ucfg
-}
-
-func (r *Config) HasProgram(s string) bool {
-	return r.program[s]
-}
-
-func (r *Config) HasGOOS(s string) bool {
-	return r.goos[s]
-}
-
-func (r *Config) HasGOARCH(s string) bool {
-	return r.goarch[s]
-}
-
-func (r *Config) HasGoVersion(s string) bool {
-	return r.goversion[s]
-}
-
-func (r *Config) HasVersion(program, version string) bool {
-	return r.pgversion[pgkey{program, version}]
-}
-
-func (r *Config) HasCounter(program, counter string) bool {
-	return r.pgcounter[pgkey{program, counter}]
-}
-
-func (r *Config) HasCounterPrefix(program, prefix string) bool {
-	return r.pgcounterprefix[pgkey{program, prefix}]
-}
-
-func (r *Config) HasStack(program, stack string) bool {
-	return r.pgstack[pgkey{program, stack}]
-}
-
-func (r *Config) Rate(program, name string) float64 {
-	return r.rate[pgkey{program, name}]
-}
-
-func set(slice []string) map[string]bool {
-	s := make(map[string]bool, len(slice))
-	for _, v := range slice {
-		s[v] = true
-	}
-	return s
-}
-
-// Expand takes a counter defined with buckets and expands it into distinct
-// strings for each bucket.
-func Expand(counter string) []string {
-	prefix, rest, hasBuckets := strings.Cut(counter, "{")
-	var counters []string
-	if hasBuckets {
-		buckets := strings.Split(strings.TrimSuffix(rest, "}"), ",")
-		for _, b := range buckets {
-			counters = append(counters, prefix+b)
-		}
-	} else {
-		counters = append(counters, prefix)
-	}
-	return counters
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/internal/configstore/download.go b/src/cmd/vendor/golang.org/x/telemetry/internal/configstore/download.go
deleted file mode 100644
index e60ab7e9fdd73e..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/internal/configstore/download.go
+++ /dev/null
@@ -1,86 +0,0 @@
-// Copyright 2023 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-// Package configstore abstracts interaction with the telemetry config server.
-// Telemetry config (golang.org/x/telemetry/config) is distributed as a go
-// module containing go.mod and config.json. Programs that upload collected
-// counters download the latest config using `go mod download`. This provides
-// verification of downloaded configuration and cacheability.
-package configstore
-
-import (
-	"bytes"
-	"encoding/json"
-	"fmt"
-	"os"
-	"os/exec"
-	"path/filepath"
-	"sync/atomic"
-
-	"golang.org/x/telemetry/internal/telemetry"
-)
-
-const (
-	ModulePath     = "golang.org/x/telemetry/config"
-	configFileName = "config.json"
-)
-
-// needNoConsole is used on windows to set the windows.CREATE_NO_WINDOW
-// creation flag.
-var needNoConsole = func(cmd *exec.Cmd) {}
-
-var downloads int64
-
-// Downloads reports, for testing purposes, the number of times [Download] has
-// been called.
-func Downloads() int64 {
-	return atomic.LoadInt64(&downloads)
-}
-
-// Download fetches the requested telemetry UploadConfig using "go mod
-// download". If envOverlay is provided, it is appended to the environment used
-// for invoking the go command.
-//
-// The second result is the canonical version of the requested configuration.
-func Download(version string, envOverlay []string) (*telemetry.UploadConfig, string, error) {
-	atomic.AddInt64(&downloads, 1)
-
-	if version == "" {
-		version = "latest"
-	}
-	modVer := ModulePath + "@" + version
-	var stdout, stderr bytes.Buffer
-	cmd := exec.Command("go", "mod", "download", "-json", modVer)
-	needNoConsole(cmd)
-	cmd.Env = append(os.Environ(), envOverlay...)
-	cmd.Stdout = &stdout
-	cmd.Stderr = &stderr
-	if err := cmd.Run(); err != nil {
-		var info struct {
-			Error string
-		}
-		if err := json.Unmarshal(stdout.Bytes(), &info); err == nil && info.Error != "" {
-			return nil, "", fmt.Errorf("failed to download config module: %v", info.Error)
-		}
-		return nil, "", fmt.Errorf("failed to download config module: %w\n%s", err, &stderr)
-	}
-
-	var info struct {
-		Dir     string
-		Version string
-		Error   string
-	}
-	if err := json.Unmarshal(stdout.Bytes(), &info); err != nil || info.Dir == "" {
-		return nil, "", fmt.Errorf("failed to download config module (invalid JSON): %w", err)
-	}
-	data, err := os.ReadFile(filepath.Join(info.Dir, configFileName))
-	if err != nil {
-		return nil, "", fmt.Errorf("invalid config module: %w", err)
-	}
-	cfg := new(telemetry.UploadConfig)
-	if err := json.Unmarshal(data, cfg); err != nil {
-		return nil, "", fmt.Errorf("invalid config: %w", err)
-	}
-	return cfg, info.Version, nil
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/internal/configstore/download_windows.go b/src/cmd/vendor/golang.org/x/telemetry/internal/configstore/download_windows.go
deleted file mode 100644
index 1368de192a010c..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/internal/configstore/download_windows.go
+++ /dev/null
@@ -1,33 +0,0 @@
-// Copyright 2024 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-//go:build windows
-
-package configstore
-
-import (
-	"os/exec"
-	"syscall"
-
-	"golang.org/x/sys/windows"
-)
-
-func init() {
-	needNoConsole = needNoConsoleWindows
-}
-
-func needNoConsoleWindows(cmd *exec.Cmd) {
-	// The uploader main process is likely a daemonized process with no console.
-	// (see x/telemetry/start_windows.go) The console creation behavior when
-	// a parent is a console process without console is not clearly documented
-	// but empirically we observed the new console is created and attached to the
-	// subprocess in the default setup.
-	//
-	// Ensure no new console is attached to the subprocess by setting CREATE_NO_WINDOW.
-	//   https://learn.microsoft.com/en-us/windows/console/creation-of-a-console
-	//   https://learn.microsoft.com/en-us/windows/win32/procthread/process-creation-flags
-	cmd.SysProcAttr = &syscall.SysProcAttr{
-		CreationFlags: windows.CREATE_NO_WINDOW,
-	}
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/internal/crashmonitor/crash_go123.go b/src/cmd/vendor/golang.org/x/telemetry/internal/crashmonitor/crash_go123.go
deleted file mode 100644
index 8f00c4856b8fca..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/internal/crashmonitor/crash_go123.go
+++ /dev/null
@@ -1,17 +0,0 @@
-// Copyright 2024 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-//go:build go1.23
-// +build go1.23
-
-package crashmonitor
-
-import (
-	"os"
-	"runtime/debug"
-)
-
-func init() {
-	setCrashOutput = func(f *os.File) error { return debug.SetCrashOutput(f, debug.CrashOptions{}) }
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/internal/crashmonitor/monitor.go b/src/cmd/vendor/golang.org/x/telemetry/internal/crashmonitor/monitor.go
deleted file mode 100644
index 612f7563a74c9f..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/internal/crashmonitor/monitor.go
+++ /dev/null
@@ -1,256 +0,0 @@
-// Copyright 2024 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package crashmonitor
-
-// This file defines a monitor that reports arbitrary Go runtime
-// crashes to telemetry.
-
-import (
-	"bytes"
-	"fmt"
-	"io"
-	"log"
-	"os"
-	"reflect"
-	"runtime/debug"
-	"strconv"
-	"strings"
-
-	"golang.org/x/telemetry/internal/counter"
-)
-
-// Supported reports whether the runtime supports [runtime/debug.SetCrashOutput].
-//
-// TODO(adonovan): eliminate once go1.23+ is assured.
-func Supported() bool { return setCrashOutput != nil }
-
-var setCrashOutput func(*os.File) error // = runtime/debug.SetCrashOutput on go1.23+
-
-// Parent sets up the parent side of the crashmonitor. It requires
-// exclusive use of a writable pipe connected to the child process's stdin.
-func Parent(pipe *os.File) {
-	writeSentinel(pipe)
-	// Ensure that we get pc=0x%x values in the traceback.
-	debug.SetTraceback("system")
-	setCrashOutput(pipe)
-}
-
-// Child runs the part of the crashmonitor that runs in the child process.
-// It expects its stdin to be connected via a pipe to the parent which has
-// run Parent.
-func Child() {
-	// Wait for parent process's dying gasp.
-	// If the parent dies for any reason this read will return.
-	data, err := io.ReadAll(os.Stdin)
-	if err != nil {
-		log.Fatalf("failed to read from input pipe: %v", err)
-	}
-
-	// If the only line is the sentinel, it wasn't a crash.
-	if bytes.Count(data, []byte("\n")) < 2 {
-		childExitHook()
-		os.Exit(0) // parent exited without crash report
-	}
-
-	log.Printf("parent reported crash:\n%s", data)
-
-	// Parse the stack out of the crash report
-	// and record a telemetry count for it.
-	name, err := telemetryCounterName(data)
-	if err != nil {
-		// Keep count of how often this happens
-		// so that we can investigate if necessary.
-		incrementCounter("crash/malformed")
-
-		// Something went wrong.
-		// Save the crash securely in the file system.
-		f, err := os.CreateTemp(os.TempDir(), "*.crash")
-		if err != nil {
-			log.Fatal(err)
-		}
-		if _, err := f.Write(data); err != nil {
-			log.Fatal(err)
-		}
-		if err := f.Close(); err != nil {
-			log.Fatal(err)
-		}
-		log.Printf("failed to report crash to telemetry: %v", err)
-		log.Fatalf("crash report saved at %s", f.Name())
-	}
-
-	incrementCounter(name)
-
-	childExitHook()
-	log.Fatalf("telemetry crash recorded")
-}
-
-// (stubbed by test)
-var (
-	incrementCounter = func(name string) { counter.New(name).Inc() }
-	childExitHook    = func() {}
-)
-
-// The sentinel function returns its address. The difference between
-// this value as observed by calls in two different processes of the
-// same executable tells us the relative offset of their text segments.
-//
-// It would be nice if SetCrashOutput took care of this as it's fiddly
-// and likely to confuse every user at first.
-func sentinel() uint64 {
-	return uint64(reflect.ValueOf(sentinel).Pointer())
-}
-
-func writeSentinel(out io.Writer) {
-	fmt.Fprintf(out, "sentinel %x\n", sentinel())
-}
-
-// telemetryCounterName parses a crash report produced by the Go
-// runtime, extracts the stack of the first runnable goroutine,
-// converts each line into telemetry form ("symbol:relative-line"),
-// and returns this as the name of a counter.
-func telemetryCounterName(crash []byte) (string, error) {
-	pcs, err := parseStackPCs(string(crash))
-	if err != nil {
-		return "", err
-	}
-
-	// Limit the number of frames we request.
-	pcs = pcs[:min(len(pcs), 16)]
-
-	if len(pcs) == 0 {
-		// This can occur if all goroutines are idle, as when
-		// caught in a deadlock, or killed by an async signal
-		// while blocked.
-		//
-		// TODO(adonovan): consider how to report such
-		// situations. Reporting a goroutine in [sleep] or
-		// [select] state could be quite confusing without
-		// further information about the nature of the crash,
-		// as the problem is not local to the code location.
-		//
-		// For now, we keep count of this situation so that we
-		// can access whether it needs a more involved solution.
-		return "crash/no-running-goroutine", nil
-	}
-
-	// This string appears at the start of all
-	// crashmonitor-generated counter names.
-	//
-	// It is tempting to expose this as a parameter of Start, but
-	// it is not without risk. What value should most programs
-	// provide? There's no point giving the name of the executable
-	// as this is already recorded by telemetry. What if the
-	// application runs in multiple modes? Then it might be useful
-	// to record the mode. The problem is that an application with
-	// multiple modes probably doesn't know its mode by line 1 of
-	// main.main: it might require flag or argument parsing, or
-	// even validation of an environment variable, and we really
-	// want to steer users aware from any logic before Start. The
-	// flags and arguments will be wrong in the child process, and
-	// every extra conditional branch creates a risk that the
-	// recursively executed child program will behave not like the
-	// monitor but like the application. If the child process
-	// exits before calling Start, then the parent application
-	// will not have a monitor, and its crash reports will be
-	// discarded (written in to a pipe that is never read).
-	//
-	// So for now, we use this constant string.
-	const prefix = "crash/crash"
-	return counter.EncodeStack(pcs, prefix), nil
-}
-
-// parseStackPCs parses the parent process's program counters for the
-// first running goroutine out of a GOTRACEBACK=system traceback,
-// adjusting them so that they are valid for the child process's text
-// segment.
-//
-// This function returns only program counter values, ensuring that
-// there is no possibility of strings from the crash report (which may
-// contain PII) leaking into the telemetry system.
-func parseStackPCs(crash string) ([]uintptr, error) {
-	// getPC parses the PC out of a line of the form:
-	//     \tFILE:LINE +0xRELPC sp=... fp=... pc=...
-	getPC := func(line string) (uint64, error) {
-		_, pcstr, ok := strings.Cut(line, " pc=") // e.g. pc=0x%x
-		if !ok {
-			return 0, fmt.Errorf("no pc= for stack frame: %s", line)
-		}
-		return strconv.ParseUint(pcstr, 0, 64) // 0 => allow 0x prefix
-	}
-
-	var (
-		pcs            []uintptr
-		parentSentinel uint64
-		childSentinel  = sentinel()
-		on             = false // are we in the first running goroutine?
-		lines          = strings.Split(crash, "\n")
-	)
-	for i := 0; i < len(lines); i++ {
-		line := lines[i]
-
-		// Read sentinel value.
-		if parentSentinel == 0 && strings.HasPrefix(line, "sentinel ") {
-			_, err := fmt.Sscanf(line, "sentinel %x", &parentSentinel)
-			if err != nil {
-				return nil, fmt.Errorf("can't read sentinel line")
-			}
-			continue
-		}
-
-		// Search for "goroutine GID [STATUS]"
-		if !on {
-			if strings.HasPrefix(line, "goroutine ") &&
-				strings.Contains(line, " [running]:") {
-				on = true
-
-				if parentSentinel == 0 {
-					return nil, fmt.Errorf("no sentinel value in crash report")
-				}
-			}
-			continue
-		}
-
-		// A blank line marks end of a goroutine stack.
-		if line == "" {
-			break
-		}
-
-		// Skip the final "created by SYMBOL in goroutine GID" part.
-		if strings.HasPrefix(line, "created by ") {
-			break
-		}
-
-		// Expect a pair of lines:
-		//   SYMBOL(ARGS)
-		//   \tFILE:LINE +0xRELPC sp=0x%x fp=0x%x pc=0x%x
-		// Note: SYMBOL may contain parens "pkg.(*T).method"
-		// The RELPC is sometimes missing.
-
-		// Skip the symbol(args) line.
-		i++
-		if i == len(lines) {
-			break
-		}
-		line = lines[i]
-
-		// Parse the PC, and correct for the parent and child's
-		// different mappings of the text section.
-		pc, err := getPC(line)
-		if err != nil {
-			// Inlined frame, perhaps; skip it.
-			continue
-		}
-		pcs = append(pcs, uintptr(pc-parentSentinel+childSentinel))
-	}
-	return pcs, nil
-}
-
-func min(x, y int) int {
-	if x < y {
-		return x
-	} else {
-		return y
-	}
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/internal/upload/Doc.txt b/src/cmd/vendor/golang.org/x/telemetry/internal/upload/Doc.txt
deleted file mode 100644
index 45601e651573e0..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/internal/upload/Doc.txt
+++ /dev/null
@@ -1,45 +0,0 @@
-The upload process converts count files into reports, and
-uploads reports. There will be only one report, named YYYY-MM-DD.json,
-for a given day.
-
-First phase. Look at the localdir (os.UserConfigdir()/go/telemetry/local)
-and find all .count and .json files. Find the count files that are no
-longer active by looking at their metadata.
-
-Second phase. Group the inactive count files by their expiry date, and
-for each date generate the local report and the upload report. (The upload
-report only contains the counters in the upload configuration.) The upload
-report is saved in the local directory with a name like YYYY-MM-DD.json, if
-there is no file already existing with that name.
-If the local report is different, it is saved in the local directory
-with a name like local.YYYY-MM-DD.json. The new upload report is
-added to the list of .json files from the first phase. At this point
-the count files are no longer needed and can be deleted.
-
-Third phase. Look at the .json files in the list from the first phase.
-If the name starts with local, skip it. If there is a file with the
-identical name in the upload directory, remove the one in the local directory.
-Otherwise try to upload the one in the local directory,
-If the upload succeeds, move the file to the uploaded directory.
-
-
-There are various error conditions.
-1. Several processes could look at localdir and see work to do.
-1A. They could see different sets of expired count files for some day.
-    This could happen if another process is removing count files. In this
-    case there is already a YYYY-MM-DD.json file either in localdir
-    or updatedir, so the process seeing fewer count files will not generate
-    a report.
-1B. They could see the same count files, and no report in either directory.
-    They will both generate (in memory) reports and check to see if there
-    is a YYYY-MM-DD.json file in either directory. They could both then
-    write two files with the same name, but different X values, but
-    otherwise the same contents. The X values are very close to the front
-    of the file. Assuming reasonable file system semantics one version of
-    the file will be written. To minimize this, just before writing reports
-    the code checks again to see if they exist.
-1C. Once there is an existing well-formed file YYYY-MM-DD.json in localdir
-    eventually the upload will succeed, and the file will be moved to updatedir.
-    It is possible that other processes will not see the file in updatedir and
-    upload it again and also move it to uploaddir. This is harmless as all
-    the uploaded files are identical.
diff --git a/src/cmd/vendor/golang.org/x/telemetry/internal/upload/date.go b/src/cmd/vendor/golang.org/x/telemetry/internal/upload/date.go
deleted file mode 100644
index d6d67a164d5037..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/internal/upload/date.go
+++ /dev/null
@@ -1,85 +0,0 @@
-// Copyright 2023 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package upload
-
-import (
-	"fmt"
-	"os"
-	"sync"
-	"time"
-
-	"golang.org/x/telemetry/internal/counter"
-	"golang.org/x/telemetry/internal/telemetry"
-)
-
-// time and date handling
-
-var distantPast = 21 * 24 * time.Hour
-
-// reports that are too old (21 days) are not uploaded
-func (u *uploader) tooOld(date string, uploadStartTime time.Time) bool {
-	t, err := time.Parse(telemetry.DateOnly, date)
-	if err != nil {
-		u.logger.Printf("tooOld: %v", err)
-		return false
-	}
-	age := uploadStartTime.Sub(t)
-	return age > distantPast
-}
-
-// counterDateSpan parses the counter file named fname and returns the (begin,
-// end) span recorded in its metadata, or an error if this data could not be
-// extracted.
-func (u *uploader) counterDateSpan(fname string) (begin, end time.Time, _ error) {
-	parsed, err := u.parseCountFile(fname)
-	if err != nil {
-		return time.Time{}, time.Time{}, err
-	}
-	timeBegin, ok := parsed.Meta["TimeBegin"]
-	if !ok {
-		return time.Time{}, time.Time{}, fmt.Errorf("missing counter metadata for TimeBegin")
-	}
-	begin, err = time.Parse(time.RFC3339, timeBegin)
-	if err != nil {
-		return time.Time{}, time.Time{}, fmt.Errorf("failed to parse TimeBegin: %v", err)
-	}
-	timeEnd, ok := parsed.Meta["TimeEnd"]
-	if !ok {
-		return time.Time{}, time.Time{}, fmt.Errorf("missing counter metadata for TimeEnd")
-	}
-	end, err = time.Parse(time.RFC3339, timeEnd)
-	if err != nil {
-		return time.Time{}, time.Time{}, fmt.Errorf("failed to parse TimeEnd: %v", err)
-	}
-	return begin, end, nil
-}
-
-// avoid parsing count files multiple times
-type parsedCache struct {
-	mu sync.Mutex
-	m  map[string]*counter.File
-}
-
-func (u *uploader) parseCountFile(fname string) (*counter.File, error) {
-	u.cache.mu.Lock()
-	defer u.cache.mu.Unlock()
-	if u.cache.m == nil {
-		u.cache.m = make(map[string]*counter.File)
-	}
-	if f, ok := u.cache.m[fname]; ok {
-		return f, nil
-	}
-	buf, err := os.ReadFile(fname)
-	if err != nil {
-		return nil, fmt.Errorf("parse ReadFile: %v for %s", err, fname)
-	}
-	f, err := counter.Parse(fname, buf)
-	if err != nil {
-
-		return nil, fmt.Errorf("parse Parse: %v for %s", err, fname)
-	}
-	u.cache.m[fname] = f
-	return f, nil
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/internal/upload/findwork.go b/src/cmd/vendor/golang.org/x/telemetry/internal/upload/findwork.go
deleted file mode 100644
index 2b165be3f9ff20..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/internal/upload/findwork.go
+++ /dev/null
@@ -1,102 +0,0 @@
-// Copyright 2023 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package upload
-
-import (
-	"os"
-	"path/filepath"
-	"strings"
-)
-
-// files to handle
-type work struct {
-	// absolute file names
-	countfiles []string // count files to process
-	readyfiles []string // old reports to upload
-	// relative names
-	uploaded map[string]bool // reports that have been uploaded
-}
-
-// find all the files that look like counter files or reports
-// that need to be uploaded. (There may be unexpected leftover files
-// and uploading is supposed to be idempotent.)
-func (u *uploader) findWork() work {
-	localdir, uploaddir := u.dir.LocalDir(), u.dir.UploadDir()
-	var ans work
-	fis, err := os.ReadDir(localdir)
-	if err != nil {
-		u.logger.Printf("Could not find work: failed to read local dir %s: %v", localdir, err)
-		return ans
-	}
-
-	mode, asof := u.dir.Mode()
-	u.logger.Printf("Finding work: mode %s asof %s", mode, asof)
-
-	// count files end in .v1.count
-	// reports end in .json. If they are not to be uploaded they
-	// start with local.
-	for _, fi := range fis {
-		if strings.HasSuffix(fi.Name(), ".v1.count") {
-			fname := filepath.Join(localdir, fi.Name())
-			_, expiry, err := u.counterDateSpan(fname)
-			switch {
-			case err != nil:
-				u.logger.Printf("Error reading expiry for count file %s: %v", fi.Name(), err)
-			case expiry.After(u.startTime):
-				u.logger.Printf("Skipping count file %s: still active", fi.Name())
-			default:
-				u.logger.Printf("Collecting count file %s", fi.Name())
-				ans.countfiles = append(ans.countfiles, fname)
-			}
-		} else if strings.HasPrefix(fi.Name(), "local.") {
-			// skip
-		} else if strings.HasSuffix(fi.Name(), ".json") && mode == "on" {
-			// Collect reports that are ready for upload.
-			reportDate := u.uploadReportDate(fi.Name())
-			if !asof.IsZero() && !reportDate.IsZero() {
-				// If both the mode asof date and the report date are present, do the
-				// right thing...
-				//
-				// (see https://github.com/golang/go/issues/63142#issuecomment-1734025130)
-				if asof.Before(reportDate) {
-					// Note: since this report was created after telemetry was enabled,
-					// we can only assume that the process that created it checked that
-					// the counter data contained therein was all from after the asof
-					// date.
-					//
-					// TODO(rfindley): store the begin date in reports, so that we can
-					// verify this assumption.
-					u.logger.Printf("Uploadable: %s", fi.Name())
-					ans.readyfiles = append(ans.readyfiles, filepath.Join(localdir, fi.Name()))
-				}
-			} else {
-				// ...otherwise fall back on the old behavior of uploading all
-				// unuploaded files.
-				//
-				// TODO(rfindley): invert this logic following more testing. We
-				// should only upload if we know both the asof date and the report
-				// date, and they are acceptable.
-				u.logger.Printf("Uploadable (missing date): %s", fi.Name())
-				ans.readyfiles = append(ans.readyfiles, filepath.Join(localdir, fi.Name()))
-			}
-		}
-	}
-
-	fis, err = os.ReadDir(uploaddir)
-	if err != nil {
-		os.MkdirAll(uploaddir, 0777)
-		return ans
-	}
-	// There should be only one of these per day; maybe sometime
-	// we'll want to clean the directory.
-	ans.uploaded = make(map[string]bool)
-	for _, fi := range fis {
-		if strings.HasSuffix(fi.Name(), ".json") {
-			u.logger.Printf("Already uploaded: %s", fi.Name())
-			ans.uploaded[fi.Name()] = true
-		}
-	}
-	return ans
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/internal/upload/reports.go b/src/cmd/vendor/golang.org/x/telemetry/internal/upload/reports.go
deleted file mode 100644
index 34bb29d8f507a7..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/internal/upload/reports.go
+++ /dev/null
@@ -1,344 +0,0 @@
-// Copyright 2023 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package upload
-
-import (
-	"crypto/rand"
-	"encoding/binary"
-	"encoding/json"
-	"fmt"
-	"math"
-	"os"
-	"path/filepath"
-	"strings"
-	"time"
-
-	"golang.org/x/telemetry/internal/config"
-	"golang.org/x/telemetry/internal/counter"
-	"golang.org/x/telemetry/internal/telemetry"
-)
-
-// reports generates reports from inactive count files
-func (u *uploader) reports(todo *work) ([]string, error) {
-	if mode, _ := u.dir.Mode(); mode == "off" {
-		return nil, nil // no reports
-	}
-	thisInstant := u.startTime
-	today := thisInstant.Format(telemetry.DateOnly)
-	lastWeek := latestReport(todo.uploaded)
-	if lastWeek >= today { //should never happen
-		lastWeek = ""
-	}
-	u.logger.Printf("Last week: %s, today: %s", lastWeek, today)
-	countFiles := make(map[string][]string) // expiry date string->filenames
-	earliest := make(map[string]time.Time)  // earliest begin time for any counter
-	for _, f := range todo.countfiles {
-		begin, end, err := u.counterDateSpan(f)
-		if err != nil {
-			// This shouldn't happen: we should have already skipped count files that
-			// don't contain valid start or end times.
-			u.logger.Printf("BUG: failed to parse expiry for collected count file: %v", err)
-			continue
-		}
-
-		if end.Before(thisInstant) {
-			expiry := end.Format(dateFormat)
-			countFiles[expiry] = append(countFiles[expiry], f)
-			if earliest[expiry].IsZero() || earliest[expiry].After(begin) {
-				earliest[expiry] = begin
-			}
-		}
-	}
-	for expiry, files := range countFiles {
-		if notNeeded(expiry, *todo) {
-			u.logger.Printf("Files for %s not needed, deleting %v", expiry, files)
-			// The report already exists.
-			// There's another check in createReport.
-			u.deleteFiles(files)
-			continue
-		}
-		fname, err := u.createReport(earliest[expiry], expiry, files, lastWeek)
-		if err != nil {
-			u.logger.Printf("Failed to create report for %s: %v", expiry, err)
-			continue
-		}
-		if fname != "" {
-			u.logger.Printf("Ready to upload: %s", filepath.Base(fname))
-			todo.readyfiles = append(todo.readyfiles, fname)
-		}
-	}
-	return todo.readyfiles, nil
-}
-
-// latestReport returns the YYYY-MM-DD of the last report uploaded
-// or the empty string if there are no reports.
-func latestReport(uploaded map[string]bool) string {
-	var latest string
-	for name := range uploaded {
-		if strings.HasSuffix(name, ".json") {
-			if name > latest {
-				latest = name
-			}
-		}
-	}
-	if latest == "" {
-		return ""
-	}
-	// strip off the .json
-	return latest[:len(latest)-len(".json")]
-}
-
-// notNeeded returns true if the report for date has already been created
-func notNeeded(date string, todo work) bool {
-	if todo.uploaded != nil && todo.uploaded[date+".json"] {
-		return true
-	}
-	// maybe the report is already in todo.readyfiles
-	for _, f := range todo.readyfiles {
-		if strings.Contains(f, date) {
-			return true
-		}
-	}
-	return false
-}
-
-func (u *uploader) deleteFiles(files []string) {
-	for _, f := range files {
-		if err := os.Remove(f); err != nil {
-			// this could be a race condition.
-			// conversely, on Windows, err may be nil and
-			// the file not deleted if anyone has it open.
-			u.logger.Printf("%v failed to remove %s", err, f)
-		}
-	}
-}
-
-// createReport creates local and upload report files by
-// combining all the count files for the expiryDate, and
-// returns the upload report file's path.
-// It may delete the count files once local and upload report
-// files are successfully created.
-func (u *uploader) createReport(start time.Time, expiryDate string, countFiles []string, lastWeek string) (string, error) {
-	uploadOK := true
-	mode, asof := u.dir.Mode()
-	if mode != "on" {
-		u.logger.Printf("No upload config or mode %q is not 'on'", mode)
-		uploadOK = false // no config, nothing to upload
-	}
-	if u.tooOld(expiryDate, u.startTime) {
-		u.logger.Printf("Expiry date %s is too old", expiryDate)
-		uploadOK = false
-	}
-	// If the mode is recorded with an asof date, don't upload if the report
-	// includes any data on or before the asof date.
-	if !asof.IsZero() && !asof.Before(start) {
-		u.logger.Printf("As-of date %s is not before start %s", asof, start)
-		uploadOK = false
-	}
-	// TODO(rfindley): check that all the x.Meta are consistent for GOOS, GOARCH, etc.
-	report := &telemetry.Report{
-		Config:   u.configVersion,
-		X:        computeRandom(), // json encodes all the bits
-		Week:     expiryDate,
-		LastWeek: lastWeek,
-	}
-	if report.X > u.config.SampleRate && u.config.SampleRate > 0 {
-		u.logger.Printf("X: %f > SampleRate:%f, not uploadable", report.X, u.config.SampleRate)
-		uploadOK = false
-	}
-	var succeeded bool
-	for _, f := range countFiles {
-		fok := false
-		x, err := u.parseCountFile(f)
-		if err != nil {
-			u.logger.Printf("Unparseable count file %s: %v", filepath.Base(f), err)
-			continue
-		}
-		prog := findProgReport(x.Meta, report)
-		for k, v := range x.Count {
-			if counter.IsStackCounter(k) {
-				// stack
-				prog.Stacks[k] += int64(v)
-			} else {
-				// counter
-				prog.Counters[k] += int64(v)
-			}
-			succeeded = true
-			fok = true
-		}
-		if !fok {
-			u.logger.Printf("no counters found in %s", f)
-		}
-	}
-	if !succeeded {
-		return "", fmt.Errorf("none of the %d count files for %s contained counters", len(countFiles), expiryDate)
-	}
-	// 1. generate the local report
-	localContents, err := json.MarshalIndent(report, "", " ")
-	if err != nil {
-		return "", fmt.Errorf("failed to marshal report for %s: %v", expiryDate, err)
-	}
-	// check that the report can be read back
-	// TODO(pjw): remove for production?
-	var report2 telemetry.Report
-	if err := json.Unmarshal(localContents, &report2); err != nil {
-		return "", fmt.Errorf("failed to unmarshal local report for %s: %v", expiryDate, err)
-	}
-
-	var uploadContents []byte
-	if uploadOK {
-		// 2. create the uploadable version
-		cfg := config.NewConfig(u.config)
-		upload := &telemetry.Report{
-			Week:     report.Week,
-			LastWeek: report.LastWeek,
-			X:        report.X,
-			Config:   report.Config,
-		}
-		for _, p := range report.Programs {
-			// does the uploadConfig want this program?
-			// if so, copy over the Stacks and Counters
-			// that the uploadConfig mentions.
-			if !cfg.HasGoVersion(p.GoVersion) || !cfg.HasProgram(p.Program) || !cfg.HasVersion(p.Program, p.Version) {
-				continue
-			}
-			x := &telemetry.ProgramReport{
-				Program:   p.Program,
-				Version:   p.Version,
-				GOOS:      p.GOOS,
-				GOARCH:    p.GOARCH,
-				GoVersion: p.GoVersion,
-				Counters:  make(map[string]int64),
-				Stacks:    make(map[string]int64),
-			}
-			upload.Programs = append(upload.Programs, x)
-			for k, v := range p.Counters {
-				if cfg.HasCounter(p.Program, k) && report.X <= cfg.Rate(p.Program, k) {
-					x.Counters[k] = v
-				}
-			}
-			// and the same for Stacks
-			// this can be made more efficient, when it matters
-			for k, v := range p.Stacks {
-				before, _, _ := strings.Cut(k, "\n")
-				if cfg.HasStack(p.Program, before) && report.X <= cfg.Rate(p.Program, before) {
-					x.Stacks[k] = v
-				}
-			}
-		}
-
-		uploadContents, err = json.MarshalIndent(upload, "", " ")
-		if err != nil {
-			return "", fmt.Errorf("failed to marshal upload report for %s: %v", expiryDate, err)
-		}
-	}
-	localFileName := filepath.Join(u.dir.LocalDir(), "local."+expiryDate+".json")
-	uploadFileName := filepath.Join(u.dir.LocalDir(), expiryDate+".json")
-
-	/* Prepare to write files */
-	// if either file exists, someone has been here ahead of us
-	// (there is still a race, but this check shortens the open window)
-	if _, err := os.Stat(localFileName); err == nil {
-		u.deleteFiles(countFiles)
-		return "", fmt.Errorf("local report %s already exists", localFileName)
-	}
-	if _, err := os.Stat(uploadFileName); err == nil {
-		u.deleteFiles(countFiles)
-		return "", fmt.Errorf("report %s already exists", uploadFileName)
-	}
-	// write the uploadable file
-	var errUpload, errLocal error
-	if uploadOK {
-		_, errUpload = exclusiveWrite(uploadFileName, uploadContents)
-	}
-	// write the local file
-	_, errLocal = exclusiveWrite(localFileName, localContents)
-	/*  Wrote the files */
-
-	// even though these errors won't occur, what should happen
-	// if errUpload == nil and it is ok to upload, and errLocal != nil?
-	if errLocal != nil {
-		return "", fmt.Errorf("failed to write local file %s (%v)", localFileName, errLocal)
-	}
-	if errUpload != nil {
-		return "", fmt.Errorf("failed to write upload file %s (%v)", uploadFileName, errUpload)
-	}
-	u.logger.Printf("Created %s, deleting %d count files", filepath.Base(uploadFileName), len(countFiles))
-	u.deleteFiles(countFiles)
-	if uploadOK {
-		return uploadFileName, nil
-	}
-	return "", nil
-}
-
-// exclusiveWrite attempts to create filename exclusively, and if successful,
-// writes content to the resulting file handle.
-//
-// It returns a boolean indicating whether the exclusive handle was acquired,
-// and an error indicating whether the operation succeeded.
-// If the file already exists, exclusiveWrite returns (false, nil).
-func exclusiveWrite(filename string, content []byte) (_ bool, rerr error) {
-	f, err := os.OpenFile(filename, os.O_WRONLY|os.O_CREATE|os.O_EXCL, 0644)
-	if err != nil {
-		if os.IsExist(err) {
-			return false, nil
-		}
-		return false, err
-	}
-	defer func() {
-		if err := f.Close(); err != nil && rerr == nil {
-			rerr = err
-		}
-	}()
-	if _, err := f.Write(content); err != nil {
-		return false, err
-	}
-	return true, nil
-}
-
-// return an existing ProgremReport, or create anew
-func findProgReport(meta map[string]string, report *telemetry.Report) *telemetry.ProgramReport {
-	for _, prog := range report.Programs {
-		if prog.Program == meta["Program"] && prog.Version == meta["Version"] &&
-			prog.GoVersion == meta["GoVersion"] && prog.GOOS == meta["GOOS"] &&
-			prog.GOARCH == meta["GOARCH"] {
-			return prog
-		}
-	}
-	prog := telemetry.ProgramReport{
-		Program:   meta["Program"],
-		Version:   meta["Version"],
-		GoVersion: meta["GoVersion"],
-		GOOS:      meta["GOOS"],
-		GOARCH:    meta["GOARCH"],
-		Counters:  make(map[string]int64),
-		Stacks:    make(map[string]int64),
-	}
-	report.Programs = append(report.Programs, &prog)
-	return &prog
-}
-
-// computeRandom returns a cryptographic random float64 in the range [0, 1],
-// with 52 bits of precision.
-func computeRandom() float64 {
-	for {
-		b := make([]byte, 8)
-		_, err := rand.Read(b)
-		if err != nil {
-			panic(fmt.Sprintf("rand.Read failed: %v", err))
-		}
-		// and turn it into a float64
-		x := math.Float64frombits(binary.LittleEndian.Uint64(b))
-		if math.IsNaN(x) || math.IsInf(x, 0) {
-			continue
-		}
-		x = math.Abs(x)
-		if x < 0x1p-1000 { // avoid underflow patterns
-			continue
-		}
-		frac, _ := math.Frexp(x) // 52 bits of randomness
-		return frac*2 - 1
-	}
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/internal/upload/run.go b/src/cmd/vendor/golang.org/x/telemetry/internal/upload/run.go
deleted file mode 100644
index e9c8dc207126a1..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/internal/upload/run.go
+++ /dev/null
@@ -1,226 +0,0 @@
-// Copyright 2023 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package upload
-
-import (
-	"fmt"
-	"io"
-	"log"
-	"os"
-	"path"
-	"path/filepath"
-	"runtime/debug"
-	"strings"
-	"time"
-
-	"golang.org/x/telemetry/internal/configstore"
-	"golang.org/x/telemetry/internal/telemetry"
-)
-
-// RunConfig configures non-default behavior of a call to Run.
-//
-// All fields are optional, for testing or observability.
-type RunConfig struct {
-	TelemetryDir string    // if set, overrides the telemetry data directory
-	UploadURL    string    // if set, overrides the telemetry upload endpoint
-	LogWriter    io.Writer // if set, used for detailed logging of the upload process
-	Env          []string  // if set, appended to the config download environment
-	StartTime    time.Time // if set, overrides the upload start time
-}
-
-// Run generates and uploads reports, as allowed by the mode file.
-func Run(config RunConfig) error {
-	defer func() {
-		if err := recover(); err != nil {
-			log.Printf("upload recover: %v", err)
-		}
-	}()
-	uploader, err := newUploader(config)
-	if err != nil {
-		return err
-	}
-	defer uploader.Close()
-	return uploader.Run()
-}
-
-// uploader encapsulates a single upload operation, carrying parameters and
-// shared state.
-type uploader struct {
-	// config is used to select counters to upload.
-	config        *telemetry.UploadConfig //
-	configVersion string                  // version of the config
-	dir           telemetry.Dir           // the telemetry dir to process
-
-	uploadServerURL string
-	startTime       time.Time
-
-	cache parsedCache
-
-	logFile *os.File
-	logger  *log.Logger
-}
-
-// newUploader creates a new uploader to use for running the upload for the
-// given config.
-//
-// Uploaders should only be used for one call to [uploader.Run].
-func newUploader(rcfg RunConfig) (*uploader, error) {
-	// Determine the upload directory.
-	var dir telemetry.Dir
-	if rcfg.TelemetryDir != "" {
-		dir = telemetry.NewDir(rcfg.TelemetryDir)
-	} else {
-		dir = telemetry.Default
-	}
-
-	// Determine the upload URL.
-	uploadURL := rcfg.UploadURL
-	if uploadURL == "" {
-		uploadURL = "https://telemetry.go.dev/upload"
-	}
-
-	// Determine the upload logger.
-	//
-	// This depends on the provided rcfg.LogWriter and the presence of
-	// dir.DebugDir, as follows:
-	//  1. If LogWriter is present, log to it.
-	//  2. If DebugDir is present, log to a file within it.
-	//  3. If both LogWriter and DebugDir are present, log to a multi writer.
-	//  4. If neither LogWriter nor DebugDir are present, log to a noop logger.
-	var logWriters []io.Writer
-	logFile, err := debugLogFile(dir.DebugDir())
-	if err != nil {
-		logFile = nil
-	}
-	if logFile != nil {
-		logWriters = append(logWriters, logFile)
-	}
-	if rcfg.LogWriter != nil {
-		logWriters = append(logWriters, rcfg.LogWriter)
-	}
-	var logWriter io.Writer
-	switch len(logWriters) {
-	case 0:
-		logWriter = io.Discard
-	case 1:
-		logWriter = logWriters[0]
-	default:
-		logWriter = io.MultiWriter(logWriters...)
-	}
-	logger := log.New(logWriter, "", log.Ltime|log.Lmicroseconds|log.Lshortfile)
-
-	// Fetch the upload config, if it is not provided.
-	var (
-		config        *telemetry.UploadConfig
-		configVersion string
-	)
-
-	if mode, _ := dir.Mode(); mode == "on" {
-		// golang/go#68946: only download the upload config if it will be used.
-		//
-		// TODO(rfindley): This is a narrow change aimed at minimally fixing the
-		// associated bug. In the future, we should read the mode only once during
-		// the upload process.
-		config, configVersion, err = configstore.Download("latest", rcfg.Env)
-		if err != nil {
-			return nil, err
-		}
-	} else {
-		config = &telemetry.UploadConfig{}
-		configVersion = "v0.0.0-0"
-	}
-
-	// Set the start time, if it is not provided.
-	startTime := time.Now().UTC()
-	if !rcfg.StartTime.IsZero() {
-		startTime = rcfg.StartTime
-	}
-
-	return &uploader{
-		config:          config,
-		configVersion:   configVersion,
-		dir:             dir,
-		uploadServerURL: uploadURL,
-		startTime:       startTime,
-
-		logFile: logFile,
-		logger:  logger,
-	}, nil
-}
-
-// Close cleans up any resources associated with the uploader.
-func (u *uploader) Close() error {
-	if u.logFile == nil {
-		return nil
-	}
-	return u.logFile.Close()
-}
-
-// Run generates and uploads reports
-func (u *uploader) Run() error {
-	if telemetry.DisabledOnPlatform {
-		return nil
-	}
-	todo := u.findWork()
-	ready, err := u.reports(&todo)
-	if err != nil {
-		u.logger.Printf("Error building reports: %v", err)
-		return fmt.Errorf("reports failed: %v", err)
-	}
-	u.logger.Printf("Uploading %d reports", len(ready))
-	for _, f := range ready {
-		u.uploadReport(f)
-	}
-	return nil
-}
-
-// debugLogFile arranges to write a log file in the given debug directory, if
-// it exists.
-func debugLogFile(debugDir string) (*os.File, error) {
-	fd, err := os.Stat(debugDir)
-	if os.IsNotExist(err) {
-		return nil, nil
-	}
-	if err != nil {
-		return nil, err
-	}
-	if !fd.IsDir() {
-		return nil, fmt.Errorf("debug path %q is not a directory", debugDir)
-	}
-	info, ok := debug.ReadBuildInfo()
-	if !ok {
-		return nil, fmt.Errorf("no build info")
-	}
-	year, month, day := time.Now().UTC().Date()
-	goVers := info.GoVersion
-	// E.g.,  goVers:"go1.22-20240109-RC01 cl/597041403 +dcbe772469 X:loopvar"
-	words := strings.Fields(goVers)
-	goVers = words[0]
-	progPkgPath := info.Path
-	if progPkgPath == "" {
-		progPkgPath = strings.TrimSuffix(filepath.Base(os.Args[0]), ".exe")
-	}
-	prog := path.Base(progPkgPath)
-	progVers := info.Main.Version
-	if progVers == "(devel)" { // avoid special characters in created file names
-		progVers = "devel"
-	}
-	logBase := strings.ReplaceAll(
-		fmt.Sprintf("%s-%s-%s-%4d%02d%02d-%d.log", prog, progVers, goVers, year, month, day, os.Getpid()),
-		" ", "")
-	fname := filepath.Join(debugDir, logBase)
-	if _, err := os.Stat(fname); err == nil {
-		// This process previously called upload.Run
-		return nil, nil
-	}
-	f, err := os.OpenFile(fname, os.O_WRONLY|os.O_CREATE|os.O_EXCL, 0666)
-	if err != nil {
-		if os.IsExist(err) {
-			return nil, nil // this process previously called upload.Run
-		}
-		return nil, err
-	}
-	return f, nil
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/internal/upload/upload.go b/src/cmd/vendor/golang.org/x/telemetry/internal/upload/upload.go
deleted file mode 100644
index 419745f628b92f..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/internal/upload/upload.go
+++ /dev/null
@@ -1,117 +0,0 @@
-// Copyright 2023 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package upload
-
-import (
-	"bytes"
-	"net/http"
-	"os"
-	"path/filepath"
-	"regexp"
-	"strings"
-	"time"
-
-	"golang.org/x/telemetry/internal/telemetry"
-)
-
-var (
-	dateRE     = regexp.MustCompile(`(\d\d\d\d-\d\d-\d\d)[.]json$`)
-	dateFormat = telemetry.DateOnly
-	// TODO(rfindley): use dateFormat throughout.
-)
-
-// uploadReportDate returns the date component of the upload file name, or "" if the
-// date was unmatched.
-func (u *uploader) uploadReportDate(fname string) time.Time {
-	match := dateRE.FindStringSubmatch(fname)
-	if match == nil || len(match) < 2 {
-		u.logger.Printf("malformed report name: missing date: %q", filepath.Base(fname))
-		return time.Time{}
-	}
-	d, err := time.Parse(dateFormat, match[1])
-	if err != nil {
-		u.logger.Printf("malformed report name: bad date: %q", filepath.Base(fname))
-		return time.Time{}
-	}
-	return d
-}
-
-func (u *uploader) uploadReport(fname string) {
-	thisInstant := u.startTime
-	// TODO(rfindley): use uploadReportDate here, once we've done a gopls release.
-
-	// first make sure it is not in the future
-	today := thisInstant.Format(telemetry.DateOnly)
-	match := dateRE.FindStringSubmatch(fname)
-	if match == nil || len(match) < 2 {
-		u.logger.Printf("Report name %q missing date", filepath.Base(fname))
-	} else if match[1] > today {
-		u.logger.Printf("Report date for %q is later than today (%s)", filepath.Base(fname), today)
-		return // report is in the future, which shouldn't happen
-	}
-	buf, err := os.ReadFile(fname)
-	if err != nil {
-		u.logger.Printf("%v reading %s", err, fname)
-		return
-	}
-	if u.uploadReportContents(fname, buf) {
-		// anything left to do?
-	}
-}
-
-// try to upload the report, 'true' if successful
-func (u *uploader) uploadReportContents(fname string, buf []byte) bool {
-	fdate := strings.TrimSuffix(filepath.Base(fname), ".json")
-	fdate = fdate[len(fdate)-len(telemetry.DateOnly):]
-
-	newname := filepath.Join(u.dir.UploadDir(), fdate+".json")
-
-	// Lock the upload, to prevent duplicate uploads.
-	{
-		lockname := newname + ".lock"
-		lockfile, err := os.OpenFile(lockname, os.O_CREATE|os.O_EXCL, 0666)
-		if err != nil {
-			u.logger.Printf("Failed to acquire lock %s: %v", lockname, err)
-			return false
-		}
-		_ = lockfile.Close()
-		defer os.Remove(lockname)
-	}
-
-	if _, err := os.Stat(newname); err == nil {
-		// Another process uploaded but failed to clean up (or hasn't yet cleaned
-		// up). Ensure that cleanup occurs.
-		u.logger.Printf("After acquire: report already uploaded")
-		_ = os.Remove(fname)
-		return false
-	}
-
-	endpoint := u.uploadServerURL + "/" + fdate
-	b := bytes.NewReader(buf)
-	resp, err := http.Post(endpoint, "application/json", b)
-	if err != nil {
-		u.logger.Printf("Error upload %s to %s: %v", filepath.Base(fname), endpoint, err)
-		return false
-	}
-	// hope for a 200, remove file on a 4xx, otherwise it will be retried by another process
-	if resp.StatusCode != 200 {
-		u.logger.Printf("Failed to upload %s to %s: %s", filepath.Base(fname), endpoint, resp.Status)
-		if resp.StatusCode >= 400 && resp.StatusCode < 500 {
-			err := os.Remove(fname)
-			if err == nil {
-				u.logger.Printf("Removed local/%s", filepath.Base(fname))
-			} else {
-				u.logger.Printf("Error removing local/%s: %v", filepath.Base(fname), err)
-			}
-		}
-		return false
-	}
-	// Store a copy of the uploaded report in the uploaded directory.
-	if err := os.WriteFile(newname, buf, 0644); err == nil {
-		os.Remove(fname) // if it exists
-	}
-	u.logger.Printf("Uploaded %s to %q", fdate+".json", endpoint)
-	return true
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/mode.go b/src/cmd/vendor/golang.org/x/telemetry/mode.go
deleted file mode 100644
index 8cdcd134a6cf98..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/mode.go
+++ /dev/null
@@ -1,38 +0,0 @@
-// Copyright 2023 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package telemetry
-
-import "golang.org/x/telemetry/internal/telemetry"
-
-// Mode returns the current telemetry mode.
-//
-// The telemetry mode is a global value that controls both the local collection
-// and uploading of telemetry data. Possible mode values are:
-//   - "on":    both collection and uploading is enabled
-//   - "local": collection is enabled, but uploading is disabled
-//   - "off":   both collection and uploading are disabled
-//
-// When mode is "on", or "local", telemetry data is written to the local file
-// system and may be inspected with the [gotelemetry] command.
-//
-// If an error occurs while reading the telemetry mode from the file system,
-// Mode returns the default value "local".
-//
-// [gotelemetry]: https://pkg.go.dev/golang.org/x/telemetry/cmd/gotelemetry
-func Mode() string {
-	mode, _ := telemetry.Default.Mode()
-	return mode
-}
-
-// SetMode sets the global telemetry mode to the given value.
-//
-// See the documentation of [Mode] for a description of the supported mode
-// values.
-//
-// An error is returned if the provided mode value is invalid, or if an error
-// occurs while persisting the mode value to the file system.
-func SetMode(mode string) error {
-	return telemetry.Default.SetMode(mode)
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/npm b/src/cmd/vendor/golang.org/x/telemetry/npm
deleted file mode 100644
index a5455cfb749e49..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/npm
+++ /dev/null
@@ -1,13 +0,0 @@
-#!/bin/bash
-# Copyright 2022 The Go Authors. All rights reserved.
-# Use of this source code is governed by a BSD-style
-# license that can be found in the LICENSE file.
-
-docker run \
-  --rm \
-  --volume $(pwd):/workspace \
-  --workdir /workspace \
-  --env NODE_OPTIONS="--dns-result-order=ipv4first" \
-  --entrypoint npm \
-  node:18.16.0-slim \
-  $@
diff --git a/src/cmd/vendor/golang.org/x/telemetry/npx b/src/cmd/vendor/golang.org/x/telemetry/npx
deleted file mode 100644
index 47bb38bb5d15eb..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/npx
+++ /dev/null
@@ -1,13 +0,0 @@
-#!/bin/bash
-# Copyright 2022 The Go Authors. All rights reserved.
-# Use of this source code is governed by a BSD-style
-# license that can be found in the LICENSE file.
-
-docker run \
-  --rm \
-  --volume $(pwd):/workspace \
-  --workdir /workspace \
-  --env NODE_OPTIONS="--dns-result-order=ipv4first" \
-  --entrypoint npx \
-  node:18.16.0-slim \
-  $@
diff --git a/src/cmd/vendor/golang.org/x/telemetry/package-lock.json b/src/cmd/vendor/golang.org/x/telemetry/package-lock.json
deleted file mode 100644
index 9c86033e8c5c51..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/package-lock.json
+++ /dev/null
@@ -1,4363 +0,0 @@
-{
-  "name": "workspace",
-  "lockfileVersion": 3,
-  "requires": true,
-  "packages": {
-    "": {
-      "dependencies": {
-        "@observablehq/plot": "0.6.9",
-        "d3": "7.8.5"
-      },
-      "devDependencies": {
-        "@typescript-eslint/eslint-plugin": "5.59.6",
-        "@typescript-eslint/parser": "5.59.6",
-        "eslint": "8.40.0",
-        "eslint-config-prettier": "8.8.0",
-        "npm-run-all": "4.1.5",
-        "prettier": "2.8.8",
-        "stylelint": "15.6.2",
-        "stylelint-config-standard": "33.0.0",
-        "typescript": "5.0.4"
-      }
-    },
-    "node_modules/@aashutoshrathi/word-wrap": {
-      "version": "1.2.6",
-      "resolved": "https://registry.npmjs.org/@aashutoshrathi/word-wrap/-/word-wrap-1.2.6.tgz",
-      "integrity": "sha512-1Yjs2SvM8TflER/OD3cOjhWWOZb58A2t7wpE2S9XfBYTiIl+XFhQG2bjy4Pu1I+EAlCNUzRDYDdFwFYUKvXcIA==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/@babel/code-frame": {
-      "version": "7.21.4",
-      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.21.4.tgz",
-      "integrity": "sha512-LYvhNKfwWSPpocw8GI7gpK2nq3HSDuEPC/uSYaALSJu9xjsalaaYFOq0Pwt5KmVqwEbZlDu81aLXwBOmD/Fv9g==",
-      "dev": true,
-      "dependencies": {
-        "@babel/highlight": "^7.18.6"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
-    "node_modules/@babel/helper-validator-identifier": {
-      "version": "7.19.1",
-      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.19.1.tgz",
-      "integrity": "sha512-awrNfaMtnHUr653GgGEs++LlAvW6w+DcPrOliSMXWCKo597CwL5Acf/wWdNkf/tfEQE3mjkeD1YOVZOUV/od1w==",
-      "dev": true,
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
-    "node_modules/@babel/highlight": {
-      "version": "7.18.6",
-      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.18.6.tgz",
-      "integrity": "sha512-u7stbOuYjaPezCuLj29hNW1v64M2Md2qupEKP1fHc7WdOA3DgLh37suiSrZYY7haUB7iBeQZ9P1uiRF359do3g==",
-      "dev": true,
-      "dependencies": {
-        "@babel/helper-validator-identifier": "^7.18.6",
-        "chalk": "^2.0.0",
-        "js-tokens": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=6.9.0"
-      }
-    },
-    "node_modules/@csstools/css-parser-algorithms": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/@csstools/css-parser-algorithms/-/css-parser-algorithms-2.1.1.tgz",
-      "integrity": "sha512-viRnRh02AgO4mwIQb2xQNJju0i+Fh9roNgmbR5xEuG7J3TGgxjnE95HnBLgsFJOJOksvcfxOUCgODcft6Y07cA==",
-      "dev": true,
-      "engines": {
-        "node": "^14 || ^16 || >=18"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/csstools"
-      },
-      "peerDependencies": {
-        "@csstools/css-tokenizer": "^2.1.1"
-      }
-    },
-    "node_modules/@csstools/css-tokenizer": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/@csstools/css-tokenizer/-/css-tokenizer-2.1.1.tgz",
-      "integrity": "sha512-GbrTj2Z8MCTUv+52GE0RbFGM527xuXZ0Xa5g0Z+YN573uveS4G0qi6WNOMyz3yrFM/jaILTTwJ0+umx81EzqfA==",
-      "dev": true,
-      "engines": {
-        "node": "^14 || ^16 || >=18"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/csstools"
-      }
-    },
-    "node_modules/@csstools/media-query-list-parser": {
-      "version": "2.0.4",
-      "resolved": "https://registry.npmjs.org/@csstools/media-query-list-parser/-/media-query-list-parser-2.0.4.tgz",
-      "integrity": "sha512-GyYot6jHgcSDZZ+tLSnrzkR7aJhF2ZW6d+CXH66mjy5WpAQhZD4HDke2OQ36SivGRWlZJpAz7TzbW6OKlEpxAA==",
-      "dev": true,
-      "engines": {
-        "node": "^14 || ^16 || >=18"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/csstools"
-      },
-      "peerDependencies": {
-        "@csstools/css-parser-algorithms": "^2.1.1",
-        "@csstools/css-tokenizer": "^2.1.1"
-      }
-    },
-    "node_modules/@csstools/selector-specificity": {
-      "version": "2.2.0",
-      "resolved": "https://registry.npmjs.org/@csstools/selector-specificity/-/selector-specificity-2.2.0.tgz",
-      "integrity": "sha512-+OJ9konv95ClSTOJCmMZqpd5+YGsB2S+x6w3E1oaM8UuR5j8nTNHYSz8c9BEPGDOCMQYIEEGlVPj/VY64iTbGw==",
-      "dev": true,
-      "engines": {
-        "node": "^14 || ^16 || >=18"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/csstools"
-      },
-      "peerDependencies": {
-        "postcss-selector-parser": "^6.0.10"
-      }
-    },
-    "node_modules/@eslint-community/eslint-utils": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.4.0.tgz",
-      "integrity": "sha512-1/sA4dwrzBAyeUoQ6oxahHKmrZvsnLCg4RfxW3ZFGGmQkSNQPFNLV9CUEFQP1x9EYXHTo5p6xdhZM1Ne9p/AfA==",
-      "dev": true,
-      "dependencies": {
-        "eslint-visitor-keys": "^3.3.0"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "peerDependencies": {
-        "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
-      }
-    },
-    "node_modules/@eslint-community/regexpp": {
-      "version": "4.5.1",
-      "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.5.1.tgz",
-      "integrity": "sha512-Z5ba73P98O1KUYCCJTUeVpja9RcGoMdncZ6T49FCUl2lN38JtCJ+3WgIDBv0AuY4WChU5PmtJmOCTlN6FZTFKQ==",
-      "dev": true,
-      "engines": {
-        "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
-      }
-    },
-    "node_modules/@eslint/eslintrc": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.0.3.tgz",
-      "integrity": "sha512-+5gy6OQfk+xx3q0d6jGZZC3f3KzAkXc/IanVxd1is/VIIziRqqt3ongQz0FiTUXqTk0c7aDB3OaFuKnuSoJicQ==",
-      "dev": true,
-      "dependencies": {
-        "ajv": "^6.12.4",
-        "debug": "^4.3.2",
-        "espree": "^9.5.2",
-        "globals": "^13.19.0",
-        "ignore": "^5.2.0",
-        "import-fresh": "^3.2.1",
-        "js-yaml": "^4.1.0",
-        "minimatch": "^3.1.2",
-        "strip-json-comments": "^3.1.1"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
-      }
-    },
-    "node_modules/@eslint/eslintrc/node_modules/ajv": {
-      "version": "6.12.6",
-      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
-      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
-      "dev": true,
-      "dependencies": {
-        "fast-deep-equal": "^3.1.1",
-        "fast-json-stable-stringify": "^2.0.0",
-        "json-schema-traverse": "^0.4.1",
-        "uri-js": "^4.2.2"
-      },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/epoberezkin"
-      }
-    },
-    "node_modules/@eslint/eslintrc/node_modules/json-schema-traverse": {
-      "version": "0.4.1",
-      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
-      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
-      "dev": true
-    },
-    "node_modules/@eslint/js": {
-      "version": "8.40.0",
-      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.40.0.tgz",
-      "integrity": "sha512-ElyB54bJIhXQYVKjDSvCkPO1iU1tSAeVQJbllWJq1XQSmmA4dgFk8CbiBGpiOPxleE48vDogxCtmMYku4HSVLA==",
-      "dev": true,
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      }
-    },
-    "node_modules/@humanwhocodes/config-array": {
-      "version": "0.11.8",
-      "resolved": "https://registry.npmjs.org/@humanwhocodes/config-array/-/config-array-0.11.8.tgz",
-      "integrity": "sha512-UybHIJzJnR5Qc/MsD9Kr+RpO2h+/P1GhOwdiLPXK5TWk5sgTdu88bTD9UP+CKbPPh5Rni1u0GjAdYQLemG8g+g==",
-      "dev": true,
-      "dependencies": {
-        "@humanwhocodes/object-schema": "^1.2.1",
-        "debug": "^4.1.1",
-        "minimatch": "^3.0.5"
-      },
-      "engines": {
-        "node": ">=10.10.0"
-      }
-    },
-    "node_modules/@humanwhocodes/module-importer": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/@humanwhocodes/module-importer/-/module-importer-1.0.1.tgz",
-      "integrity": "sha512-bxveV4V8v5Yb4ncFTT3rPSgZBOpCkjfK0y4oVVVJwIuDVBRMDXrPyXRL988i5ap9m9bnyEEjWfm5WkBmtffLfA==",
-      "dev": true,
-      "engines": {
-        "node": ">=12.22"
-      },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/nzakas"
-      }
-    },
-    "node_modules/@humanwhocodes/object-schema": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/@humanwhocodes/object-schema/-/object-schema-1.2.1.tgz",
-      "integrity": "sha512-ZnQMnLV4e7hDlUvw8H+U8ASL02SS2Gn6+9Ac3wGGLIe7+je2AeAOxPY+izIPJDfFDb7eDjev0Us8MO1iFRN8hA==",
-      "dev": true
-    },
-    "node_modules/@nodelib/fs.scandir": {
-      "version": "2.1.5",
-      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
-      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
-      "dev": true,
-      "dependencies": {
-        "@nodelib/fs.stat": "2.0.5",
-        "run-parallel": "^1.1.9"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/@nodelib/fs.stat": {
-      "version": "2.0.5",
-      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
-      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
-      "dev": true,
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/@nodelib/fs.walk": {
-      "version": "1.2.8",
-      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
-      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
-      "dev": true,
-      "dependencies": {
-        "@nodelib/fs.scandir": "2.1.5",
-        "fastq": "^1.6.0"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/@observablehq/plot": {
-      "version": "0.6.9",
-      "resolved": "https://registry.npmjs.org/@observablehq/plot/-/plot-0.6.9.tgz",
-      "integrity": "sha512-vwV6bzQsGjv2XrPEpc3Voixcz2e5EVvCSzzcs/uW9KXO5ZM8GdMVXtNTaRwYXUOk98nbiYFCFwzMaIyRjrt9IA==",
-      "dependencies": {
-        "d3": "^7.8.0",
-        "interval-tree-1d": "^1.0.0",
-        "isoformat": "^0.2.0"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/@types/json-schema": {
-      "version": "7.0.11",
-      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.11.tgz",
-      "integrity": "sha512-wOuvG1SN4Us4rez+tylwwwCV1psiNVOkJeM3AUWUNWg/jDQY2+HE/444y5gc+jBmRqASOm2Oeh5c1axHobwRKQ==",
-      "dev": true
-    },
-    "node_modules/@types/minimist": {
-      "version": "1.2.2",
-      "resolved": "https://registry.npmjs.org/@types/minimist/-/minimist-1.2.2.tgz",
-      "integrity": "sha512-jhuKLIRrhvCPLqwPcx6INqmKeiA5EWrsCOPhrlFSrbrmU4ZMPjj5Ul/oLCMDO98XRUIwVm78xICz4EPCektzeQ==",
-      "dev": true
-    },
-    "node_modules/@types/normalize-package-data": {
-      "version": "2.4.1",
-      "resolved": "https://registry.npmjs.org/@types/normalize-package-data/-/normalize-package-data-2.4.1.tgz",
-      "integrity": "sha512-Gj7cI7z+98M282Tqmp2K5EIsoouUEzbBJhQQzDE3jSIRk6r9gsz0oUokqIUR4u1R3dMHo0pDHM7sNOHyhulypw==",
-      "dev": true
-    },
-    "node_modules/@types/semver": {
-      "version": "7.5.0",
-      "resolved": "https://registry.npmjs.org/@types/semver/-/semver-7.5.0.tgz",
-      "integrity": "sha512-G8hZ6XJiHnuhQKR7ZmysCeJWE08o8T0AXtk5darsCaTVsYZhhgUrq53jizaR2FvsoeCwJhlmwTjkXBY5Pn/ZHw==",
-      "dev": true
-    },
-    "node_modules/@typescript-eslint/eslint-plugin": {
-      "version": "5.59.6",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.59.6.tgz",
-      "integrity": "sha512-sXtOgJNEuRU5RLwPUb1jxtToZbgvq3M6FPpY4QENxoOggK+UpTxUBpj6tD8+Qh2g46Pi9We87E+eHnUw8YcGsw==",
-      "dev": true,
-      "dependencies": {
-        "@eslint-community/regexpp": "^4.4.0",
-        "@typescript-eslint/scope-manager": "5.59.6",
-        "@typescript-eslint/type-utils": "5.59.6",
-        "@typescript-eslint/utils": "5.59.6",
-        "debug": "^4.3.4",
-        "grapheme-splitter": "^1.0.4",
-        "ignore": "^5.2.0",
-        "natural-compare-lite": "^1.4.0",
-        "semver": "^7.3.7",
-        "tsutils": "^3.21.0"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/typescript-eslint"
-      },
-      "peerDependencies": {
-        "@typescript-eslint/parser": "^5.0.0",
-        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
-      },
-      "peerDependenciesMeta": {
-        "typescript": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@typescript-eslint/parser": {
-      "version": "5.59.6",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-5.59.6.tgz",
-      "integrity": "sha512-7pCa6al03Pv1yf/dUg/s1pXz/yGMUBAw5EeWqNTFiSueKvRNonze3hma3lhdsOrQcaOXhbk5gKu2Fludiho9VA==",
-      "dev": true,
-      "dependencies": {
-        "@typescript-eslint/scope-manager": "5.59.6",
-        "@typescript-eslint/types": "5.59.6",
-        "@typescript-eslint/typescript-estree": "5.59.6",
-        "debug": "^4.3.4"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/typescript-eslint"
-      },
-      "peerDependencies": {
-        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
-      },
-      "peerDependenciesMeta": {
-        "typescript": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@typescript-eslint/scope-manager": {
-      "version": "5.59.6",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-5.59.6.tgz",
-      "integrity": "sha512-gLbY3Le9Dxcb8KdpF0+SJr6EQ+hFGYFl6tVY8VxLPFDfUZC7BHFw+Vq7bM5lE9DwWPfx4vMWWTLGXgpc0mAYyQ==",
-      "dev": true,
-      "dependencies": {
-        "@typescript-eslint/types": "5.59.6",
-        "@typescript-eslint/visitor-keys": "5.59.6"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/typescript-eslint"
-      }
-    },
-    "node_modules/@typescript-eslint/type-utils": {
-      "version": "5.59.6",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-5.59.6.tgz",
-      "integrity": "sha512-A4tms2Mp5yNvLDlySF+kAThV9VTBPCvGf0Rp8nl/eoDX9Okun8byTKoj3fJ52IJitjWOk0fKPNQhXEB++eNozQ==",
-      "dev": true,
-      "dependencies": {
-        "@typescript-eslint/typescript-estree": "5.59.6",
-        "@typescript-eslint/utils": "5.59.6",
-        "debug": "^4.3.4",
-        "tsutils": "^3.21.0"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/typescript-eslint"
-      },
-      "peerDependencies": {
-        "eslint": "*"
-      },
-      "peerDependenciesMeta": {
-        "typescript": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@typescript-eslint/types": {
-      "version": "5.59.6",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-5.59.6.tgz",
-      "integrity": "sha512-tH5lBXZI7T2MOUgOWFdVNUILsI02shyQvfzG9EJkoONWugCG77NDDa1EeDGw7oJ5IvsTAAGVV8I3Tk2PNu9QfA==",
-      "dev": true,
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/typescript-eslint"
-      }
-    },
-    "node_modules/@typescript-eslint/typescript-estree": {
-      "version": "5.59.6",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-5.59.6.tgz",
-      "integrity": "sha512-vW6JP3lMAs/Tq4KjdI/RiHaaJSO7IUsbkz17it/Rl9Q+WkQ77EOuOnlbaU8kKfVIOJxMhnRiBG+olE7f3M16DA==",
-      "dev": true,
-      "dependencies": {
-        "@typescript-eslint/types": "5.59.6",
-        "@typescript-eslint/visitor-keys": "5.59.6",
-        "debug": "^4.3.4",
-        "globby": "^11.1.0",
-        "is-glob": "^4.0.3",
-        "semver": "^7.3.7",
-        "tsutils": "^3.21.0"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/typescript-eslint"
-      },
-      "peerDependenciesMeta": {
-        "typescript": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/@typescript-eslint/utils": {
-      "version": "5.59.6",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-5.59.6.tgz",
-      "integrity": "sha512-vzaaD6EXbTS29cVH0JjXBdzMt6VBlv+hE31XktDRMX1j3462wZCJa7VzO2AxXEXcIl8GQqZPcOPuW/Z1tZVogg==",
-      "dev": true,
-      "dependencies": {
-        "@eslint-community/eslint-utils": "^4.2.0",
-        "@types/json-schema": "^7.0.9",
-        "@types/semver": "^7.3.12",
-        "@typescript-eslint/scope-manager": "5.59.6",
-        "@typescript-eslint/types": "5.59.6",
-        "@typescript-eslint/typescript-estree": "5.59.6",
-        "eslint-scope": "^5.1.1",
-        "semver": "^7.3.7"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/typescript-eslint"
-      },
-      "peerDependencies": {
-        "eslint": "^6.0.0 || ^7.0.0 || ^8.0.0"
-      }
-    },
-    "node_modules/@typescript-eslint/visitor-keys": {
-      "version": "5.59.6",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-5.59.6.tgz",
-      "integrity": "sha512-zEfbFLzB9ETcEJ4HZEEsCR9HHeNku5/Qw1jSS5McYJv5BR+ftYXwFFAH5Al+xkGaZEqowMwl7uoJjQb1YSPF8Q==",
-      "dev": true,
-      "dependencies": {
-        "@typescript-eslint/types": "5.59.6",
-        "eslint-visitor-keys": "^3.3.0"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/typescript-eslint"
-      }
-    },
-    "node_modules/acorn": {
-      "version": "8.8.2",
-      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.2.tgz",
-      "integrity": "sha512-xjIYgE8HBrkpd/sJqOGNspf8uHG+NOHGOw6a/Urj8taM2EXfdNAH2oFcPeIFfsv3+kz/mJrS5VuMqbNLjCa2vw==",
-      "dev": true,
-      "bin": {
-        "acorn": "bin/acorn"
-      },
-      "engines": {
-        "node": ">=0.4.0"
-      }
-    },
-    "node_modules/acorn-jsx": {
-      "version": "5.3.2",
-      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
-      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
-      "dev": true,
-      "peerDependencies": {
-        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
-      }
-    },
-    "node_modules/ajv": {
-      "version": "8.12.0",
-      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.12.0.tgz",
-      "integrity": "sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==",
-      "dev": true,
-      "dependencies": {
-        "fast-deep-equal": "^3.1.1",
-        "json-schema-traverse": "^1.0.0",
-        "require-from-string": "^2.0.2",
-        "uri-js": "^4.2.2"
-      },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/epoberezkin"
-      }
-    },
-    "node_modules/ansi-regex": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
-      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/ansi-styles": {
-      "version": "3.2.1",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
-      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
-      "dev": true,
-      "dependencies": {
-        "color-convert": "^1.9.0"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/argparse": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
-      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
-      "dev": true
-    },
-    "node_modules/array-buffer-byte-length": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.0.tgz",
-      "integrity": "sha512-LPuwb2P+NrQw3XhxGc36+XSvuBPopovXYTR9Ew++Du9Yb/bx5AzBfrIsBoj0EZUifjQU+sHL21sseZ3jerWO/A==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "is-array-buffer": "^3.0.1"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/array-union": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/array-union/-/array-union-2.1.0.tgz",
-      "integrity": "sha512-HGyxoOTYUyCM6stUe6EJgnd4EoewAI7zMdfqO+kGjnlZmBDz/cR5pf8r/cR4Wq60sL/p0IkcjUEEPwS3GFrIyw==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/arrify": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/arrify/-/arrify-1.0.1.tgz",
-      "integrity": "sha512-3CYzex9M9FGQjCGMGyi6/31c8GJbgb0qGyrx5HWxPd0aCwh4cB2YjMb2Xf9UuoogrMrlO9cTqnB5rI5GHZTcUA==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/astral-regex": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/astral-regex/-/astral-regex-2.0.0.tgz",
-      "integrity": "sha512-Z7tMw1ytTXt5jqMcOP+OQteU1VuNK9Y02uuJtKQ1Sv69jXQKKg5cibLwGJow8yzZP+eAc18EmLGPal0bp36rvQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/available-typed-arrays": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.5.tgz",
-      "integrity": "sha512-DMD0KiN46eipeziST1LPP/STfDU0sufISXmjSgvVsoU2tqxctQeASejWcfNtxYKqETM1UxQ8sp2OrSBWpHY6sw==",
-      "dev": true,
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/balanced-match": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-2.0.0.tgz",
-      "integrity": "sha512-1ugUSr8BHXRnK23KfuYS+gVMC3LB8QGH9W1iGtDPsNWoQbgtXSExkBu2aDR4epiGWZOjZsj6lDl/N/AqqTC3UA==",
-      "dev": true
-    },
-    "node_modules/binary-search-bounds": {
-      "version": "2.0.5",
-      "resolved": "https://registry.npmjs.org/binary-search-bounds/-/binary-search-bounds-2.0.5.tgz",
-      "integrity": "sha512-H0ea4Fd3lS1+sTEB2TgcLoK21lLhwEJzlQv3IN47pJS976Gx4zoWe0ak3q+uYh60ppQxg9F16Ri4tS1sfD4+jA=="
-    },
-    "node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
-    "node_modules/brace-expansion/node_modules/balanced-match": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
-      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
-      "dev": true
-    },
-    "node_modules/braces": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
-      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
-      "dev": true,
-      "dependencies": {
-        "fill-range": "^7.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/call-bind": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.2.tgz",
-      "integrity": "sha512-7O+FbCihrB5WGbFYesctwmTKae6rOiIzmz1icreWJ+0aA7LJfuqhEso2T9ncpcFtzMQtzXf2QGGueWJGTYsqrA==",
-      "dev": true,
-      "dependencies": {
-        "function-bind": "^1.1.1",
-        "get-intrinsic": "^1.0.2"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/callsites": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
-      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/camelcase": {
-      "version": "5.3.1",
-      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
-      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
-      "dev": true,
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/camelcase-keys": {
-      "version": "6.2.2",
-      "resolved": "https://registry.npmjs.org/camelcase-keys/-/camelcase-keys-6.2.2.tgz",
-      "integrity": "sha512-YrwaA0vEKazPBkn0ipTiMpSajYDSe+KjQfrjhcBMxJt/znbvlHd8Pw/Vamaz5EB4Wfhs3SUR3Z9mwRu/P3s3Yg==",
-      "dev": true,
-      "dependencies": {
-        "camelcase": "^5.3.1",
-        "map-obj": "^4.0.0",
-        "quick-lru": "^4.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/chalk": {
-      "version": "2.4.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
-      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
-      "dev": true,
-      "dependencies": {
-        "ansi-styles": "^3.2.1",
-        "escape-string-regexp": "^1.0.5",
-        "supports-color": "^5.3.0"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/color-convert": {
-      "version": "1.9.3",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
-      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
-      "dev": true,
-      "dependencies": {
-        "color-name": "1.1.3"
-      }
-    },
-    "node_modules/color-name": {
-      "version": "1.1.3",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
-      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
-      "dev": true
-    },
-    "node_modules/colord": {
-      "version": "2.9.3",
-      "resolved": "https://registry.npmjs.org/colord/-/colord-2.9.3.tgz",
-      "integrity": "sha512-jeC1axXpnb0/2nn/Y1LPuLdgXBLH7aDcHu4KEKfqw3CUhX7ZpfBSlPKyqXE6btIgEzfWtrX3/tyBCaCvXvMkOw==",
-      "dev": true
-    },
-    "node_modules/commander": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/commander/-/commander-7.2.0.tgz",
-      "integrity": "sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==",
-      "engines": {
-        "node": ">= 10"
-      }
-    },
-    "node_modules/concat-map": {
-      "version": "0.0.1",
-      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
-      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
-      "dev": true
-    },
-    "node_modules/cosmiconfig": {
-      "version": "8.1.3",
-      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-8.1.3.tgz",
-      "integrity": "sha512-/UkO2JKI18b5jVMJUp0lvKFMpa/Gye+ZgZjKD+DGEN9y7NRcf/nK1A0sp67ONmKtnDCNMS44E6jrk0Yc3bDuUw==",
-      "dev": true,
-      "dependencies": {
-        "import-fresh": "^3.2.1",
-        "js-yaml": "^4.1.0",
-        "parse-json": "^5.0.0",
-        "path-type": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=14"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/d-fischer"
-      }
-    },
-    "node_modules/cross-spawn": {
-      "version": "7.0.3",
-      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
-      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
-      "dev": true,
-      "dependencies": {
-        "path-key": "^3.1.0",
-        "shebang-command": "^2.0.0",
-        "which": "^2.0.1"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/cross-spawn/node_modules/which": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
-      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
-      "dev": true,
-      "dependencies": {
-        "isexe": "^2.0.0"
-      },
-      "bin": {
-        "node-which": "bin/node-which"
-      },
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/css-functions-list": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/css-functions-list/-/css-functions-list-3.1.0.tgz",
-      "integrity": "sha512-/9lCvYZaUbBGvYUgYGFJ4dcYiyqdhSjG7IPVluoV8A1ILjkF7ilmhp1OGUz8n+nmBcu0RNrQAzgD8B6FJbrt2w==",
-      "dev": true,
-      "engines": {
-        "node": ">=12.22"
-      }
-    },
-    "node_modules/css-tree": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-2.3.1.tgz",
-      "integrity": "sha512-6Fv1DV/TYw//QF5IzQdqsNDjx/wc8TrMBZsqjL9eW01tWb7R7k/mq+/VXfJCl7SoD5emsJop9cOByJZfs8hYIw==",
-      "dev": true,
-      "dependencies": {
-        "mdn-data": "2.0.30",
-        "source-map-js": "^1.0.1"
-      },
-      "engines": {
-        "node": "^10 || ^12.20.0 || ^14.13.0 || >=15.0.0"
-      }
-    },
-    "node_modules/cssesc": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/cssesc/-/cssesc-3.0.0.tgz",
-      "integrity": "sha512-/Tb/JcjK111nNScGob5MNtsntNM1aCNUDipB/TkwZFhyDrrE47SOx/18wF2bbjgc3ZzCSKW1T5nt5EbFoAz/Vg==",
-      "dev": true,
-      "bin": {
-        "cssesc": "bin/cssesc"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/d3": {
-      "version": "7.8.5",
-      "resolved": "https://registry.npmjs.org/d3/-/d3-7.8.5.tgz",
-      "integrity": "sha512-JgoahDG51ncUfJu6wX/1vWQEqOflgXyl4MaHqlcSruTez7yhaRKR9i8VjjcQGeS2en/jnFivXuaIMnseMMt0XA==",
-      "dependencies": {
-        "d3-array": "3",
-        "d3-axis": "3",
-        "d3-brush": "3",
-        "d3-chord": "3",
-        "d3-color": "3",
-        "d3-contour": "4",
-        "d3-delaunay": "6",
-        "d3-dispatch": "3",
-        "d3-drag": "3",
-        "d3-dsv": "3",
-        "d3-ease": "3",
-        "d3-fetch": "3",
-        "d3-force": "3",
-        "d3-format": "3",
-        "d3-geo": "3",
-        "d3-hierarchy": "3",
-        "d3-interpolate": "3",
-        "d3-path": "3",
-        "d3-polygon": "3",
-        "d3-quadtree": "3",
-        "d3-random": "3",
-        "d3-scale": "4",
-        "d3-scale-chromatic": "3",
-        "d3-selection": "3",
-        "d3-shape": "3",
-        "d3-time": "3",
-        "d3-time-format": "4",
-        "d3-timer": "3",
-        "d3-transition": "3",
-        "d3-zoom": "3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-array": {
-      "version": "3.2.3",
-      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.3.tgz",
-      "integrity": "sha512-JRHwbQQ84XuAESWhvIPaUV4/1UYTBOLiOPGWqgFDHZS1D5QN9c57FbH3QpEnQMYiOXNzKUQyGTZf+EVO7RT5TQ==",
-      "dependencies": {
-        "internmap": "1 - 2"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-axis": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/d3-axis/-/d3-axis-3.0.0.tgz",
-      "integrity": "sha512-IH5tgjV4jE/GhHkRV0HiVYPDtvfjHQlQfJHs0usq7M30XcSBvOotpmH1IgkcXsO/5gEQZD43B//fc7SRT5S+xw==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-brush": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/d3-brush/-/d3-brush-3.0.0.tgz",
-      "integrity": "sha512-ALnjWlVYkXsVIGlOsuWH1+3udkYFI48Ljihfnh8FZPF2QS9o+PzGLBslO0PjzVoHLZ2KCVgAM8NVkXPJB2aNnQ==",
-      "dependencies": {
-        "d3-dispatch": "1 - 3",
-        "d3-drag": "2 - 3",
-        "d3-interpolate": "1 - 3",
-        "d3-selection": "3",
-        "d3-transition": "3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-chord": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-chord/-/d3-chord-3.0.1.tgz",
-      "integrity": "sha512-VE5S6TNa+j8msksl7HwjxMHDM2yNK3XCkusIlpX5kwauBfXuyLAtNg9jCp/iHH61tgI4sb6R/EIMWCqEIdjT/g==",
-      "dependencies": {
-        "d3-path": "1 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-color": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
-      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-contour": {
-      "version": "4.0.2",
-      "resolved": "https://registry.npmjs.org/d3-contour/-/d3-contour-4.0.2.tgz",
-      "integrity": "sha512-4EzFTRIikzs47RGmdxbeUvLWtGedDUNkTcmzoeyg4sP/dvCexO47AaQL7VKy/gul85TOxw+IBgA8US2xwbToNA==",
-      "dependencies": {
-        "d3-array": "^3.2.0"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-delaunay": {
-      "version": "6.0.4",
-      "resolved": "https://registry.npmjs.org/d3-delaunay/-/d3-delaunay-6.0.4.tgz",
-      "integrity": "sha512-mdjtIZ1XLAM8bm/hx3WwjfHt6Sggek7qH043O8KEjDXN40xi3vx/6pYSVTwLjEgiXQTbvaouWKynLBiUZ6SK6A==",
-      "dependencies": {
-        "delaunator": "5"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-dispatch": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-dispatch/-/d3-dispatch-3.0.1.tgz",
-      "integrity": "sha512-rzUyPU/S7rwUflMyLc1ETDeBj0NRuHKKAcvukozwhshr6g6c5d8zh4c2gQjY2bZ0dXeGLWc1PF174P2tVvKhfg==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-drag": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/d3-drag/-/d3-drag-3.0.0.tgz",
-      "integrity": "sha512-pWbUJLdETVA8lQNJecMxoXfH6x+mO2UQo8rSmZ+QqxcbyA3hfeprFgIT//HW2nlHChWeIIMwS2Fq+gEARkhTkg==",
-      "dependencies": {
-        "d3-dispatch": "1 - 3",
-        "d3-selection": "3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-dsv": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-dsv/-/d3-dsv-3.0.1.tgz",
-      "integrity": "sha512-UG6OvdI5afDIFP9w4G0mNq50dSOsXHJaRE8arAS5o9ApWnIElp8GZw1Dun8vP8OyHOZ/QJUKUJwxiiCCnUwm+Q==",
-      "dependencies": {
-        "commander": "7",
-        "iconv-lite": "0.6",
-        "rw": "1"
-      },
-      "bin": {
-        "csv2json": "bin/dsv2json.js",
-        "csv2tsv": "bin/dsv2dsv.js",
-        "dsv2dsv": "bin/dsv2dsv.js",
-        "dsv2json": "bin/dsv2json.js",
-        "json2csv": "bin/json2dsv.js",
-        "json2dsv": "bin/json2dsv.js",
-        "json2tsv": "bin/json2dsv.js",
-        "tsv2csv": "bin/dsv2dsv.js",
-        "tsv2json": "bin/dsv2json.js"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-ease": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
-      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-fetch": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-fetch/-/d3-fetch-3.0.1.tgz",
-      "integrity": "sha512-kpkQIM20n3oLVBKGg6oHrUchHM3xODkTzjMoj7aWQFq5QEM+R6E4WkzT5+tojDY7yjez8KgCBRoj4aEr99Fdqw==",
-      "dependencies": {
-        "d3-dsv": "1 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-force": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/d3-force/-/d3-force-3.0.0.tgz",
-      "integrity": "sha512-zxV/SsA+U4yte8051P4ECydjD/S+qeYtnaIyAs9tgHCqfguma/aAQDjo85A9Z6EKhBirHRJHXIgJUlffT4wdLg==",
-      "dependencies": {
-        "d3-dispatch": "1 - 3",
-        "d3-quadtree": "1 - 3",
-        "d3-timer": "1 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-format": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
-      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-geo": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/d3-geo/-/d3-geo-3.1.0.tgz",
-      "integrity": "sha512-JEo5HxXDdDYXCaWdwLRt79y7giK8SbhZJbFWXqbRTolCHFI5jRqteLzCsq51NKbUoX0PjBVSohxrx+NoOUujYA==",
-      "dependencies": {
-        "d3-array": "2.5.0 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-hierarchy": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/d3-hierarchy/-/d3-hierarchy-3.1.2.tgz",
-      "integrity": "sha512-FX/9frcub54beBdugHjDCdikxThEqjnR93Qt7PvQTOHxyiNCAlvMrHhclk3cD5VeAaq9fxmfRp+CnWw9rEMBuA==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-interpolate": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
-      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
-      "dependencies": {
-        "d3-color": "1 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-path": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
-      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-polygon": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-polygon/-/d3-polygon-3.0.1.tgz",
-      "integrity": "sha512-3vbA7vXYwfe1SYhED++fPUQlWSYTTGmFmQiany/gdbiWgU/iEyQzyymwL9SkJjFFuCS4902BSzewVGsHHmHtXg==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-quadtree": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-quadtree/-/d3-quadtree-3.0.1.tgz",
-      "integrity": "sha512-04xDrxQTDTCFwP5H6hRhsRcb9xxv2RzkcsygFzmkSIOJy3PeRJP7sNk3VRIbKXcog561P9oU0/rVH6vDROAgUw==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-random": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-random/-/d3-random-3.0.1.tgz",
-      "integrity": "sha512-FXMe9GfxTxqd5D6jFsQ+DJ8BJS4E/fT5mqqdjovykEB2oFbTMDVdg1MGFxfQW+FBOGoB++k8swBrgwSHT1cUXQ==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-scale": {
-      "version": "4.0.2",
-      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
-      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
-      "dependencies": {
-        "d3-array": "2.10.0 - 3",
-        "d3-format": "1 - 3",
-        "d3-interpolate": "1.2.0 - 3",
-        "d3-time": "2.1.1 - 3",
-        "d3-time-format": "2 - 4"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-scale-chromatic": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/d3-scale-chromatic/-/d3-scale-chromatic-3.0.0.tgz",
-      "integrity": "sha512-Lx9thtxAKrO2Pq6OO2Ua474opeziKr279P/TKZsMAhYyNDD3EnCffdbgeSYN5O7m2ByQsxtuP2CSDczNUIZ22g==",
-      "dependencies": {
-        "d3-color": "1 - 3",
-        "d3-interpolate": "1 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-selection": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/d3-selection/-/d3-selection-3.0.0.tgz",
-      "integrity": "sha512-fmTRWbNMmsmWq6xJV8D19U/gw/bwrHfNXxrIN+HfZgnzqTHp9jOmKMhsTUjXOJnZOdZY9Q28y4yebKzqDKlxlQ==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-shape": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
-      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
-      "dependencies": {
-        "d3-path": "^3.1.0"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-time": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
-      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
-      "dependencies": {
-        "d3-array": "2 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-time-format": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
-      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
-      "dependencies": {
-        "d3-time": "1 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-timer": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
-      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/d3-transition": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/d3-transition/-/d3-transition-3.0.1.tgz",
-      "integrity": "sha512-ApKvfjsSR6tg06xrL434C0WydLr7JewBB3V+/39RMHsaXTOG0zmt/OAXeng5M5LBm0ojmxJrpomQVZ1aPvBL4w==",
-      "dependencies": {
-        "d3-color": "1 - 3",
-        "d3-dispatch": "1 - 3",
-        "d3-ease": "1 - 3",
-        "d3-interpolate": "1 - 3",
-        "d3-timer": "1 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "peerDependencies": {
-        "d3-selection": "2 - 3"
-      }
-    },
-    "node_modules/d3-zoom": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/d3-zoom/-/d3-zoom-3.0.0.tgz",
-      "integrity": "sha512-b8AmV3kfQaqWAuacbPuNbL6vahnOJflOhexLzMMNLga62+/nh0JzvJ0aO/5a5MVgUFGS7Hu1P9P03o3fJkDCyw==",
-      "dependencies": {
-        "d3-dispatch": "1 - 3",
-        "d3-drag": "2 - 3",
-        "d3-interpolate": "1 - 3",
-        "d3-selection": "2 - 3",
-        "d3-transition": "2 - 3"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/debug": {
-      "version": "4.3.4",
-      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
-      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
-      "dev": true,
-      "dependencies": {
-        "ms": "2.1.2"
-      },
-      "engines": {
-        "node": ">=6.0"
-      },
-      "peerDependenciesMeta": {
-        "supports-color": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/decamelize": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
-      "integrity": "sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/decamelize-keys": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/decamelize-keys/-/decamelize-keys-1.1.1.tgz",
-      "integrity": "sha512-WiPxgEirIV0/eIOMcnFBA3/IJZAZqKnwAwWyvvdi4lsr1WCN22nhdf/3db3DoZcUjTV2SqfzIwNyp6y2xs3nmg==",
-      "dev": true,
-      "dependencies": {
-        "decamelize": "^1.1.0",
-        "map-obj": "^1.0.0"
-      },
-      "engines": {
-        "node": ">=0.10.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/decamelize-keys/node_modules/map-obj": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/map-obj/-/map-obj-1.0.1.tgz",
-      "integrity": "sha512-7N/q3lyZ+LVCp7PzuxrJr4KMbBE2hW7BT7YNia330OFxIf4d3r5zVpicP2650l7CPN6RM9zOJRl3NGpqSiw3Eg==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/deep-is": {
-      "version": "0.1.4",
-      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
-      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
-      "dev": true
-    },
-    "node_modules/define-properties": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.0.tgz",
-      "integrity": "sha512-xvqAVKGfT1+UAvPwKTVw/njhdQ8ZhXK4lI0bCIuCMrp2up9nPnaDftrLtmpTazqd1o+UY4zgzU+avtMbDP+ldA==",
-      "dev": true,
-      "dependencies": {
-        "has-property-descriptors": "^1.0.0",
-        "object-keys": "^1.1.1"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/delaunator": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/delaunator/-/delaunator-5.0.0.tgz",
-      "integrity": "sha512-AyLvtyJdbv/U1GkiS6gUUzclRoAY4Gs75qkMygJJhU75LW4DNuSF2RMzpxs9jw9Oz1BobHjTdkG3zdP55VxAqw==",
-      "dependencies": {
-        "robust-predicates": "^3.0.0"
-      }
-    },
-    "node_modules/dir-glob": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
-      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
-      "dev": true,
-      "dependencies": {
-        "path-type": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/doctrine": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
-      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
-      "dev": true,
-      "dependencies": {
-        "esutils": "^2.0.2"
-      },
-      "engines": {
-        "node": ">=6.0.0"
-      }
-    },
-    "node_modules/emoji-regex": {
-      "version": "8.0.0",
-      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
-      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
-      "dev": true
-    },
-    "node_modules/error-ex": {
-      "version": "1.3.2",
-      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
-      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
-      "dev": true,
-      "dependencies": {
-        "is-arrayish": "^0.2.1"
-      }
-    },
-    "node_modules/es-abstract": {
-      "version": "1.21.2",
-      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.21.2.tgz",
-      "integrity": "sha512-y/B5POM2iBnIxCiernH1G7rC9qQoM77lLIMQLuob0zhp8C56Po81+2Nj0WFKnd0pNReDTnkYryc+zhOzpEIROg==",
-      "dev": true,
-      "dependencies": {
-        "array-buffer-byte-length": "^1.0.0",
-        "available-typed-arrays": "^1.0.5",
-        "call-bind": "^1.0.2",
-        "es-set-tostringtag": "^2.0.1",
-        "es-to-primitive": "^1.2.1",
-        "function.prototype.name": "^1.1.5",
-        "get-intrinsic": "^1.2.0",
-        "get-symbol-description": "^1.0.0",
-        "globalthis": "^1.0.3",
-        "gopd": "^1.0.1",
-        "has": "^1.0.3",
-        "has-property-descriptors": "^1.0.0",
-        "has-proto": "^1.0.1",
-        "has-symbols": "^1.0.3",
-        "internal-slot": "^1.0.5",
-        "is-array-buffer": "^3.0.2",
-        "is-callable": "^1.2.7",
-        "is-negative-zero": "^2.0.2",
-        "is-regex": "^1.1.4",
-        "is-shared-array-buffer": "^1.0.2",
-        "is-string": "^1.0.7",
-        "is-typed-array": "^1.1.10",
-        "is-weakref": "^1.0.2",
-        "object-inspect": "^1.12.3",
-        "object-keys": "^1.1.1",
-        "object.assign": "^4.1.4",
-        "regexp.prototype.flags": "^1.4.3",
-        "safe-regex-test": "^1.0.0",
-        "string.prototype.trim": "^1.2.7",
-        "string.prototype.trimend": "^1.0.6",
-        "string.prototype.trimstart": "^1.0.6",
-        "typed-array-length": "^1.0.4",
-        "unbox-primitive": "^1.0.2",
-        "which-typed-array": "^1.1.9"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/es-set-tostringtag": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.0.1.tgz",
-      "integrity": "sha512-g3OMbtlwY3QewlqAiMLI47KywjWZoEytKr8pf6iTC8uJq5bIAH52Z9pnQ8pVL6whrCto53JZDuUIsifGeLorTg==",
-      "dev": true,
-      "dependencies": {
-        "get-intrinsic": "^1.1.3",
-        "has": "^1.0.3",
-        "has-tostringtag": "^1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/es-to-primitive": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/es-to-primitive/-/es-to-primitive-1.2.1.tgz",
-      "integrity": "sha512-QCOllgZJtaUo9miYBcLChTUaHNjJF3PYs1VidD7AwiEj1kYxKeQTctLAezAOH5ZKRH0g2IgPn6KwB4IT8iRpvA==",
-      "dev": true,
-      "dependencies": {
-        "is-callable": "^1.1.4",
-        "is-date-object": "^1.0.1",
-        "is-symbol": "^1.0.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/escape-string-regexp": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
-      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.8.0"
-      }
-    },
-    "node_modules/eslint": {
-      "version": "8.40.0",
-      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.40.0.tgz",
-      "integrity": "sha512-bvR+TsP9EHL3TqNtj9sCNJVAFK3fBN8Q7g5waghxyRsPLIMwL73XSKnZFK0hk/O2ANC+iAoq6PWMQ+IfBAJIiQ==",
-      "dev": true,
-      "dependencies": {
-        "@eslint-community/eslint-utils": "^4.2.0",
-        "@eslint-community/regexpp": "^4.4.0",
-        "@eslint/eslintrc": "^2.0.3",
-        "@eslint/js": "8.40.0",
-        "@humanwhocodes/config-array": "^0.11.8",
-        "@humanwhocodes/module-importer": "^1.0.1",
-        "@nodelib/fs.walk": "^1.2.8",
-        "ajv": "^6.10.0",
-        "chalk": "^4.0.0",
-        "cross-spawn": "^7.0.2",
-        "debug": "^4.3.2",
-        "doctrine": "^3.0.0",
-        "escape-string-regexp": "^4.0.0",
-        "eslint-scope": "^7.2.0",
-        "eslint-visitor-keys": "^3.4.1",
-        "espree": "^9.5.2",
-        "esquery": "^1.4.2",
-        "esutils": "^2.0.2",
-        "fast-deep-equal": "^3.1.3",
-        "file-entry-cache": "^6.0.1",
-        "find-up": "^5.0.0",
-        "glob-parent": "^6.0.2",
-        "globals": "^13.19.0",
-        "grapheme-splitter": "^1.0.4",
-        "ignore": "^5.2.0",
-        "import-fresh": "^3.0.0",
-        "imurmurhash": "^0.1.4",
-        "is-glob": "^4.0.0",
-        "is-path-inside": "^3.0.3",
-        "js-sdsl": "^4.1.4",
-        "js-yaml": "^4.1.0",
-        "json-stable-stringify-without-jsonify": "^1.0.1",
-        "levn": "^0.4.1",
-        "lodash.merge": "^4.6.2",
-        "minimatch": "^3.1.2",
-        "natural-compare": "^1.4.0",
-        "optionator": "^0.9.1",
-        "strip-ansi": "^6.0.1",
-        "strip-json-comments": "^3.1.0",
-        "text-table": "^0.2.0"
-      },
-      "bin": {
-        "eslint": "bin/eslint.js"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
-      }
-    },
-    "node_modules/eslint-config-prettier": {
-      "version": "8.8.0",
-      "resolved": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-8.8.0.tgz",
-      "integrity": "sha512-wLbQiFre3tdGgpDv67NQKnJuTlcUVYHas3k+DZCc2U2BadthoEY4B7hLPvAxaqdyOGCzuLfii2fqGph10va7oA==",
-      "dev": true,
-      "bin": {
-        "eslint-config-prettier": "bin/cli.js"
-      },
-      "peerDependencies": {
-        "eslint": ">=7.0.0"
-      }
-    },
-    "node_modules/eslint-scope": {
-      "version": "5.1.1",
-      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.1.1.tgz",
-      "integrity": "sha512-2NxwbF/hZ0KpepYN0cNbo+FN6XoK7GaHlQhgx/hIZl6Va0bF45RQOOwhLIy8lQDbuCiadSLCBnH2CFYquit5bw==",
-      "dev": true,
-      "dependencies": {
-        "esrecurse": "^4.3.0",
-        "estraverse": "^4.1.1"
-      },
-      "engines": {
-        "node": ">=8.0.0"
-      }
-    },
-    "node_modules/eslint-visitor-keys": {
-      "version": "3.4.1",
-      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.1.tgz",
-      "integrity": "sha512-pZnmmLwYzf+kWaM/Qgrvpen51upAktaaiI01nsJD/Yr3lMOdNtq0cxkrrg16w64VtisN6okbs7Q8AfGqj4c9fA==",
-      "dev": true,
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
-      }
-    },
-    "node_modules/eslint/node_modules/ajv": {
-      "version": "6.12.6",
-      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.6.tgz",
-      "integrity": "sha512-j3fVLgvTo527anyYyJOGTYJbG+vnnQYvE0m5mmkc1TK+nxAppkCLMIL0aZ4dblVCNoGShhm+kzE4ZUykBoMg4g==",
-      "dev": true,
-      "dependencies": {
-        "fast-deep-equal": "^3.1.1",
-        "fast-json-stable-stringify": "^2.0.0",
-        "json-schema-traverse": "^0.4.1",
-        "uri-js": "^4.2.2"
-      },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/epoberezkin"
-      }
-    },
-    "node_modules/eslint/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/eslint/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dev": true,
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/eslint/node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "dev": true,
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/eslint/node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
-      "dev": true
-    },
-    "node_modules/eslint/node_modules/escape-string-regexp": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
-      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
-      "dev": true,
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/eslint/node_modules/eslint-scope": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.0.tgz",
-      "integrity": "sha512-DYj5deGlHBfMt15J7rdtyKNq/Nqlv5KfU4iodrQ019XESsRnwXH9KAE0y3cwtUHDo2ob7CypAnCqefh6vioWRw==",
-      "dev": true,
-      "dependencies": {
-        "esrecurse": "^4.3.0",
-        "estraverse": "^5.2.0"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
-      }
-    },
-    "node_modules/eslint/node_modules/estraverse": {
-      "version": "5.3.0",
-      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
-      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
-      "dev": true,
-      "engines": {
-        "node": ">=4.0"
-      }
-    },
-    "node_modules/eslint/node_modules/find-up": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
-      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
-      "dev": true,
-      "dependencies": {
-        "locate-path": "^6.0.0",
-        "path-exists": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/eslint/node_modules/glob-parent": {
-      "version": "6.0.2",
-      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-6.0.2.tgz",
-      "integrity": "sha512-XxwI8EOhVQgWp6iDL+3b0r86f4d6AX6zSU55HfB4ydCEuXLXc5FcYeOu+nnGftS4TEju/11rt4KJPTMgbfmv4A==",
-      "dev": true,
-      "dependencies": {
-        "is-glob": "^4.0.3"
-      },
-      "engines": {
-        "node": ">=10.13.0"
-      }
-    },
-    "node_modules/eslint/node_modules/has-flag": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
-      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/eslint/node_modules/json-schema-traverse": {
-      "version": "0.4.1",
-      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
-      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
-      "dev": true
-    },
-    "node_modules/eslint/node_modules/locate-path": {
-      "version": "6.0.0",
-      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
-      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
-      "dev": true,
-      "dependencies": {
-        "p-locate": "^5.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/eslint/node_modules/p-limit": {
-      "version": "3.1.0",
-      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
-      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
-      "dev": true,
-      "dependencies": {
-        "yocto-queue": "^0.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/eslint/node_modules/p-locate": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
-      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
-      "dev": true,
-      "dependencies": {
-        "p-limit": "^3.0.2"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/eslint/node_modules/supports-color": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
-      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
-      "dev": true,
-      "dependencies": {
-        "has-flag": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/espree": {
-      "version": "9.5.2",
-      "resolved": "https://registry.npmjs.org/espree/-/espree-9.5.2.tgz",
-      "integrity": "sha512-7OASN1Wma5fum5SrNhFMAMJxOUAbhyfQ8dQ//PJaJbNw0URTPWqIghHWt1MmAANKhHZIYOHruW4Kw4ruUWOdGw==",
-      "dev": true,
-      "dependencies": {
-        "acorn": "^8.8.0",
-        "acorn-jsx": "^5.3.2",
-        "eslint-visitor-keys": "^3.4.1"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
-      }
-    },
-    "node_modules/esquery": {
-      "version": "1.5.0",
-      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.5.0.tgz",
-      "integrity": "sha512-YQLXUplAwJgCydQ78IMJywZCceoqk1oH01OERdSAJc/7U2AylwjhSCLDEtqwg811idIS/9fIU5GjG73IgjKMVg==",
-      "dev": true,
-      "dependencies": {
-        "estraverse": "^5.1.0"
-      },
-      "engines": {
-        "node": ">=0.10"
-      }
-    },
-    "node_modules/esquery/node_modules/estraverse": {
-      "version": "5.3.0",
-      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
-      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
-      "dev": true,
-      "engines": {
-        "node": ">=4.0"
-      }
-    },
-    "node_modules/esrecurse": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.3.0.tgz",
-      "integrity": "sha512-KmfKL3b6G+RXvP8N1vr3Tq1kL/oCFgn2NYXEtqP8/L3pKapUA4G8cFVaoF3SU323CD4XypR/ffioHmkti6/Tag==",
-      "dev": true,
-      "dependencies": {
-        "estraverse": "^5.2.0"
-      },
-      "engines": {
-        "node": ">=4.0"
-      }
-    },
-    "node_modules/esrecurse/node_modules/estraverse": {
-      "version": "5.3.0",
-      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
-      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
-      "dev": true,
-      "engines": {
-        "node": ">=4.0"
-      }
-    },
-    "node_modules/estraverse": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
-      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
-      "dev": true,
-      "engines": {
-        "node": ">=4.0"
-      }
-    },
-    "node_modules/esutils": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
-      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/fast-deep-equal": {
-      "version": "3.1.3",
-      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
-      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
-      "dev": true
-    },
-    "node_modules/fast-glob": {
-      "version": "3.2.12",
-      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.12.tgz",
-      "integrity": "sha512-DVj4CQIYYow0BlaelwK1pHl5n5cRSJfM60UA0zK891sVInoPri2Ekj7+e1CT3/3qxXenpI+nBBmQAcJPJgaj4w==",
-      "dev": true,
-      "dependencies": {
-        "@nodelib/fs.stat": "^2.0.2",
-        "@nodelib/fs.walk": "^1.2.3",
-        "glob-parent": "^5.1.2",
-        "merge2": "^1.3.0",
-        "micromatch": "^4.0.4"
-      },
-      "engines": {
-        "node": ">=8.6.0"
-      }
-    },
-    "node_modules/fast-json-stable-stringify": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
-      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
-      "dev": true
-    },
-    "node_modules/fast-levenshtein": {
-      "version": "2.0.6",
-      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
-      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
-      "dev": true
-    },
-    "node_modules/fastest-levenshtein": {
-      "version": "1.0.16",
-      "resolved": "https://registry.npmjs.org/fastest-levenshtein/-/fastest-levenshtein-1.0.16.tgz",
-      "integrity": "sha512-eRnCtTTtGZFpQCwhJiUOuxPQWRXVKYDn0b2PeHfXL6/Zi53SLAzAHfVhVWK2AryC/WH05kGfxhFIPvTF0SXQzg==",
-      "dev": true,
-      "engines": {
-        "node": ">= 4.9.1"
-      }
-    },
-    "node_modules/fastq": {
-      "version": "1.15.0",
-      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.15.0.tgz",
-      "integrity": "sha512-wBrocU2LCXXa+lWBt8RoIRD89Fi8OdABODa/kEnyeyjS5aZO5/GNvI5sEINADqP/h8M29UHTHUb53sUu5Ihqdw==",
-      "dev": true,
-      "dependencies": {
-        "reusify": "^1.0.4"
-      }
-    },
-    "node_modules/file-entry-cache": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-6.0.1.tgz",
-      "integrity": "sha512-7Gps/XWymbLk2QLYK4NzpMOrYjMhdIxXuIvy2QBsLE6ljuodKvdkWs/cpyJJ3CVIVpH0Oi1Hvg1ovbMzLdFBBg==",
-      "dev": true,
-      "dependencies": {
-        "flat-cache": "^3.0.4"
-      },
-      "engines": {
-        "node": "^10.12.0 || >=12.0.0"
-      }
-    },
-    "node_modules/fill-range": {
-      "version": "7.0.1",
-      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
-      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
-      "dev": true,
-      "dependencies": {
-        "to-regex-range": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/find-up": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
-      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
-      "dev": true,
-      "dependencies": {
-        "locate-path": "^5.0.0",
-        "path-exists": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/flat-cache": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-3.0.4.tgz",
-      "integrity": "sha512-dm9s5Pw7Jc0GvMYbshN6zchCA9RgQlzzEZX3vylR9IqFfS8XciblUXOKfW6SiuJ0e13eDYZoZV5wdrev7P3Nwg==",
-      "dev": true,
-      "dependencies": {
-        "flatted": "^3.1.0",
-        "rimraf": "^3.0.2"
-      },
-      "engines": {
-        "node": "^10.12.0 || >=12.0.0"
-      }
-    },
-    "node_modules/flatted": {
-      "version": "3.2.7",
-      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.2.7.tgz",
-      "integrity": "sha512-5nqDSxl8nn5BSNxyR3n4I6eDmbolI6WT+QqR547RwxQapgjQBmtktdP+HTBb/a/zLsbzERTONyUB5pefh5TtjQ==",
-      "dev": true
-    },
-    "node_modules/for-each": {
-      "version": "0.3.3",
-      "resolved": "https://registry.npmjs.org/for-each/-/for-each-0.3.3.tgz",
-      "integrity": "sha512-jqYfLp7mo9vIyQf8ykW2v7A+2N4QjeCeI5+Dz9XraiO1ign81wjiH7Fb9vSOWvQfNtmSa4H2RoQTrrXivdUZmw==",
-      "dev": true,
-      "dependencies": {
-        "is-callable": "^1.1.3"
-      }
-    },
-    "node_modules/fs.realpath": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
-      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
-      "dev": true
-    },
-    "node_modules/function-bind": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
-      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
-      "dev": true
-    },
-    "node_modules/function.prototype.name": {
-      "version": "1.1.5",
-      "resolved": "https://registry.npmjs.org/function.prototype.name/-/function.prototype.name-1.1.5.tgz",
-      "integrity": "sha512-uN7m/BzVKQnCUF/iW8jYea67v++2u7m5UgENbHRtdDVclOUP+FMPlCNdmk0h/ysGyo2tavMJEDqJAkJdRa1vMA==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "define-properties": "^1.1.3",
-        "es-abstract": "^1.19.0",
-        "functions-have-names": "^1.2.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/functions-have-names": {
-      "version": "1.2.3",
-      "resolved": "https://registry.npmjs.org/functions-have-names/-/functions-have-names-1.2.3.tgz",
-      "integrity": "sha512-xckBUXyTIqT97tq2x2AMb+g163b5JFysYk0x4qxNFwbfQkmNZoiRHb6sPzI9/QV33WeuvVYBUIiD4NzNIyqaRQ==",
-      "dev": true,
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/get-intrinsic": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.1.tgz",
-      "integrity": "sha512-2DcsyfABl+gVHEfCOaTrWgyt+tb6MSEGmKq+kI5HwLbIYgjgmMcV8KQ41uaKz1xxUcn9tJtgFbQUEVcEbd0FYw==",
-      "dev": true,
-      "dependencies": {
-        "function-bind": "^1.1.1",
-        "has": "^1.0.3",
-        "has-proto": "^1.0.1",
-        "has-symbols": "^1.0.3"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/get-symbol-description": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.0.0.tgz",
-      "integrity": "sha512-2EmdH1YvIQiZpltCNgkuiUnyukzxM/R6NDJX31Ke3BG1Nq5b0S2PhX59UKi9vZpPDQVdqn+1IcaAwnzTT5vCjw==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "get-intrinsic": "^1.1.1"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/glob": {
-      "version": "7.2.3",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
-      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
-      "dev": true,
-      "dependencies": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^3.1.1",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
-      },
-      "engines": {
-        "node": "*"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/glob-parent": {
-      "version": "5.1.2",
-      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
-      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
-      "dev": true,
-      "dependencies": {
-        "is-glob": "^4.0.1"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
-    "node_modules/global-modules": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/global-modules/-/global-modules-2.0.0.tgz",
-      "integrity": "sha512-NGbfmJBp9x8IxyJSd1P+otYK8vonoJactOogrVfFRIAEY1ukil8RSKDz2Yo7wh1oihl51l/r6W4epkeKJHqL8A==",
-      "dev": true,
-      "dependencies": {
-        "global-prefix": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/global-prefix": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/global-prefix/-/global-prefix-3.0.0.tgz",
-      "integrity": "sha512-awConJSVCHVGND6x3tmMaKcQvwXLhjdkmomy2W+Goaui8YPgYgXJZewhg3fWC+DlfqqQuWg8AwqjGTD2nAPVWg==",
-      "dev": true,
-      "dependencies": {
-        "ini": "^1.3.5",
-        "kind-of": "^6.0.2",
-        "which": "^1.3.1"
-      },
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/globals": {
-      "version": "13.20.0",
-      "resolved": "https://registry.npmjs.org/globals/-/globals-13.20.0.tgz",
-      "integrity": "sha512-Qg5QtVkCy/kv3FUSlu4ukeZDVf9ee0iXLAUYX13gbR17bnejFTzr4iS9bY7kwCf1NztRNm1t91fjOiyx4CSwPQ==",
-      "dev": true,
-      "dependencies": {
-        "type-fest": "^0.20.2"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/globals/node_modules/type-fest": {
-      "version": "0.20.2",
-      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.20.2.tgz",
-      "integrity": "sha512-Ne+eE4r0/iWnpAxD852z3A+N0Bt5RN//NjJwRd2VFHEmrywxf5vsZlh4R6lixl6B+wz/8d+maTSAkN1FIkI3LQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/globalthis": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.3.tgz",
-      "integrity": "sha512-sFdI5LyBiNTHjRd7cGPWapiHWMOXKyuBNX/cWJ3NfzrZQVa8GI/8cofCl74AOVqq9W5kNmguTIzJ/1s2gyI9wA==",
-      "dev": true,
-      "dependencies": {
-        "define-properties": "^1.1.3"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/globby": {
-      "version": "11.1.0",
-      "resolved": "https://registry.npmjs.org/globby/-/globby-11.1.0.tgz",
-      "integrity": "sha512-jhIXaOzy1sb8IyocaruWSn1TjmnBVs8Ayhcy83rmxNJ8q2uWKCAj3CnJY+KpGSXCueAPc0i05kVvVKtP1t9S3g==",
-      "dev": true,
-      "dependencies": {
-        "array-union": "^2.1.0",
-        "dir-glob": "^3.0.1",
-        "fast-glob": "^3.2.9",
-        "ignore": "^5.2.0",
-        "merge2": "^1.4.1",
-        "slash": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/globjoin": {
-      "version": "0.1.4",
-      "resolved": "https://registry.npmjs.org/globjoin/-/globjoin-0.1.4.tgz",
-      "integrity": "sha512-xYfnw62CKG8nLkZBfWbhWwDw02CHty86jfPcc2cr3ZfeuK9ysoVPPEUxf21bAD/rWAgk52SuBrLJlefNy8mvFg==",
-      "dev": true
-    },
-    "node_modules/gopd": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.0.1.tgz",
-      "integrity": "sha512-d65bNlIadxvpb/A2abVdlqKqV563juRnZ1Wtk6s1sIR8uNsXR70xqIzVqxVf1eTqDunwT2MkczEeaezCKTZhwA==",
-      "dev": true,
-      "dependencies": {
-        "get-intrinsic": "^1.1.3"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/graceful-fs": {
-      "version": "4.2.11",
-      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
-      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
-      "dev": true
-    },
-    "node_modules/grapheme-splitter": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/grapheme-splitter/-/grapheme-splitter-1.0.4.tgz",
-      "integrity": "sha512-bzh50DW9kTPM00T8y4o8vQg89Di9oLJVLW/KaOGIXJWP/iqCN6WKYkbNOF04vFLJhwcpYUh9ydh/+5vpOqV4YQ==",
-      "dev": true
-    },
-    "node_modules/hard-rejection": {
-      "version": "2.1.0",
-      "resolved": "https://registry.npmjs.org/hard-rejection/-/hard-rejection-2.1.0.tgz",
-      "integrity": "sha512-VIZB+ibDhx7ObhAe7OVtoEbuP4h/MuOTHJ+J8h/eBXotJYl0fBgR72xDFCKgIh22OJZIOVNxBMWuhAr10r8HdA==",
-      "dev": true,
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/has": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
-      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
-      "dev": true,
-      "dependencies": {
-        "function-bind": "^1.1.1"
-      },
-      "engines": {
-        "node": ">= 0.4.0"
-      }
-    },
-    "node_modules/has-bigints": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/has-bigints/-/has-bigints-1.0.2.tgz",
-      "integrity": "sha512-tSvCKtBr9lkF0Ex0aQiP9N+OpV4zi2r/Nee5VkRDbaqv35RLYMzbwQfFSZZH0kR+Rd6302UJZ2p/bJCEoR3VoQ==",
-      "dev": true,
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/has-flag": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
-      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
-      "dev": true,
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/has-property-descriptors": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.0.tgz",
-      "integrity": "sha512-62DVLZGoiEBDHQyqG4w9xCuZ7eJEwNmJRWw2VY84Oedb7WFcA27fiEVe8oUQx9hAUJ4ekurquucTGwsyO1XGdQ==",
-      "dev": true,
-      "dependencies": {
-        "get-intrinsic": "^1.1.1"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/has-proto": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
-      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==",
-      "dev": true,
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/has-symbols": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.0.3.tgz",
-      "integrity": "sha512-l3LCuF6MgDNwTDKkdYGEihYjt5pRPbEg46rtlmnSPlUbgmB8LOIrKJbYYFBSbnPaJexMKtiPO8hmeRjRz2Td+A==",
-      "dev": true,
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/has-tostringtag": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.0.tgz",
-      "integrity": "sha512-kFjcSNhnlGV1kyoGk7OXKSawH5JOb/LzUc5w9B02hOTO0dfFRjbHQKvg1d6cf3HbeUmtU9VbbV3qzZ2Teh97WQ==",
-      "dev": true,
-      "dependencies": {
-        "has-symbols": "^1.0.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/hosted-git-info": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-4.1.0.tgz",
-      "integrity": "sha512-kyCuEOWjJqZuDbRHzL8V93NzQhwIB71oFWSyzVo+KPZI+pnQPPxucdkrOZvkLRnrf5URsQM+IJ09Dw29cRALIA==",
-      "dev": true,
-      "dependencies": {
-        "lru-cache": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/html-tags": {
-      "version": "3.3.1",
-      "resolved": "https://registry.npmjs.org/html-tags/-/html-tags-3.3.1.tgz",
-      "integrity": "sha512-ztqyC3kLto0e9WbNp0aeP+M3kTt+nbaIveGmUxAtZa+8iFgKLUOD4YKM5j+f3QD89bra7UeumolZHKuOXnTmeQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/iconv-lite": {
-      "version": "0.6.3",
-      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
-      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
-      "dependencies": {
-        "safer-buffer": ">= 2.1.2 < 3.0.0"
-      },
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/ignore": {
-      "version": "5.2.4",
-      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.4.tgz",
-      "integrity": "sha512-MAb38BcSbH0eHNBxn7ql2NH/kX33OkB3lZ1BNdh7ENeRChHTYsTvWrMubiIAMNS2llXEEgZ1MUOBtXChP3kaFQ==",
-      "dev": true,
-      "engines": {
-        "node": ">= 4"
-      }
-    },
-    "node_modules/import-fresh": {
-      "version": "3.3.0",
-      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.0.tgz",
-      "integrity": "sha512-veYYhQa+D1QBKznvhUHxb8faxlrwUnxseDAbAp457E0wLNio2bOSKnjYDhMj+YiAq61xrMGhQk9iXVk5FzgQMw==",
-      "dev": true,
-      "dependencies": {
-        "parent-module": "^1.0.0",
-        "resolve-from": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/import-fresh/node_modules/resolve-from": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
-      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
-      "dev": true,
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/import-lazy": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/import-lazy/-/import-lazy-4.0.0.tgz",
-      "integrity": "sha512-rKtvo6a868b5Hu3heneU+L4yEQ4jYKLtjpnPeUdK7h0yzXGmyBTypknlkCvHFBqfX9YlorEiMM6Dnq/5atfHkw==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/imurmurhash": {
-      "version": "0.1.4",
-      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
-      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.8.19"
-      }
-    },
-    "node_modules/indent-string": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
-      "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/inflight": {
-      "version": "1.0.6",
-      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
-      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
-      "dev": true,
-      "dependencies": {
-        "once": "^1.3.0",
-        "wrappy": "1"
-      }
-    },
-    "node_modules/inherits": {
-      "version": "2.0.4",
-      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
-      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
-      "dev": true
-    },
-    "node_modules/ini": {
-      "version": "1.3.8",
-      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
-      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
-      "dev": true
-    },
-    "node_modules/internal-slot": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.0.5.tgz",
-      "integrity": "sha512-Y+R5hJrzs52QCG2laLn4udYVnxsfny9CpOhNhUvk/SSSVyF6T27FzRbF0sroPidSu3X8oEAkOn2K804mjpt6UQ==",
-      "dev": true,
-      "dependencies": {
-        "get-intrinsic": "^1.2.0",
-        "has": "^1.0.3",
-        "side-channel": "^1.0.4"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/internmap": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
-      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/interval-tree-1d": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/interval-tree-1d/-/interval-tree-1d-1.0.4.tgz",
-      "integrity": "sha512-wY8QJH+6wNI0uh4pDQzMvl+478Qh7Rl4qLmqiluxALlNvl+I+o5x38Pw3/z7mDPTPS1dQalZJXsmbvxx5gclhQ==",
-      "dependencies": {
-        "binary-search-bounds": "^2.0.0"
-      }
-    },
-    "node_modules/is-array-buffer": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.2.tgz",
-      "integrity": "sha512-y+FyyR/w8vfIRq4eQcM1EYgSTnmHXPqaF+IgzgraytCFq5Xh8lllDVmAZolPJiZttZLeFSINPYMaEJ7/vWUa1w==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "get-intrinsic": "^1.2.0",
-        "is-typed-array": "^1.1.10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-arrayish": {
-      "version": "0.2.1",
-      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
-      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
-      "dev": true
-    },
-    "node_modules/is-bigint": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/is-bigint/-/is-bigint-1.0.4.tgz",
-      "integrity": "sha512-zB9CruMamjym81i2JZ3UMn54PKGsQzsJeo6xvN3HJJ4CAsQNB6iRutp2To77OfCNuoxspsIhzaPoO1zyCEhFOg==",
-      "dev": true,
-      "dependencies": {
-        "has-bigints": "^1.0.1"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-boolean-object": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/is-boolean-object/-/is-boolean-object-1.1.2.tgz",
-      "integrity": "sha512-gDYaKHJmnj4aWxyj6YHyXVpdQawtVLHU5cb+eztPGczf6cjuTdwve5ZIEfgXqH4e57An1D1AKf8CZ3kYrQRqYA==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "has-tostringtag": "^1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-callable": {
-      "version": "1.2.7",
-      "resolved": "https://registry.npmjs.org/is-callable/-/is-callable-1.2.7.tgz",
-      "integrity": "sha512-1BC0BVFhS/p0qtw6enp8e+8OD0UrK0oFLztSjNzhcKA3WDuJxxAPXzPuPtKkjEY9UUoEWlX/8fgKeu2S8i9JTA==",
-      "dev": true,
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-core-module": {
-      "version": "2.12.1",
-      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.12.1.tgz",
-      "integrity": "sha512-Q4ZuBAe2FUsKtyQJoQHlvP8OvBERxO3jEmy1I7hcRXcJBGGHFh/aJBswbXuS9sgrDH2QUO8ilkwNPHvHMd8clg==",
-      "dev": true,
-      "dependencies": {
-        "has": "^1.0.3"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-date-object": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/is-date-object/-/is-date-object-1.0.5.tgz",
-      "integrity": "sha512-9YQaSxsAiSwcvS33MBk3wTCVnWK+HhF8VZR2jRxehM16QcVOdHqPn4VPHmRK4lSr38n9JriurInLcP90xsYNfQ==",
-      "dev": true,
-      "dependencies": {
-        "has-tostringtag": "^1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-extglob": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
-      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/is-fullwidth-code-point": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
-      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/is-glob": {
-      "version": "4.0.3",
-      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
-      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
-      "dev": true,
-      "dependencies": {
-        "is-extglob": "^2.1.1"
-      },
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/is-negative-zero": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.2.tgz",
-      "integrity": "sha512-dqJvarLawXsFbNDeJW7zAz8ItJ9cd28YufuuFzh0G8pNHjJMnY08Dv7sYX2uF5UpQOwieAeOExEYAWWfu7ZZUA==",
-      "dev": true,
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-number": {
-      "version": "7.0.0",
-      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
-      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.12.0"
-      }
-    },
-    "node_modules/is-number-object": {
-      "version": "1.0.7",
-      "resolved": "https://registry.npmjs.org/is-number-object/-/is-number-object-1.0.7.tgz",
-      "integrity": "sha512-k1U0IRzLMo7ZlYIfzRu23Oh6MiIFasgpb9X76eqfFZAqwH44UI4KTBvBYIZ1dSL9ZzChTB9ShHfLkR4pdW5krQ==",
-      "dev": true,
-      "dependencies": {
-        "has-tostringtag": "^1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-path-inside": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-3.0.3.tgz",
-      "integrity": "sha512-Fd4gABb+ycGAmKou8eMftCupSir5lRxqf4aD/vd0cD2qc4HL07OjCeuHMr8Ro4CoMaeCKDB0/ECBOVWjTwUvPQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/is-plain-obj": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-1.1.0.tgz",
-      "integrity": "sha512-yvkRyxmFKEOQ4pNXCmJG5AEQNlXJS5LaONXo5/cLdTZdWvsZ1ioJEonLGAosKlMWE8lwUy/bJzMjcw8az73+Fg==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/is-plain-object": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-5.0.0.tgz",
-      "integrity": "sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/is-regex": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/is-regex/-/is-regex-1.1.4.tgz",
-      "integrity": "sha512-kvRdxDsxZjhzUX07ZnLydzS1TU/TJlTUHHY4YLL87e37oUA49DfkLqgy+VjFocowy29cKvcSiu+kIv728jTTVg==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "has-tostringtag": "^1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-shared-array-buffer": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.2.tgz",
-      "integrity": "sha512-sqN2UDu1/0y6uvXyStCOzyhAjCSlHceFoMKJW8W9EU9cvic/QdsZ0kEU93HEy3IUEFZIiH/3w+AH/UQbPHNdhA==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-string": {
-      "version": "1.0.7",
-      "resolved": "https://registry.npmjs.org/is-string/-/is-string-1.0.7.tgz",
-      "integrity": "sha512-tE2UXzivje6ofPW7l23cjDOMa09gb7xlAqG6jG5ej6uPV32TlWP3NKPigtaGeHNu9fohccRYvIiZMfOOnOYUtg==",
-      "dev": true,
-      "dependencies": {
-        "has-tostringtag": "^1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-symbol": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/is-symbol/-/is-symbol-1.0.4.tgz",
-      "integrity": "sha512-C/CPBqKWnvdcxqIARxyOh4v1UUEOCHpgDa0WYgpKDFMszcrPcffg5uhwSgPCLD2WWxmq6isisz87tzT01tuGhg==",
-      "dev": true,
-      "dependencies": {
-        "has-symbols": "^1.0.2"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-typed-array": {
-      "version": "1.1.10",
-      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.10.tgz",
-      "integrity": "sha512-PJqgEHiWZvMpaFZ3uTc8kHPM4+4ADTlDniuQL7cU/UDA0Ql7F70yGfHph3cLNe+c9toaigv+DFzTJKhc2CtO6A==",
-      "dev": true,
-      "dependencies": {
-        "available-typed-arrays": "^1.0.5",
-        "call-bind": "^1.0.2",
-        "for-each": "^0.3.3",
-        "gopd": "^1.0.1",
-        "has-tostringtag": "^1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/is-weakref": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/is-weakref/-/is-weakref-1.0.2.tgz",
-      "integrity": "sha512-qctsuLZmIQ0+vSSMfoVvyFe2+GSEvnmZ2ezTup1SBse9+twCCeial6EEi3Nc2KFcf6+qz2FBPnjXsk8xhKSaPQ==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/isexe": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
-      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
-      "dev": true
-    },
-    "node_modules/isoformat": {
-      "version": "0.2.1",
-      "resolved": "https://registry.npmjs.org/isoformat/-/isoformat-0.2.1.tgz",
-      "integrity": "sha512-tFLRAygk9NqrRPhJSnNGh7g7oaVWDwR0wKh/GM2LgmPa50Eg4UfyaCO4I8k6EqJHl1/uh2RAD6g06n5ygEnrjQ=="
-    },
-    "node_modules/js-sdsl": {
-      "version": "4.4.0",
-      "resolved": "https://registry.npmjs.org/js-sdsl/-/js-sdsl-4.4.0.tgz",
-      "integrity": "sha512-FfVSdx6pJ41Oa+CF7RDaFmTnCaFhua+SNYQX74riGOpl96x+2jQCqEfQ2bnXu/5DPCqlRuiqyvTJM0Qjz26IVg==",
-      "dev": true,
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/js-sdsl"
-      }
-    },
-    "node_modules/js-tokens": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
-      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
-      "dev": true
-    },
-    "node_modules/js-yaml": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
-      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
-      "dev": true,
-      "dependencies": {
-        "argparse": "^2.0.1"
-      },
-      "bin": {
-        "js-yaml": "bin/js-yaml.js"
-      }
-    },
-    "node_modules/json-parse-better-errors": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/json-parse-better-errors/-/json-parse-better-errors-1.0.2.tgz",
-      "integrity": "sha512-mrqyZKfX5EhL7hvqcV6WG1yYjnjeuYDzDhhcAAUrq8Po85NBQBJP+ZDUT75qZQ98IkUoBqdkExkukOU7Ts2wrw==",
-      "dev": true
-    },
-    "node_modules/json-parse-even-better-errors": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
-      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
-      "dev": true
-    },
-    "node_modules/json-schema-traverse": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
-      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
-      "dev": true
-    },
-    "node_modules/json-stable-stringify-without-jsonify": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
-      "integrity": "sha512-Bdboy+l7tA3OGW6FjyFHWkP5LuByj1Tk33Ljyq0axyzdk9//JSi2u3fP1QSmd1KNwq6VOKYGlAu87CisVir6Pw==",
-      "dev": true
-    },
-    "node_modules/kind-of": {
-      "version": "6.0.3",
-      "resolved": "https://registry.npmjs.org/kind-of/-/kind-of-6.0.3.tgz",
-      "integrity": "sha512-dcS1ul+9tmeD95T+x28/ehLgd9mENa3LsvDTtzm3vyBEO7RPptvAD+t44WVXaUjTBRcrpFeFlC8WCruUR456hw==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/known-css-properties": {
-      "version": "0.27.0",
-      "resolved": "https://registry.npmjs.org/known-css-properties/-/known-css-properties-0.27.0.tgz",
-      "integrity": "sha512-uMCj6+hZYDoffuvAJjFAPz56E9uoowFHmTkqRtRq5WyC5Q6Cu/fTZKNQpX/RbzChBYLLl3lo8CjFZBAZXq9qFg==",
-      "dev": true
-    },
-    "node_modules/levn": {
-      "version": "0.4.1",
-      "resolved": "https://registry.npmjs.org/levn/-/levn-0.4.1.tgz",
-      "integrity": "sha512-+bT2uH4E5LGE7h/n3evcS/sQlJXCpIp6ym8OWJ5eV6+67Dsql/LaaT7qJBAt2rzfoa/5QBGBhxDix1dMt2kQKQ==",
-      "dev": true,
-      "dependencies": {
-        "prelude-ls": "^1.2.1",
-        "type-check": "~0.4.0"
-      },
-      "engines": {
-        "node": ">= 0.8.0"
-      }
-    },
-    "node_modules/lines-and-columns": {
-      "version": "1.2.4",
-      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
-      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
-      "dev": true
-    },
-    "node_modules/load-json-file": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-4.0.0.tgz",
-      "integrity": "sha512-Kx8hMakjX03tiGTLAIdJ+lL0htKnXjEZN6hk/tozf/WOuYGdZBJrZ+rCJRbVCugsjB3jMLn9746NsQIf5VjBMw==",
-      "dev": true,
-      "dependencies": {
-        "graceful-fs": "^4.1.2",
-        "parse-json": "^4.0.0",
-        "pify": "^3.0.0",
-        "strip-bom": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/load-json-file/node_modules/parse-json": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-4.0.0.tgz",
-      "integrity": "sha512-aOIos8bujGN93/8Ox/jPLh7RwVnPEysynVFE+fQZyg6jKELEHwzgKdLRFHUgXJL6kylijVSBC4BvN9OmsB48Rw==",
-      "dev": true,
-      "dependencies": {
-        "error-ex": "^1.3.1",
-        "json-parse-better-errors": "^1.0.1"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/locate-path": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
-      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
-      "dev": true,
-      "dependencies": {
-        "p-locate": "^4.1.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/lodash.merge": {
-      "version": "4.6.2",
-      "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
-      "integrity": "sha512-0KpjqXRVvrYyCsX1swR/XTK0va6VQkQM6MNo7PqW77ByjAhoARA8EfrP1N4+KlKj8YS0ZUCtRT/YUuhyYDujIQ==",
-      "dev": true
-    },
-    "node_modules/lodash.truncate": {
-      "version": "4.4.2",
-      "resolved": "https://registry.npmjs.org/lodash.truncate/-/lodash.truncate-4.4.2.tgz",
-      "integrity": "sha512-jttmRe7bRse52OsWIMDLaXxWqRAmtIUccAQ3garviCqJjafXOfNMO0yMfNpdD6zbGaTU0P5Nz7e7gAT6cKmJRw==",
-      "dev": true
-    },
-    "node_modules/lru-cache": {
-      "version": "6.0.0",
-      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
-      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
-      "dev": true,
-      "dependencies": {
-        "yallist": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/map-obj": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/map-obj/-/map-obj-4.3.0.tgz",
-      "integrity": "sha512-hdN1wVrZbb29eBGiGjJbeP8JbKjq1urkHJ/LIP/NY48MZ1QVXUsQBV1G1zvYFHn1XE06cwjBsOI2K3Ulnj1YXQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/mathml-tag-names": {
-      "version": "2.1.3",
-      "resolved": "https://registry.npmjs.org/mathml-tag-names/-/mathml-tag-names-2.1.3.tgz",
-      "integrity": "sha512-APMBEanjybaPzUrfqU0IMU5I0AswKMH7k8OTLs0vvV4KZpExkTkY87nR/zpbuTPj+gARop7aGUbl11pnDfW6xg==",
-      "dev": true,
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/wooorm"
-      }
-    },
-    "node_modules/mdn-data": {
-      "version": "2.0.30",
-      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.0.30.tgz",
-      "integrity": "sha512-GaqWWShW4kv/G9IEucWScBx9G1/vsFZZJUO+tD26M8J8z3Kw5RDQjaoZe03YAClgeS/SWPOcb4nkFBTEi5DUEA==",
-      "dev": true
-    },
-    "node_modules/memorystream": {
-      "version": "0.3.1",
-      "resolved": "https://registry.npmjs.org/memorystream/-/memorystream-0.3.1.tgz",
-      "integrity": "sha512-S3UwM3yj5mtUSEfP41UZmt/0SCoVYUcU1rkXv+BQ5Ig8ndL4sPoJNBUJERafdPb5jjHJGuMgytgKvKIf58XNBw==",
-      "dev": true,
-      "engines": {
-        "node": ">= 0.10.0"
-      }
-    },
-    "node_modules/meow": {
-      "version": "9.0.0",
-      "resolved": "https://registry.npmjs.org/meow/-/meow-9.0.0.tgz",
-      "integrity": "sha512-+obSblOQmRhcyBt62furQqRAQpNyWXo8BuQ5bN7dG8wmwQ+vwHKp/rCFD4CrTP8CsDQD1sjoZ94K417XEUk8IQ==",
-      "dev": true,
-      "dependencies": {
-        "@types/minimist": "^1.2.0",
-        "camelcase-keys": "^6.2.2",
-        "decamelize": "^1.2.0",
-        "decamelize-keys": "^1.1.0",
-        "hard-rejection": "^2.1.0",
-        "minimist-options": "4.1.0",
-        "normalize-package-data": "^3.0.0",
-        "read-pkg-up": "^7.0.1",
-        "redent": "^3.0.0",
-        "trim-newlines": "^3.0.0",
-        "type-fest": "^0.18.0",
-        "yargs-parser": "^20.2.3"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/merge2": {
-      "version": "1.4.1",
-      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
-      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
-      "dev": true,
-      "engines": {
-        "node": ">= 8"
-      }
-    },
-    "node_modules/micromatch": {
-      "version": "4.0.5",
-      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
-      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
-      "dev": true,
-      "dependencies": {
-        "braces": "^3.0.2",
-        "picomatch": "^2.3.1"
-      },
-      "engines": {
-        "node": ">=8.6"
-      }
-    },
-    "node_modules/min-indent": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/min-indent/-/min-indent-1.0.1.tgz",
-      "integrity": "sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg==",
-      "dev": true,
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
-      "dev": true,
-      "dependencies": {
-        "brace-expansion": "^1.1.7"
-      },
-      "engines": {
-        "node": "*"
-      }
-    },
-    "node_modules/minimist-options": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/minimist-options/-/minimist-options-4.1.0.tgz",
-      "integrity": "sha512-Q4r8ghd80yhO/0j1O3B2BjweX3fiHg9cdOwjJd2J76Q135c+NDxGCqdYKQ1SKBuFfgWbAUzBfvYjPUEeNgqN1A==",
-      "dev": true,
-      "dependencies": {
-        "arrify": "^1.0.1",
-        "is-plain-obj": "^1.1.0",
-        "kind-of": "^6.0.3"
-      },
-      "engines": {
-        "node": ">= 6"
-      }
-    },
-    "node_modules/ms": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
-      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
-      "dev": true
-    },
-    "node_modules/nanoid": {
-      "version": "3.3.6",
-      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.6.tgz",
-      "integrity": "sha512-BGcqMMJuToF7i1rt+2PWSNVnWIkGCU78jBG3RxO/bZlnZPK2Cmi2QaffxGO/2RvWi9sL+FAiRiXMgsyxQ1DIDA==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/ai"
-        }
-      ],
-      "bin": {
-        "nanoid": "bin/nanoid.cjs"
-      },
-      "engines": {
-        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
-      }
-    },
-    "node_modules/natural-compare": {
-      "version": "1.4.0",
-      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
-      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
-      "dev": true
-    },
-    "node_modules/natural-compare-lite": {
-      "version": "1.4.0",
-      "resolved": "https://registry.npmjs.org/natural-compare-lite/-/natural-compare-lite-1.4.0.tgz",
-      "integrity": "sha512-Tj+HTDSJJKaZnfiuw+iaF9skdPpTo2GtEly5JHnWV/hfv2Qj/9RKsGISQtLh2ox3l5EAGw487hnBee0sIJ6v2g==",
-      "dev": true
-    },
-    "node_modules/nice-try": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/nice-try/-/nice-try-1.0.5.tgz",
-      "integrity": "sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==",
-      "dev": true
-    },
-    "node_modules/normalize-package-data": {
-      "version": "3.0.3",
-      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-3.0.3.tgz",
-      "integrity": "sha512-p2W1sgqij3zMMyRC067Dg16bfzVH+w7hyegmpIvZ4JNjqtGOVAIvLmjBx3yP7YTe9vKJgkoNOPjwQGogDoMXFA==",
-      "dev": true,
-      "dependencies": {
-        "hosted-git-info": "^4.0.1",
-        "is-core-module": "^2.5.0",
-        "semver": "^7.3.4",
-        "validate-npm-package-license": "^3.0.1"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/normalize-path": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
-      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/npm-run-all": {
-      "version": "4.1.5",
-      "resolved": "https://registry.npmjs.org/npm-run-all/-/npm-run-all-4.1.5.tgz",
-      "integrity": "sha512-Oo82gJDAVcaMdi3nuoKFavkIHBRVqQ1qvMb+9LHk/cF4P6B2m8aP04hGf7oL6wZ9BuGwX1onlLhpuoofSyoQDQ==",
-      "dev": true,
-      "dependencies": {
-        "ansi-styles": "^3.2.1",
-        "chalk": "^2.4.1",
-        "cross-spawn": "^6.0.5",
-        "memorystream": "^0.3.1",
-        "minimatch": "^3.0.4",
-        "pidtree": "^0.3.0",
-        "read-pkg": "^3.0.0",
-        "shell-quote": "^1.6.1",
-        "string.prototype.padend": "^3.0.0"
-      },
-      "bin": {
-        "npm-run-all": "bin/npm-run-all/index.js",
-        "run-p": "bin/run-p/index.js",
-        "run-s": "bin/run-s/index.js"
-      },
-      "engines": {
-        "node": ">= 4"
-      }
-    },
-    "node_modules/npm-run-all/node_modules/cross-spawn": {
-      "version": "6.0.5",
-      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz",
-      "integrity": "sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==",
-      "dev": true,
-      "dependencies": {
-        "nice-try": "^1.0.4",
-        "path-key": "^2.0.1",
-        "semver": "^5.5.0",
-        "shebang-command": "^1.2.0",
-        "which": "^1.2.9"
-      },
-      "engines": {
-        "node": ">=4.8"
-      }
-    },
-    "node_modules/npm-run-all/node_modules/hosted-git-info": {
-      "version": "2.8.9",
-      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz",
-      "integrity": "sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==",
-      "dev": true
-    },
-    "node_modules/npm-run-all/node_modules/normalize-package-data": {
-      "version": "2.5.0",
-      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
-      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
-      "dev": true,
-      "dependencies": {
-        "hosted-git-info": "^2.1.4",
-        "resolve": "^1.10.0",
-        "semver": "2 || 3 || 4 || 5",
-        "validate-npm-package-license": "^3.0.1"
-      }
-    },
-    "node_modules/npm-run-all/node_modules/path-key": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
-      "integrity": "sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==",
-      "dev": true,
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/npm-run-all/node_modules/path-type": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/path-type/-/path-type-3.0.0.tgz",
-      "integrity": "sha512-T2ZUsdZFHgA3u4e5PfPbjd7HDDpxPnQb5jN0SrDsjNSuVXHJqtwTnWqG0B1jZrgmJ/7lj1EmVIByWt1gxGkWvg==",
-      "dev": true,
-      "dependencies": {
-        "pify": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/npm-run-all/node_modules/read-pkg": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-3.0.0.tgz",
-      "integrity": "sha512-BLq/cCO9two+lBgiTYNqD6GdtK8s4NpaWrl6/rCO9w0TUS8oJl7cmToOZfRYllKTISY6nt1U7jQ53brmKqY6BA==",
-      "dev": true,
-      "dependencies": {
-        "load-json-file": "^4.0.0",
-        "normalize-package-data": "^2.3.2",
-        "path-type": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/npm-run-all/node_modules/semver": {
-      "version": "5.7.2",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
-      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
-      "dev": true,
-      "bin": {
-        "semver": "bin/semver"
-      }
-    },
-    "node_modules/npm-run-all/node_modules/shebang-command": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
-      "integrity": "sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==",
-      "dev": true,
-      "dependencies": {
-        "shebang-regex": "^1.0.0"
-      },
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/npm-run-all/node_modules/shebang-regex": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
-      "integrity": "sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/object-inspect": {
-      "version": "1.12.3",
-      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.12.3.tgz",
-      "integrity": "sha512-geUvdk7c+eizMNUDkRpW1wJwgfOiOeHbxBR/hLXK1aT6zmVSO0jsQcs7fj6MGw89jC/cjGfLcNOrtMYtGqm81g==",
-      "dev": true,
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/object-keys": {
-      "version": "1.1.1",
-      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
-      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
-      "dev": true,
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/object.assign": {
-      "version": "4.1.4",
-      "resolved": "https://registry.npmjs.org/object.assign/-/object.assign-4.1.4.tgz",
-      "integrity": "sha512-1mxKf0e58bvyjSCtKYY4sRe9itRk3PJpquJOjeIkz885CczcI4IvJJDLPS72oowuSh+pBxUFROpX+TU++hxhZQ==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "define-properties": "^1.1.4",
-        "has-symbols": "^1.0.3",
-        "object-keys": "^1.1.1"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/once": {
-      "version": "1.4.0",
-      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
-      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
-      "dev": true,
-      "dependencies": {
-        "wrappy": "1"
-      }
-    },
-    "node_modules/optionator": {
-      "version": "0.9.3",
-      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.9.3.tgz",
-      "integrity": "sha512-JjCoypp+jKn1ttEFExxhetCKeJt9zhAgAve5FXHixTvFDW/5aEktX9bufBKLRRMdU7bNtpLfcGu94B3cdEJgjg==",
-      "dev": true,
-      "dependencies": {
-        "@aashutoshrathi/word-wrap": "^1.2.3",
-        "deep-is": "^0.1.3",
-        "fast-levenshtein": "^2.0.6",
-        "levn": "^0.4.1",
-        "prelude-ls": "^1.2.1",
-        "type-check": "^0.4.0"
-      },
-      "engines": {
-        "node": ">= 0.8.0"
-      }
-    },
-    "node_modules/p-limit": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
-      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
-      "dev": true,
-      "dependencies": {
-        "p-try": "^2.0.0"
-      },
-      "engines": {
-        "node": ">=6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/p-locate": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
-      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
-      "dev": true,
-      "dependencies": {
-        "p-limit": "^2.2.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/p-try": {
-      "version": "2.2.0",
-      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
-      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/parent-module": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
-      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
-      "dev": true,
-      "dependencies": {
-        "callsites": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/parse-json": {
-      "version": "5.2.0",
-      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
-      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
-      "dev": true,
-      "dependencies": {
-        "@babel/code-frame": "^7.0.0",
-        "error-ex": "^1.3.1",
-        "json-parse-even-better-errors": "^2.3.0",
-        "lines-and-columns": "^1.1.6"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/path-exists": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
-      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/path-is-absolute": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
-      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/path-key": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
-      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/path-parse": {
-      "version": "1.0.7",
-      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
-      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
-      "dev": true
-    },
-    "node_modules/path-type": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
-      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/picocolors": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
-      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
-      "dev": true
-    },
-    "node_modules/picomatch": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
-      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
-      "dev": true,
-      "engines": {
-        "node": ">=8.6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/jonschlinkert"
-      }
-    },
-    "node_modules/pidtree": {
-      "version": "0.3.1",
-      "resolved": "https://registry.npmjs.org/pidtree/-/pidtree-0.3.1.tgz",
-      "integrity": "sha512-qQbW94hLHEqCg7nhby4yRC7G2+jYHY4Rguc2bjw7Uug4GIJuu1tvf2uHaZv5Q8zdt+WKJ6qK1FOI6amaWUo5FA==",
-      "dev": true,
-      "bin": {
-        "pidtree": "bin/pidtree.js"
-      },
-      "engines": {
-        "node": ">=0.10"
-      }
-    },
-    "node_modules/pify": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
-      "integrity": "sha512-C3FsVNH1udSEX48gGX1xfvwTWfsYWj5U+8/uK15BGzIGrKoUpghX8hWZwa/OFnakBiiVNmBvemTJR5mcy7iPcg==",
-      "dev": true,
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/postcss": {
-      "version": "8.4.23",
-      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.23.tgz",
-      "integrity": "sha512-bQ3qMcpF6A/YjR55xtoTr0jGOlnPOKAIMdOWiv0EIT6HVPEaJiJB4NLljSbiHoC2RX7DN5Uvjtpbg1NPdwv1oA==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "opencollective",
-          "url": "https://opencollective.com/postcss/"
-        },
-        {
-          "type": "tidelift",
-          "url": "https://tidelift.com/funding/github/npm/postcss"
-        },
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/ai"
-        }
-      ],
-      "dependencies": {
-        "nanoid": "^3.3.6",
-        "picocolors": "^1.0.0",
-        "source-map-js": "^1.0.2"
-      },
-      "engines": {
-        "node": "^10 || ^12 || >=14"
-      }
-    },
-    "node_modules/postcss-media-query-parser": {
-      "version": "0.2.3",
-      "resolved": "https://registry.npmjs.org/postcss-media-query-parser/-/postcss-media-query-parser-0.2.3.tgz",
-      "integrity": "sha512-3sOlxmbKcSHMjlUXQZKQ06jOswE7oVkXPxmZdoB1r5l0q6gTFTQSHxNxOrCccElbW7dxNytifNEo8qidX2Vsig==",
-      "dev": true
-    },
-    "node_modules/postcss-resolve-nested-selector": {
-      "version": "0.1.1",
-      "resolved": "https://registry.npmjs.org/postcss-resolve-nested-selector/-/postcss-resolve-nested-selector-0.1.1.tgz",
-      "integrity": "sha512-HvExULSwLqHLgUy1rl3ANIqCsvMS0WHss2UOsXhXnQaZ9VCc2oBvIpXrl00IUFT5ZDITME0o6oiXeiHr2SAIfw==",
-      "dev": true
-    },
-    "node_modules/postcss-safe-parser": {
-      "version": "6.0.0",
-      "resolved": "https://registry.npmjs.org/postcss-safe-parser/-/postcss-safe-parser-6.0.0.tgz",
-      "integrity": "sha512-FARHN8pwH+WiS2OPCxJI8FuRJpTVnn6ZNFiqAM2aeW2LwTHWWmWgIyKC6cUo0L8aeKiF/14MNvnpls6R2PBeMQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=12.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/postcss/"
-      },
-      "peerDependencies": {
-        "postcss": "^8.3.3"
-      }
-    },
-    "node_modules/postcss-selector-parser": {
-      "version": "6.0.13",
-      "resolved": "https://registry.npmjs.org/postcss-selector-parser/-/postcss-selector-parser-6.0.13.tgz",
-      "integrity": "sha512-EaV1Gl4mUEV4ddhDnv/xtj7sxwrwxdetHdWUGnT4VJQf+4d05v6lHYZr8N573k5Z0BViss7BDhfWtKS3+sfAqQ==",
-      "dev": true,
-      "dependencies": {
-        "cssesc": "^3.0.0",
-        "util-deprecate": "^1.0.2"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/postcss-value-parser": {
-      "version": "4.2.0",
-      "resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-4.2.0.tgz",
-      "integrity": "sha512-1NNCs6uurfkVbeXG4S8JFT9t19m45ICnif8zWLd5oPSZ50QnwMfK+H3jv408d4jw/7Bttv5axS5IiHoLaVNHeQ==",
-      "dev": true
-    },
-    "node_modules/prelude-ls": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.2.1.tgz",
-      "integrity": "sha512-vkcDPrRZo1QZLbn5RLGPpg/WmIQ65qoWWhcGKf/b5eplkkarX0m9z8ppCat4mlOqUsWpyNuYgO3VRyrYHSzX5g==",
-      "dev": true,
-      "engines": {
-        "node": ">= 0.8.0"
-      }
-    },
-    "node_modules/prettier": {
-      "version": "2.8.8",
-      "resolved": "https://registry.npmjs.org/prettier/-/prettier-2.8.8.tgz",
-      "integrity": "sha512-tdN8qQGvNjw4CHbY+XXk0JgCXn9QiF21a55rBe5LJAU+kDyC4WQn4+awm2Xfk2lQMk5fKup9XgzTZtGkjBdP9Q==",
-      "dev": true,
-      "bin": {
-        "prettier": "bin-prettier.js"
-      },
-      "engines": {
-        "node": ">=10.13.0"
-      },
-      "funding": {
-        "url": "https://github.com/prettier/prettier?sponsor=1"
-      }
-    },
-    "node_modules/punycode": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.0.tgz",
-      "integrity": "sha512-rRV+zQD8tVFys26lAGR9WUuS4iUAngJScM+ZRSKtvl5tKeZ2t5bvdNFdNHBW9FWR4guGHlgmsZ1G7BSm2wTbuA==",
-      "dev": true,
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/queue-microtask": {
-      "version": "1.2.3",
-      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
-      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ]
-    },
-    "node_modules/quick-lru": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-4.0.1.tgz",
-      "integrity": "sha512-ARhCpm70fzdcvNQfPoy49IaanKkTlRWF2JMzqhcJbhSFRZv7nPTvZJdcY7301IPmvW+/p0RgIWnQDLJxifsQ7g==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/read-pkg": {
-      "version": "5.2.0",
-      "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-5.2.0.tgz",
-      "integrity": "sha512-Ug69mNOpfvKDAc2Q8DRpMjjzdtrnv9HcSMX+4VsZxD1aZ6ZzrIE7rlzXBtWTyhULSMKg076AW6WR5iZpD0JiOg==",
-      "dev": true,
-      "dependencies": {
-        "@types/normalize-package-data": "^2.4.0",
-        "normalize-package-data": "^2.5.0",
-        "parse-json": "^5.0.0",
-        "type-fest": "^0.6.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/read-pkg-up": {
-      "version": "7.0.1",
-      "resolved": "https://registry.npmjs.org/read-pkg-up/-/read-pkg-up-7.0.1.tgz",
-      "integrity": "sha512-zK0TB7Xd6JpCLmlLmufqykGE+/TlOePD6qKClNW7hHDKFh/J7/7gCWGR7joEQEW1bKq3a3yUZSObOoWLFQ4ohg==",
-      "dev": true,
-      "dependencies": {
-        "find-up": "^4.1.0",
-        "read-pkg": "^5.2.0",
-        "type-fest": "^0.8.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/read-pkg-up/node_modules/type-fest": {
-      "version": "0.8.1",
-      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.8.1.tgz",
-      "integrity": "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/read-pkg/node_modules/hosted-git-info": {
-      "version": "2.8.9",
-      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz",
-      "integrity": "sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==",
-      "dev": true
-    },
-    "node_modules/read-pkg/node_modules/normalize-package-data": {
-      "version": "2.5.0",
-      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
-      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
-      "dev": true,
-      "dependencies": {
-        "hosted-git-info": "^2.1.4",
-        "resolve": "^1.10.0",
-        "semver": "2 || 3 || 4 || 5",
-        "validate-npm-package-license": "^3.0.1"
-      }
-    },
-    "node_modules/read-pkg/node_modules/semver": {
-      "version": "5.7.2",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
-      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
-      "dev": true,
-      "bin": {
-        "semver": "bin/semver"
-      }
-    },
-    "node_modules/read-pkg/node_modules/type-fest": {
-      "version": "0.6.0",
-      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.6.0.tgz",
-      "integrity": "sha512-q+MB8nYR1KDLrgr4G5yemftpMC7/QLqVndBmEEdqzmNj5dcFOO4Oo8qlwZE3ULT3+Zim1F8Kq4cBnikNhlCMlg==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/redent": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/redent/-/redent-3.0.0.tgz",
-      "integrity": "sha512-6tDA8g98We0zd0GvVeMT9arEOnTw9qM03L9cJXaCjrip1OO764RDBLBfrB4cwzNGDj5OA5ioymC9GkizgWJDUg==",
-      "dev": true,
-      "dependencies": {
-        "indent-string": "^4.0.0",
-        "strip-indent": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/regexp.prototype.flags": {
-      "version": "1.5.0",
-      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.0.tgz",
-      "integrity": "sha512-0SutC3pNudRKgquxGoRGIz946MZVHqbNfPjBdxeOhBrdgDKlRoXmYLQN9xRbrR09ZXWeGAdPuif7egofn6v5LA==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "define-properties": "^1.2.0",
-        "functions-have-names": "^1.2.3"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/require-from-string": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
-      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/resolve": {
-      "version": "1.22.2",
-      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.2.tgz",
-      "integrity": "sha512-Sb+mjNHOULsBv818T40qSPeRiuWLyaGMa5ewydRLFimneixmVy2zdivRl+AF6jaYPC8ERxGDmFSiqui6SfPd+g==",
-      "dev": true,
-      "dependencies": {
-        "is-core-module": "^2.11.0",
-        "path-parse": "^1.0.7",
-        "supports-preserve-symlinks-flag": "^1.0.0"
-      },
-      "bin": {
-        "resolve": "bin/resolve"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/resolve-from": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
-      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/reusify": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
-      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
-      "dev": true,
-      "engines": {
-        "iojs": ">=1.0.0",
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/rimraf": {
-      "version": "3.0.2",
-      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
-      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
-      "dev": true,
-      "dependencies": {
-        "glob": "^7.1.3"
-      },
-      "bin": {
-        "rimraf": "bin.js"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/robust-predicates": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/robust-predicates/-/robust-predicates-3.0.1.tgz",
-      "integrity": "sha512-ndEIpszUHiG4HtDsQLeIuMvRsDnn8c8rYStabochtUeCvfuvNptb5TUbVD68LRAILPX7p9nqQGh4xJgn3EHS/g=="
-    },
-    "node_modules/run-parallel": {
-      "version": "1.2.0",
-      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
-      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
-      "dev": true,
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/feross"
-        },
-        {
-          "type": "patreon",
-          "url": "https://www.patreon.com/feross"
-        },
-        {
-          "type": "consulting",
-          "url": "https://feross.org/support"
-        }
-      ],
-      "dependencies": {
-        "queue-microtask": "^1.2.2"
-      }
-    },
-    "node_modules/rw": {
-      "version": "1.3.3",
-      "resolved": "https://registry.npmjs.org/rw/-/rw-1.3.3.tgz",
-      "integrity": "sha512-PdhdWy89SiZogBLaw42zdeqtRJ//zFd2PgQavcICDUgJT5oW10QCRKbJ6bg4r0/UY2M6BWd5tkxuGFRvCkgfHQ=="
-    },
-    "node_modules/safe-regex-test": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.0.0.tgz",
-      "integrity": "sha512-JBUUzyOgEwXQY1NuPtvcj/qcBDbDmEvWufhlnXZIm75DEHp+afM1r1ujJpJsV/gSM4t59tpDyPi1sd6ZaPFfsA==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "get-intrinsic": "^1.1.3",
-        "is-regex": "^1.1.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/safer-buffer": {
-      "version": "2.1.2",
-      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
-      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
-    },
-    "node_modules/semver": {
-      "version": "7.5.4",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
-      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
-      "dev": true,
-      "dependencies": {
-        "lru-cache": "^6.0.0"
-      },
-      "bin": {
-        "semver": "bin/semver.js"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/shebang-command": {
-      "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
-      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
-      "dev": true,
-      "dependencies": {
-        "shebang-regex": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/shebang-regex": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
-      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/shell-quote": {
-      "version": "1.8.1",
-      "resolved": "https://registry.npmjs.org/shell-quote/-/shell-quote-1.8.1.tgz",
-      "integrity": "sha512-6j1W9l1iAs/4xYBI1SYOVZyFcCis9b4KCLQ8fgAGG07QvzaRLVVRQvAy85yNmmZSjYjg4MWh4gNvlPujU/5LpA==",
-      "dev": true,
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/side-channel": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
-      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.0",
-        "get-intrinsic": "^1.0.2",
-        "object-inspect": "^1.9.0"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/signal-exit": {
-      "version": "4.0.2",
-      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.0.2.tgz",
-      "integrity": "sha512-MY2/qGx4enyjprQnFaZsHib3Yadh3IXyV2C321GY0pjGfVBu4un0uDJkwgdxqO+Rdx8JMT8IfJIRwbYVz3Ob3Q==",
-      "dev": true,
-      "engines": {
-        "node": ">=14"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
-    "node_modules/slash": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
-      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/slice-ansi": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-4.0.0.tgz",
-      "integrity": "sha512-qMCMfhY040cVHT43K9BFygqYbUPFZKHOg7K73mtTWJRb8pyP3fzf4Ixd5SzdEJQ6MRUg/WBnOLxghZtKKurENQ==",
-      "dev": true,
-      "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "astral-regex": "^2.0.0",
-        "is-fullwidth-code-point": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/slice-ansi?sponsor=1"
-      }
-    },
-    "node_modules/slice-ansi/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/slice-ansi/node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "dev": true,
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/slice-ansi/node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
-      "dev": true
-    },
-    "node_modules/source-map-js": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.0.2.tgz",
-      "integrity": "sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw==",
-      "dev": true,
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
-    "node_modules/spdx-correct": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.2.0.tgz",
-      "integrity": "sha512-kN9dJbvnySHULIluDHy32WHRUu3Og7B9sbY7tsFLctQkIqnMh3hErYgdMjTYuqmcXX+lK5T1lnUt3G7zNswmZA==",
-      "dev": true,
-      "dependencies": {
-        "spdx-expression-parse": "^3.0.0",
-        "spdx-license-ids": "^3.0.0"
-      }
-    },
-    "node_modules/spdx-exceptions": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz",
-      "integrity": "sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==",
-      "dev": true
-    },
-    "node_modules/spdx-expression-parse": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz",
-      "integrity": "sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==",
-      "dev": true,
-      "dependencies": {
-        "spdx-exceptions": "^2.1.0",
-        "spdx-license-ids": "^3.0.0"
-      }
-    },
-    "node_modules/spdx-license-ids": {
-      "version": "3.0.13",
-      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.13.tgz",
-      "integrity": "sha512-XkD+zwiqXHikFZm4AX/7JSCXA98U5Db4AFd5XUg/+9UNtnH75+Z9KxtpYiJZx36mUDVOwH83pl7yvCer6ewM3w==",
-      "dev": true
-    },
-    "node_modules/string-width": {
-      "version": "4.2.3",
-      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
-      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
-      "dev": true,
-      "dependencies": {
-        "emoji-regex": "^8.0.0",
-        "is-fullwidth-code-point": "^3.0.0",
-        "strip-ansi": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/string.prototype.padend": {
-      "version": "3.1.4",
-      "resolved": "https://registry.npmjs.org/string.prototype.padend/-/string.prototype.padend-3.1.4.tgz",
-      "integrity": "sha512-67otBXoksdjsnXXRUq+KMVTdlVRZ2af422Y0aTyTjVaoQkGr3mxl2Bc5emi7dOQ3OGVVQQskmLEWwFXwommpNw==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "define-properties": "^1.1.4",
-        "es-abstract": "^1.20.4"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/string.prototype.trim": {
-      "version": "1.2.7",
-      "resolved": "https://registry.npmjs.org/string.prototype.trim/-/string.prototype.trim-1.2.7.tgz",
-      "integrity": "sha512-p6TmeT1T3411M8Cgg9wBTMRtY2q9+PNy9EV1i2lIXUN/btt763oIfxwN3RR8VU6wHX8j/1CFy0L+YuThm6bgOg==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "define-properties": "^1.1.4",
-        "es-abstract": "^1.20.4"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/string.prototype.trimend": {
-      "version": "1.0.6",
-      "resolved": "https://registry.npmjs.org/string.prototype.trimend/-/string.prototype.trimend-1.0.6.tgz",
-      "integrity": "sha512-JySq+4mrPf9EsDBEDYMOb/lM7XQLulwg5R/m1r0PXEFqrV0qHvl58sdTilSXtKOflCsK2E8jxf+GKC0T07RWwQ==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "define-properties": "^1.1.4",
-        "es-abstract": "^1.20.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/string.prototype.trimstart": {
-      "version": "1.0.6",
-      "resolved": "https://registry.npmjs.org/string.prototype.trimstart/-/string.prototype.trimstart-1.0.6.tgz",
-      "integrity": "sha512-omqjMDaY92pbn5HOX7f9IccLA+U1tA9GvtU4JrodiXFfYB7jPzzHpRzpglLAjtUV6bB557zwClJezTqnAiYnQA==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "define-properties": "^1.1.4",
-        "es-abstract": "^1.20.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/strip-ansi": {
-      "version": "6.0.1",
-      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
-      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
-      "dev": true,
-      "dependencies": {
-        "ansi-regex": "^5.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/strip-bom": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
-      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
-      "dev": true,
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/strip-indent": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/strip-indent/-/strip-indent-3.0.0.tgz",
-      "integrity": "sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ==",
-      "dev": true,
-      "dependencies": {
-        "min-indent": "^1.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/strip-json-comments": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
-      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/style-search": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/style-search/-/style-search-0.1.0.tgz",
-      "integrity": "sha512-Dj1Okke1C3uKKwQcetra4jSuk0DqbzbYtXipzFlFMZtowbF1x7BKJwB9AayVMyFARvU8EDrZdcax4At/452cAg==",
-      "dev": true
-    },
-    "node_modules/stylelint": {
-      "version": "15.6.2",
-      "resolved": "https://registry.npmjs.org/stylelint/-/stylelint-15.6.2.tgz",
-      "integrity": "sha512-fjQWwcdUye4DU+0oIxNGwawIPC5DvG5kdObY5Sg4rc87untze3gC/5g/ikePqVjrAsBUZjwMN+pZsAYbDO6ArQ==",
-      "dev": true,
-      "dependencies": {
-        "@csstools/css-parser-algorithms": "^2.1.1",
-        "@csstools/css-tokenizer": "^2.1.1",
-        "@csstools/media-query-list-parser": "^2.0.4",
-        "@csstools/selector-specificity": "^2.2.0",
-        "balanced-match": "^2.0.0",
-        "colord": "^2.9.3",
-        "cosmiconfig": "^8.1.3",
-        "css-functions-list": "^3.1.0",
-        "css-tree": "^2.3.1",
-        "debug": "^4.3.4",
-        "fast-glob": "^3.2.12",
-        "fastest-levenshtein": "^1.0.16",
-        "file-entry-cache": "^6.0.1",
-        "global-modules": "^2.0.0",
-        "globby": "^11.1.0",
-        "globjoin": "^0.1.4",
-        "html-tags": "^3.3.1",
-        "ignore": "^5.2.4",
-        "import-lazy": "^4.0.0",
-        "imurmurhash": "^0.1.4",
-        "is-plain-object": "^5.0.0",
-        "known-css-properties": "^0.27.0",
-        "mathml-tag-names": "^2.1.3",
-        "meow": "^9.0.0",
-        "micromatch": "^4.0.5",
-        "normalize-path": "^3.0.0",
-        "picocolors": "^1.0.0",
-        "postcss": "^8.4.23",
-        "postcss-media-query-parser": "^0.2.3",
-        "postcss-resolve-nested-selector": "^0.1.1",
-        "postcss-safe-parser": "^6.0.0",
-        "postcss-selector-parser": "^6.0.12",
-        "postcss-value-parser": "^4.2.0",
-        "resolve-from": "^5.0.0",
-        "string-width": "^4.2.3",
-        "strip-ansi": "^6.0.1",
-        "style-search": "^0.1.0",
-        "supports-hyperlinks": "^3.0.0",
-        "svg-tags": "^1.0.0",
-        "table": "^6.8.1",
-        "v8-compile-cache": "^2.3.0",
-        "write-file-atomic": "^5.0.1"
-      },
-      "bin": {
-        "stylelint": "bin/stylelint.js"
-      },
-      "engines": {
-        "node": "^14.13.1 || >=16.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/stylelint"
-      }
-    },
-    "node_modules/stylelint-config-recommended": {
-      "version": "12.0.0",
-      "resolved": "https://registry.npmjs.org/stylelint-config-recommended/-/stylelint-config-recommended-12.0.0.tgz",
-      "integrity": "sha512-x6x8QNARrGO2sG6iURkzqL+Dp+4bJorPMMRNPScdvaUK8PsynriOcMW7AFDKqkWAS5wbue/u8fUT/4ynzcmqdQ==",
-      "dev": true,
-      "peerDependencies": {
-        "stylelint": "^15.5.0"
-      }
-    },
-    "node_modules/stylelint-config-standard": {
-      "version": "33.0.0",
-      "resolved": "https://registry.npmjs.org/stylelint-config-standard/-/stylelint-config-standard-33.0.0.tgz",
-      "integrity": "sha512-eyxnLWoXImUn77+ODIuW9qXBDNM+ALN68L3wT1lN2oNspZ7D9NVGlNHb2QCUn4xDug6VZLsh0tF8NyoYzkgTzg==",
-      "dev": true,
-      "dependencies": {
-        "stylelint-config-recommended": "^12.0.0"
-      },
-      "peerDependencies": {
-        "stylelint": "^15.5.0"
-      }
-    },
-    "node_modules/supports-color": {
-      "version": "5.5.0",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
-      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
-      "dev": true,
-      "dependencies": {
-        "has-flag": "^3.0.0"
-      },
-      "engines": {
-        "node": ">=4"
-      }
-    },
-    "node_modules/supports-hyperlinks": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/supports-hyperlinks/-/supports-hyperlinks-3.0.0.tgz",
-      "integrity": "sha512-QBDPHyPQDRTy9ku4URNGY5Lah8PAaXs6tAAwp55sL5WCsSW7GIfdf6W5ixfziW+t7wh3GVvHyHHyQ1ESsoRvaA==",
-      "dev": true,
-      "dependencies": {
-        "has-flag": "^4.0.0",
-        "supports-color": "^7.0.0"
-      },
-      "engines": {
-        "node": ">=14.18"
-      }
-    },
-    "node_modules/supports-hyperlinks/node_modules/has-flag": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
-      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/supports-hyperlinks/node_modules/supports-color": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
-      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
-      "dev": true,
-      "dependencies": {
-        "has-flag": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/supports-preserve-symlinks-flag": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
-      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
-      "dev": true,
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/svg-tags": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/svg-tags/-/svg-tags-1.0.0.tgz",
-      "integrity": "sha512-ovssysQTa+luh7A5Weu3Rta6FJlFBBbInjOh722LIt6klpU2/HtdUbszju/G4devcvk8PGt7FCLv5wftu3THUA==",
-      "dev": true
-    },
-    "node_modules/table": {
-      "version": "6.8.1",
-      "resolved": "https://registry.npmjs.org/table/-/table-6.8.1.tgz",
-      "integrity": "sha512-Y4X9zqrCftUhMeH2EptSSERdVKt/nEdijTOacGD/97EKjhQ/Qs8RTlEGABSJNNN8lac9kheH+af7yAkEWlgneA==",
-      "dev": true,
-      "dependencies": {
-        "ajv": "^8.0.1",
-        "lodash.truncate": "^4.4.2",
-        "slice-ansi": "^4.0.0",
-        "string-width": "^4.2.3",
-        "strip-ansi": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=10.0.0"
-      }
-    },
-    "node_modules/text-table": {
-      "version": "0.2.0",
-      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
-      "integrity": "sha512-N+8UisAXDGk8PFXP4HAzVR9nbfmVJ3zYLAWiTIoqC5v5isinhr+r5uaO8+7r3BMfuNIufIsA7RdpVgacC2cSpw==",
-      "dev": true
-    },
-    "node_modules/to-regex-range": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
-      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
-      "dev": true,
-      "dependencies": {
-        "is-number": "^7.0.0"
-      },
-      "engines": {
-        "node": ">=8.0"
-      }
-    },
-    "node_modules/trim-newlines": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/trim-newlines/-/trim-newlines-3.0.1.tgz",
-      "integrity": "sha512-c1PTsA3tYrIsLGkJkzHF+w9F2EyxfXGo4UyJc4pFL++FMjnq0HJS69T3M7d//gKrFKwy429bouPescbjecU+Zw==",
-      "dev": true,
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/tslib": {
-      "version": "1.14.1",
-      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
-      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
-      "dev": true
-    },
-    "node_modules/tsutils": {
-      "version": "3.21.0",
-      "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-3.21.0.tgz",
-      "integrity": "sha512-mHKK3iUXL+3UF6xL5k0PEhKRUBKPBCv/+RkEOpjRWxxx27KKRBmmA60A9pgOUvMi8GKhRMPEmjBRPzs2W7O1OA==",
-      "dev": true,
-      "dependencies": {
-        "tslib": "^1.8.1"
-      },
-      "engines": {
-        "node": ">= 6"
-      },
-      "peerDependencies": {
-        "typescript": ">=2.8.0 || >= 3.2.0-dev || >= 3.3.0-dev || >= 3.4.0-dev || >= 3.5.0-dev || >= 3.6.0-dev || >= 3.6.0-beta || >= 3.7.0-dev || >= 3.7.0-beta"
-      }
-    },
-    "node_modules/type-check": {
-      "version": "0.4.0",
-      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.4.0.tgz",
-      "integrity": "sha512-XleUoc9uwGXqjWwXaUTZAmzMcFZ5858QA2vvx1Ur5xIcixXIP+8LnFDgRplU30us6teqdlskFfu+ae4K79Ooew==",
-      "dev": true,
-      "dependencies": {
-        "prelude-ls": "^1.2.1"
-      },
-      "engines": {
-        "node": ">= 0.8.0"
-      }
-    },
-    "node_modules/type-fest": {
-      "version": "0.18.1",
-      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.18.1.tgz",
-      "integrity": "sha512-OIAYXk8+ISY+qTOwkHtKqzAuxchoMiD9Udx+FSGQDuiRR+PJKJHc2NJAXlbhkGwTt/4/nKZxELY1w3ReWOL8mw==",
-      "dev": true,
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    },
-    "node_modules/typed-array-length": {
-      "version": "1.0.4",
-      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.4.tgz",
-      "integrity": "sha512-KjZypGq+I/H7HI5HlOoGHkWUUGq+Q0TPhQurLbyrVrvnKTBgzLhIJ7j6J/XTQOi0d1RjyZ0wdas8bKs2p0x3Ng==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "for-each": "^0.3.3",
-        "is-typed-array": "^1.1.9"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/typescript": {
-      "version": "5.0.4",
-      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.0.4.tgz",
-      "integrity": "sha512-cW9T5W9xY37cc+jfEnaUvX91foxtHkza3Nw3wkoF4sSlKn0MONdkdEndig/qPBWXNkmplh3NzayQzCiHM4/hqw==",
-      "dev": true,
-      "bin": {
-        "tsc": "bin/tsc",
-        "tsserver": "bin/tsserver"
-      },
-      "engines": {
-        "node": ">=12.20"
-      }
-    },
-    "node_modules/unbox-primitive": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/unbox-primitive/-/unbox-primitive-1.0.2.tgz",
-      "integrity": "sha512-61pPlCD9h51VoreyJ0BReideM3MDKMKnh6+V9L08331ipq6Q8OFXZYiqP6n/tbHx4s5I9uRhcye6BrbkizkBDw==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.2",
-        "has-bigints": "^1.0.2",
-        "has-symbols": "^1.0.3",
-        "which-boxed-primitive": "^1.0.2"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/uri-js": {
-      "version": "4.4.1",
-      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
-      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
-      "dev": true,
-      "dependencies": {
-        "punycode": "^2.1.0"
-      }
-    },
-    "node_modules/util-deprecate": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
-      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
-      "dev": true
-    },
-    "node_modules/v8-compile-cache": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/v8-compile-cache/-/v8-compile-cache-2.3.0.tgz",
-      "integrity": "sha512-l8lCEmLcLYZh4nbunNZvQCJc5pv7+RCwa8q/LdUx8u7lsWvPDKmpodJAJNwkAhJC//dFY48KuIEmjtd4RViDrA==",
-      "dev": true
-    },
-    "node_modules/validate-npm-package-license": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
-      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
-      "dev": true,
-      "dependencies": {
-        "spdx-correct": "^3.0.0",
-        "spdx-expression-parse": "^3.0.0"
-      }
-    },
-    "node_modules/which": {
-      "version": "1.3.1",
-      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
-      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
-      "dev": true,
-      "dependencies": {
-        "isexe": "^2.0.0"
-      },
-      "bin": {
-        "which": "bin/which"
-      }
-    },
-    "node_modules/which-boxed-primitive": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/which-boxed-primitive/-/which-boxed-primitive-1.0.2.tgz",
-      "integrity": "sha512-bwZdv0AKLpplFY2KZRX6TvyuN7ojjr7lwkg6ml0roIy9YeuSr7JS372qlNW18UQYzgYK9ziGcerWqZOmEn9VNg==",
-      "dev": true,
-      "dependencies": {
-        "is-bigint": "^1.0.1",
-        "is-boolean-object": "^1.1.0",
-        "is-number-object": "^1.0.4",
-        "is-string": "^1.0.5",
-        "is-symbol": "^1.0.3"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/which-typed-array": {
-      "version": "1.1.9",
-      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.9.tgz",
-      "integrity": "sha512-w9c4xkx6mPidwp7180ckYWfMmvxpjlZuIudNtDf4N/tTAUB8VJbX25qZoAsrtGuYNnGw3pa0AXgbGKRB8/EceA==",
-      "dev": true,
-      "dependencies": {
-        "available-typed-arrays": "^1.0.5",
-        "call-bind": "^1.0.2",
-        "for-each": "^0.3.3",
-        "gopd": "^1.0.1",
-        "has-tostringtag": "^1.0.0",
-        "is-typed-array": "^1.1.10"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/wrappy": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
-      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
-      "dev": true
-    },
-    "node_modules/write-file-atomic": {
-      "version": "5.0.1",
-      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-5.0.1.tgz",
-      "integrity": "sha512-+QU2zd6OTD8XWIJCbffaiQeH9U73qIqafo1x6V1snCWYGJf6cVE0cDR4D8xRzcEnfI21IFrUPzPGtcPf8AC+Rw==",
-      "dev": true,
-      "dependencies": {
-        "imurmurhash": "^0.1.4",
-        "signal-exit": "^4.0.1"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/yallist": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
-      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
-      "dev": true
-    },
-    "node_modules/yargs-parser": {
-      "version": "20.2.9",
-      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
-      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
-      "dev": true,
-      "engines": {
-        "node": ">=10"
-      }
-    },
-    "node_modules/yocto-queue": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
-      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
-      "dev": true,
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/sindresorhus"
-      }
-    }
-  }
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/package.json b/src/cmd/vendor/golang.org/x/telemetry/package.json
deleted file mode 100644
index 3680ce226141d9..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/package.json
+++ /dev/null
@@ -1,23 +0,0 @@
-{
-  "scripts": {
-    "eslint": "eslint . --fix",
-    "stylelint": "stylelint '**/*.css' --fix",
-    "prettier": "prettier --write **/*.{css,ts,md,yaml} !**/*.min.css",
-    "all": "run-s --continue-on-error eslint stylelint prettier"
-  },
-  "devDependencies": {
-    "@typescript-eslint/eslint-plugin": "5.59.6",
-    "@typescript-eslint/parser": "5.59.6",
-    "eslint": "8.40.0",
-    "eslint-config-prettier": "8.8.0",
-    "npm-run-all": "4.1.5",
-    "prettier": "2.8.8",
-    "stylelint": "15.6.2",
-    "stylelint-config-standard": "33.0.0",
-    "typescript": "5.0.4"
-  },
-  "dependencies": {
-    "@observablehq/plot": "0.6.9",
-    "d3": "7.8.5"
-  }
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/start.go b/src/cmd/vendor/golang.org/x/telemetry/start.go
deleted file mode 100644
index e34086e3e6d40e..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/start.go
+++ /dev/null
@@ -1,358 +0,0 @@
-// Copyright 2024 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package telemetry
-
-import (
-	"fmt"
-	"log"
-	"os"
-	"os/exec"
-	"path/filepath"
-	"sync"
-	"time"
-
-	"golang.org/x/sync/errgroup"
-	"golang.org/x/telemetry/counter"
-	"golang.org/x/telemetry/internal/crashmonitor"
-	"golang.org/x/telemetry/internal/telemetry"
-	"golang.org/x/telemetry/internal/upload"
-)
-
-// Config controls the behavior of [Start].
-type Config struct {
-	// ReportCrashes, if set, will enable crash reporting.
-	// ReportCrashes uses the [debug.SetCrashOutput] mechanism, which is a
-	// process-wide resource.
-	// Do not make other calls to that function within your application.
-	// ReportCrashes is a non-functional unless the program is built with go1.23+.
-	ReportCrashes bool
-
-	// Upload causes this program to periodically upload approved counters
-	// from the local telemetry database to telemetry.go.dev.
-	//
-	// This option has no effect unless the user has given consent
-	// to enable data collection, for example by running
-	// cmd/gotelemetry or affirming the gopls dialog.
-	//
-	// (This feature is expected to be used only by gopls.
-	// Longer term, the go command may become the sole program
-	// responsible for uploading.)
-	Upload bool
-
-	// TelemetryDir, if set, will specify an alternate telemetry
-	// directory to write data to. If not set, it uses the default
-	// directory.
-	// This field is intended to be used for isolating testing environments.
-	TelemetryDir string
-
-	// UploadStartTime, if set, overrides the time used as the upload start time,
-	// which is the time used by the upload logic to determine whether counter
-	// file data should be uploaded. Only counter files that have expired before
-	// the start time are considered for upload.
-	//
-	// This field can be used to simulate a future upload that collects recently
-	// modified counters.
-	UploadStartTime time.Time
-
-	// UploadURL, if set, overrides the URL used to receive uploaded reports. If
-	// unset, this URL defaults to https://telemetry.go.dev/upload.
-	UploadURL string
-}
-
-// Start initializes telemetry using the specified configuration.
-//
-// Start opens the local telemetry database so that counter increment
-// operations are durably recorded in the local file system.
-//
-// If [Config.Upload] is set, and the user has opted in to telemetry
-// uploading, this process may attempt to upload approved counters
-// to telemetry.go.dev.
-//
-// If [Config.ReportCrashes] is set, any fatal crash will be
-// recorded by incrementing a counter named for the stack of the
-// first running goroutine in the traceback.
-//
-// If either of these flags is set, Start re-executes the current
-// executable as a child process, in a special mode in which it
-// acts as a telemetry sidecar for the parent process (the application).
-// In that mode, the call to Start will never return, so Start must
-// be called immediately within main, even before such things as
-// inspecting the command line. The application should avoid expensive
-// steps or external side effects in init functions, as they will
-// be executed twice (parent and child).
-//
-// Start returns a StartResult, which may be awaited via [StartResult.Wait] to
-// wait for all work done by Start to complete.
-func Start(config Config) *StartResult {
-	switch v := os.Getenv(telemetryChildVar); v {
-	case "":
-		// The subprocess started by parent has GO_TELEMETRY_CHILD=1.
-		return parent(config)
-	case "1":
-		child(config) // child will exit the process when it's done.
-	case "2":
-		// Do nothing: this was executed directly or indirectly by a child.
-	default:
-		log.Fatalf("unexpected value for %q: %q", telemetryChildVar, v)
-	}
-
-	return &StartResult{}
-}
-
-// MaybeChild executes the telemetry child logic if the calling program is
-// the telemetry child process, and does nothing otherwise. It is meant to be
-// called as the first thing in a program that uses telemetry.Start but cannot
-// call telemetry.Start immediately when it starts.
-func MaybeChild(config Config) {
-	if v := os.Getenv(telemetryChildVar); v == "1" {
-		child(config) // child will exit the process when it's done.
-	}
-	// other values of the telemetryChildVar environment variable
-	// will be handled by telemetry.Start.
-}
-
-// A StartResult is a handle to the result of a call to [Start]. Call
-// [StartResult.Wait] to wait for the completion of all work done on behalf of
-// Start.
-type StartResult struct {
-	wg sync.WaitGroup
-}
-
-// Wait waits for the completion of all work initiated by [Start].
-func (res *StartResult) Wait() {
-	if res == nil {
-		return
-	}
-	res.wg.Wait()
-}
-
-var daemonize = func(cmd *exec.Cmd) {}
-
-// If telemetryChildVar is set to "1" in the environment, this is the telemetry
-// child.
-//
-// If telemetryChildVar is set to "2", this is a child of the child, and no
-// further forking should occur.
-const telemetryChildVar = "GO_TELEMETRY_CHILD"
-
-// If telemetryUploadVar is set to "1" in the environment, the upload token has been
-// acquired by the parent, and the child should attempt an upload.
-const telemetryUploadVar = "GO_TELEMETRY_CHILD_UPLOAD"
-
-func parent(config Config) *StartResult {
-	if config.TelemetryDir != "" {
-		telemetry.Default = telemetry.NewDir(config.TelemetryDir)
-	}
-	result := new(StartResult)
-
-	mode, _ := telemetry.Default.Mode()
-	if mode == "off" {
-		// Telemetry is turned off. Crash reporting doesn't work without telemetry
-		// at least set to "local". The upload process runs in both "on" and "local" modes.
-		// In local mode the upload process builds local reports but does not do the upload.
-		return result
-	}
-
-	counter.Open()
-
-	if _, err := os.Stat(telemetry.Default.LocalDir()); err != nil {
-		// There was a problem statting LocalDir, which is needed for both
-		// crash monitoring and counter uploading. Most likely, there was an
-		// error creating telemetry.LocalDir in the counter.Open call above.
-		// Don't start the child.
-		return result
-	}
-
-	childShouldUpload := config.Upload && acquireUploadToken()
-	reportCrashes := config.ReportCrashes && crashmonitor.Supported()
-
-	if reportCrashes || childShouldUpload {
-		startChild(reportCrashes, childShouldUpload, result)
-	}
-
-	return result
-}
-
-func startChild(reportCrashes, upload bool, result *StartResult) {
-	// This process is the application (parent).
-	// Fork+exec the telemetry child.
-	exe, err := os.Executable()
-	if err != nil {
-		// There was an error getting os.Executable. It's possible
-		// for this to happen on AIX if os.Args[0] is not an absolute
-		// path and we can't find os.Args[0] in PATH.
-		log.Printf("failed to start telemetry sidecar: os.Executable: %v", err)
-		return
-	}
-	cmd := exec.Command(exe, "** telemetry **") // this unused arg is just for ps(1)
-	daemonize(cmd)
-	cmd.Env = append(os.Environ(), telemetryChildVar+"=1")
-	if upload {
-		cmd.Env = append(cmd.Env, telemetryUploadVar+"=1")
-	}
-	cmd.Dir = telemetry.Default.LocalDir()
-
-	// The child process must write to a log file, not
-	// the stderr file it inherited from the parent, as
-	// the child may outlive the parent but should not prolong
-	// the life of any pipes created (by the grandparent)
-	// to gather the output of the parent.
-	//
-	// By default, we discard the child process's stderr,
-	// but in line with the uploader, log to a file in debug
-	// only if that directory was created by the user.
-	fd, err := os.Stat(telemetry.Default.DebugDir())
-	if err != nil {
-		if !os.IsNotExist(err) {
-			log.Printf("failed to stat debug directory: %v", err)
-			return
-		}
-	} else if fd.IsDir() {
-		// local/debug exists and is a directory. Set stderr to a log file path
-		// in local/debug.
-		childLogPath := filepath.Join(telemetry.Default.DebugDir(), "sidecar.log")
-		childLog, err := os.OpenFile(childLogPath, os.O_WRONLY|os.O_CREATE|os.O_APPEND, 0600)
-		if err != nil {
-			log.Printf("opening sidecar log file for child: %v", err)
-			return
-		}
-		defer childLog.Close()
-		cmd.Stderr = childLog
-	}
-
-	var crashOutputFile *os.File
-	if reportCrashes {
-		pipe, err := cmd.StdinPipe()
-		if err != nil {
-			log.Printf("StdinPipe: %v", err)
-			return
-		}
-
-		crashOutputFile = pipe.(*os.File) // (this conversion is safe)
-	}
-
-	if err := cmd.Start(); err != nil {
-		// The child couldn't be started. Log the failure.
-		log.Printf("can't start telemetry child process: %v", err)
-		return
-	}
-	if reportCrashes {
-		crashmonitor.Parent(crashOutputFile)
-	}
-	result.wg.Add(1)
-	go func() {
-		cmd.Wait() // Release resources if cmd happens not to outlive this process.
-		result.wg.Done()
-	}()
-}
-
-func child(config Config) {
-	log.SetPrefix(fmt.Sprintf("telemetry-sidecar (pid %v): ", os.Getpid()))
-
-	if config.TelemetryDir != "" {
-		telemetry.Default = telemetry.NewDir(config.TelemetryDir)
-	}
-
-	// golang/go#67211: be sure to set telemetryChildVar before running the
-	// child, because the child itself invokes the go command to download the
-	// upload config. If the telemetryChildVar variable is still set to "1",
-	// that delegated go command may think that it is itself a telemetry
-	// child.
-	//
-	// On the other hand, if telemetryChildVar were simply unset, then the
-	// delegated go commands would fork themselves recursively. Short-circuit
-	// this recursion.
-	os.Setenv(telemetryChildVar, "2")
-	upload := os.Getenv(telemetryUploadVar) == "1"
-
-	reportCrashes := config.ReportCrashes && crashmonitor.Supported()
-	uploadStartTime := config.UploadStartTime
-	uploadURL := config.UploadURL
-
-	// The crashmonitor and/or upload process may themselves record counters.
-	counter.Open()
-
-	// Start crashmonitoring and uploading depending on what's requested
-	// and wait for the longer running child to complete before exiting:
-	// if we collected a crash before the upload finished, wait for the
-	// upload to finish before exiting
-	var g errgroup.Group
-
-	if reportCrashes {
-		g.Go(func() error {
-			crashmonitor.Child()
-			return nil
-		})
-	}
-	if upload {
-		g.Go(func() error {
-			uploaderChild(uploadStartTime, uploadURL)
-			return nil
-		})
-	}
-	g.Wait()
-
-	os.Exit(0)
-}
-
-func uploaderChild(asof time.Time, uploadURL string) {
-	if err := upload.Run(upload.RunConfig{
-		UploadURL: uploadURL,
-		LogWriter: os.Stderr,
-		StartTime: asof,
-	}); err != nil {
-		log.Printf("upload failed: %v", err)
-	}
-}
-
-// acquireUploadToken acquires a token permitting the caller to upload.
-// To limit the frequency of uploads, only one token is issue per
-// machine per time period.
-// The boolean indicates whether the token was acquired.
-func acquireUploadToken() bool {
-	if telemetry.Default.LocalDir() == "" {
-		// The telemetry dir wasn't initialized properly, probably because
-		// os.UserConfigDir did not complete successfully. In that case
-		// there are no counters to upload, so we should just do nothing.
-		return false
-	}
-	tokenfile := filepath.Join(telemetry.Default.LocalDir(), "upload.token")
-	const period = 24 * time.Hour
-
-	// A process acquires a token by successfully creating a
-	// well-known file. If the file already exists and has an
-	// mtime age less then than the period, the process does
-	// not acquire the token. If the file is older than the
-	// period, the process is allowed to remove the file and
-	// try to re-create it.
-	fi, err := os.Stat(tokenfile)
-	if err == nil {
-		if time.Since(fi.ModTime()) < period {
-			return false
-		}
-		// There's a possible race here where two processes check the
-		// token file and see that it's older than the period, then the
-		// first one removes it and creates another, and then a second one
-		// removes the newly created file and creates yet another
-		// file. Then both processes would act as though they had the token.
-		// This is very rare, but it's also okay because we're only grabbing
-		// the token to do rate limiting, not for correctness.
-		_ = os.Remove(tokenfile)
-	} else if !os.IsNotExist(err) {
-		log.Printf("error acquiring upload taken: statting token file: %v", err)
-		return false
-	}
-
-	f, err := os.OpenFile(tokenfile, os.O_CREATE|os.O_EXCL, 0666)
-	if err != nil {
-		if os.IsExist(err) {
-			return false
-		}
-		log.Printf("error acquiring upload token: creating token file: %v", err)
-		return false
-	}
-	_ = f.Close()
-	return true
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/start_posix.go b/src/cmd/vendor/golang.org/x/telemetry/start_posix.go
deleted file mode 100644
index 078b2353844730..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/start_posix.go
+++ /dev/null
@@ -1,22 +0,0 @@
-// Copyright 2024 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-//go:build darwin || dragonfly || freebsd || linux || netbsd || openbsd || solaris
-
-package telemetry
-
-import (
-	"os/exec"
-	"syscall"
-)
-
-func init() {
-	daemonize = daemonizePosix
-}
-
-func daemonizePosix(cmd *exec.Cmd) {
-	cmd.SysProcAttr = &syscall.SysProcAttr{
-		Setsid: true,
-	}
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/start_windows.go b/src/cmd/vendor/golang.org/x/telemetry/start_windows.go
deleted file mode 100644
index ceb2c0298416b6..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/start_windows.go
+++ /dev/null
@@ -1,29 +0,0 @@
-// Copyright 2024 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-//go:build windows
-
-package telemetry
-
-import (
-	"os/exec"
-	"syscall"
-
-	"golang.org/x/sys/windows"
-)
-
-func init() {
-	daemonize = daemonizeWindows
-}
-
-func daemonizeWindows(cmd *exec.Cmd) {
-	// Set DETACHED_PROCESS creation flag so that closing
-	// the console window the parent process was run in
-	// does not kill the child.
-	// See documentation of creation flags in the Microsoft documentation:
-	// https://learn.microsoft.com/en-us/windows/win32/procthread/process-creation-flags
-	cmd.SysProcAttr = &syscall.SysProcAttr{
-		CreationFlags: windows.DETACHED_PROCESS,
-	}
-}
diff --git a/src/cmd/vendor/golang.org/x/telemetry/tsconfig.json b/src/cmd/vendor/golang.org/x/telemetry/tsconfig.json
deleted file mode 100644
index 7833e310bbe990..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/tsconfig.json
+++ /dev/null
@@ -1,26 +0,0 @@
-{
-  /* Visit https://aka.ms/tsconfig.json to read more about this file */
-  "compilerOptions": {
-    "target": "ES2022",
-    "module": "ES2022",
-    "moduleResolution": "node",
-
-    "strict": true,
-    "allowUnusedLabels": false,
-    "allowUnreachableCode": false,
-    "exactOptionalPropertyTypes": true,
-    "noFallthroughCasesInSwitch": true,
-    "noImplicitOverride": true,
-    "noImplicitReturns": true,
-    "noPropertyAccessFromIndexSignature": true,
-    "noUncheckedIndexedAccess": true,
-    "noUnusedLocals": true,
-    "noUnusedParameters": true,
-
-    "checkJs": true,
-
-    "esModuleInterop": true,
-    "skipLibCheck": true,
-    "forceConsistentCasingInFileNames": true
-  },
-}
\ No newline at end of file
diff --git a/src/cmd/vendor/golang.org/x/telemetry/types_alias.go b/src/cmd/vendor/golang.org/x/telemetry/types_alias.go
deleted file mode 100644
index 83ba7e05a0535c..00000000000000
--- a/src/cmd/vendor/golang.org/x/telemetry/types_alias.go
+++ /dev/null
@@ -1,21 +0,0 @@
-// Copyright 2024 The Go Authors. All rights reserved.
-// Use of this source code is governed by a BSD-style
-// license that can be found in the LICENSE file.
-
-package telemetry
-
-import "golang.org/x/telemetry/internal/telemetry"
-
-// Common types and directories used by multiple packages.
-
-// An UploadConfig controls what data is uploaded.
-type UploadConfig = telemetry.UploadConfig
-
-type ProgramConfig = telemetry.ProgramConfig
-
-type CounterConfig = telemetry.CounterConfig
-
-// A Report is what's uploaded (or saved locally)
-type Report = telemetry.Report
-
-type ProgramReport = telemetry.ProgramReport
diff --git a/src/cmd/vendor/modules.txt b/src/cmd/vendor/modules.txt
index 281989b1e2c5c2..753fdd97241068 100644
--- a/src/cmd/vendor/modules.txt
+++ b/src/cmd/vendor/modules.txt
@@ -1,3 +1,9 @@
+# code.cloudfoundry.org/clock v0.0.0-20180518195852-02e53af36e6c
+## explicit
+code.cloudfoundry.org/clock
+# github.com/gofrs/uuid v3.3.0+incompatible
+## explicit
+github.com/gofrs/uuid
 # github.com/google/pprof v0.0.0-20241101162523-b92577c0c142
 ## explicit; go 1.22
 github.com/google/pprof/driver
@@ -16,6 +22,13 @@ github.com/google/pprof/third_party/svgpan
 # github.com/ianlancetaylor/demangle v0.0.0-20240912202439-0a2b6291aafd
 ## explicit; go 1.13
 github.com/ianlancetaylor/demangle
+# github.com/microsoft/ApplicationInsights-Go v0.4.4
+## explicit; go 1.12
+github.com/microsoft/ApplicationInsights-Go/appinsights
+github.com/microsoft/ApplicationInsights-Go/appinsights/contracts
+# github.com/microsoft/go-deviceid v1.0.0
+## explicit; go 1.8
+github.com/microsoft/go-deviceid
 # golang.org/x/arch v0.12.0
 ## explicit; go 1.18
 golang.org/x/arch/arm/armasm
@@ -41,25 +54,20 @@ golang.org/x/mod/sumdb/tlog
 golang.org/x/mod/zip
 # golang.org/x/sync v0.10.0
 ## explicit; go 1.18
-golang.org/x/sync/errgroup
 golang.org/x/sync/semaphore
 # golang.org/x/sys v0.28.0
 ## explicit; go 1.18
 golang.org/x/sys/plan9
 golang.org/x/sys/unix
 golang.org/x/sys/windows
+golang.org/x/sys/windows/registry
 # golang.org/x/telemetry v0.0.0-20241204182053-c0ac0e154df3
 ## explicit; go 1.22.0
-golang.org/x/telemetry
 golang.org/x/telemetry/counter
 golang.org/x/telemetry/counter/countertest
-golang.org/x/telemetry/internal/config
-golang.org/x/telemetry/internal/configstore
 golang.org/x/telemetry/internal/counter
-golang.org/x/telemetry/internal/crashmonitor
 golang.org/x/telemetry/internal/mmap
 golang.org/x/telemetry/internal/telemetry
-golang.org/x/telemetry/internal/upload
 # golang.org/x/term v0.27.0
 ## explicit; go 1.18
 golang.org/x/term
