From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Davis Goodin <dagood@microsoft.com>
Date: Mon, 12 Jun 2023 17:46:36 -0500
Subject: [PATCH] Add informative backend configuration errors

Includes new files that generate informative compile errors when the
backends aren't configured correctly. Direct users to our docs.
---
 src/runtime/backendconflict_boring_cng.go     | 17 ++++
 src/runtime/backendconflict_boring_openssl.go | 17 ++++
 src/runtime/backendconflict_cng_openssl.go    | 17 ++++
 .../backenderr_systemcrypto_nobackend.go      | 16 +++
 src/runtime/backenderr_test.go                | 98 +++++++++++++++++++
 src/runtime/backenderrs.go                    | 24 +++++
 6 files changed, 189 insertions(+)
 create mode 100644 src/runtime/backendconflict_boring_cng.go
 create mode 100644 src/runtime/backendconflict_boring_openssl.go
 create mode 100644 src/runtime/backendconflict_cng_openssl.go
 create mode 100644 src/runtime/backenderr_systemcrypto_nobackend.go
 create mode 100644 src/runtime/backenderr_test.go
 create mode 100644 src/runtime/backenderrs.go

diff --git a/src/runtime/backendconflict_boring_cng.go b/src/runtime/backendconflict_boring_cng.go
new file mode 100644
index 00000000000000..e941d0c3635d30
--- /dev/null
+++ b/src/runtime/backendconflict_boring_cng.go
@@ -0,0 +1,17 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by backenderrs.go using the mkbackenderrs.go tool. DO NOT EDIT.
+
+//go:build goexperiment.boringcrypto && goexperiment.cngcrypto
+
+package runtime
+
+func init() {
+	`
+	The boring and cng backends are both enabled, but they are mutually exclusive.
+	Please make sure only one crypto backend experiment is enabled by GOEXPERIMENT or '-tags'.
+	For more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips
+	`
+}
diff --git a/src/runtime/backendconflict_boring_openssl.go b/src/runtime/backendconflict_boring_openssl.go
new file mode 100644
index 00000000000000..aed468fd51e4fb
--- /dev/null
+++ b/src/runtime/backendconflict_boring_openssl.go
@@ -0,0 +1,17 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by backenderrs.go using the mkbackenderrs.go tool. DO NOT EDIT.
+
+//go:build goexperiment.boringcrypto && goexperiment.opensslcrypto
+
+package runtime
+
+func init() {
+	`
+	The boring and openssl backends are both enabled, but they are mutually exclusive.
+	Please make sure only one crypto backend experiment is enabled by GOEXPERIMENT or '-tags'.
+	For more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips
+	`
+}
diff --git a/src/runtime/backendconflict_cng_openssl.go b/src/runtime/backendconflict_cng_openssl.go
new file mode 100644
index 00000000000000..bb9067dfdf35b8
--- /dev/null
+++ b/src/runtime/backendconflict_cng_openssl.go
@@ -0,0 +1,17 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by backenderrs.go using the mkbackenderrs.go tool. DO NOT EDIT.
+
+//go:build goexperiment.cngcrypto && goexperiment.opensslcrypto
+
+package runtime
+
+func init() {
+	`
+	The cng and openssl backends are both enabled, but they are mutually exclusive.
+	Please make sure only one crypto backend experiment is enabled by GOEXPERIMENT or '-tags'.
+	For more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips
+	`
+}
diff --git a/src/runtime/backenderr_systemcrypto_nobackend.go b/src/runtime/backenderr_systemcrypto_nobackend.go
new file mode 100644
index 00000000000000..f7d8f7a1f9da15
--- /dev/null
+++ b/src/runtime/backenderr_systemcrypto_nobackend.go
@@ -0,0 +1,16 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by backenderrs.go using the mkbackenderrs.go tool. DO NOT EDIT.
+
+//go:build goexperiment.systemcrypto && !goexperiment.boringcrypto && !goexperiment.cngcrypto && !goexperiment.opensslcrypto
+
+package runtime
+
+func init() {
+	`
+	The systemcrypto feature is enabled, but it was unable to enable an appropriate crypto backend for the target GOOS.
+	For more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips
+	`
+}
diff --git a/src/runtime/backenderr_test.go b/src/runtime/backenderr_test.go
new file mode 100644
index 00000000000000..ddaca6acc1f46d
--- /dev/null
+++ b/src/runtime/backenderr_test.go
@@ -0,0 +1,98 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package runtime_test
+
+import (
+	"bytes"
+	"flag"
+	"os"
+	"testing"
+)
+
+var fixBackendErrs = flag.Bool("fixbackenderrs", false, "if true, update the generated backend error files")
+
+var backends = []struct {
+	name string
+	os   string
+}{
+	{"boring", "linux"},
+	{"cng", "windows"},
+	{"openssl", "linux"},
+}
+
+// TestGeneratedBackendErrorFiles tests that the current backend error files are
+// the same as what would generated under the current conditions.
+//
+// The generation process reads the build constraints from the crypto backend
+// source files, so this test ensures they are kept in sync.
+//
+// See backenderrgenerator.go for more information.
+func TestGeneratedBackendErrorFiles(t *testing.T) {
+	for i := 0; i < len(backends); i++ {
+		for j := i + 1; j < len(backends); j++ {
+			testConflict(t, i, j)
+		}
+	}
+	testUnsatisfied(t)
+}
+
+// testConflict generates a file that fails if two backends are enabled at the
+// same time.
+func testConflict(t *testing.T, i, j int) {
+	a := backends[i].name
+	b := backends[j].name
+	testErrorFile(
+		t,
+		"backendconflict_"+a+"_"+b+".go",
+		"//go:build goexperiment."+a+"crypto && goexperiment."+b+"crypto",
+		"The "+a+" and "+b+" backends are both enabled, but they are mutually exclusive.",
+		"Please make sure only one crypto backend experiment is enabled by GOEXPERIMENT or '-tags'.")
+}
+
+// testUnsatisfied checks/generates a file that fails if systemcrypto is enabled
+// on an OS with no suitable backend.
+func testUnsatisfied(t *testing.T) {
+	constraint := "//go:build goexperiment.systemcrypto"
+	for _, b := range backends {
+		constraint += ` && !goexperiment.` + b.name + "crypto"
+	}
+	testErrorFile(
+		t,
+		"backenderr_systemcrypto_nobackend.go",
+		constraint,
+		"The systemcrypto feature is enabled, but it was unable to enable an appropriate crypto backend for the target GOOS.")
+}
+
+// testErrorFile checks/generates a Go file with a given build constraint that
+// fails to compile. The file uses an unused string to convey an error message
+// to the dev on the "go build" command line.
+func testErrorFile(t *testing.T, file, constraint string, message ...string) {
+	const header = `// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by backenderrs.go using the mkbackenderrs.go tool. DO NOT EDIT.`
+	c := header + "\n\n" + constraint + "\n\npackage runtime\n\nfunc init() {\n\t`\n"
+	for _, m := range message {
+		c += "\t" + m + "\n"
+	}
+	c += "\tFor more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips\n"
+	c += "\t`" + "\n}\n"
+	if *fixBackendErrs {
+		if err := os.WriteFile(file, []byte(c), 0o666); err != nil {
+			t.Fatal(err)
+		}
+	} else {
+		existing, err := os.ReadFile(file)
+		if err != nil {
+			t.Fatal(err)
+		}
+		if !bytes.Equal(existing, []byte(c)) {
+			t.Errorf("file %v doesn't match expected value; run 'go generate runtime' to fix", file)
+			t.Log("found:", string(existing))
+			t.Log("would generate:", c)
+		}
+	}
+}
diff --git a/src/runtime/backenderrs.go b/src/runtime/backenderrs.go
new file mode 100644
index 00000000000000..63ca2e944ac363
--- /dev/null
+++ b/src/runtime/backenderrs.go
@@ -0,0 +1,24 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package runtime
+
+// Generate Go files that detect issues with the backend selection and report an
+// error at compile time. This is done in the runtime package rather than the
+// crypto/internal/backend package to make sure these helpful errors will show
+// up. If the files were in the backend package, DuplicateDecl and other errors
+// would show up first, causing these informative errors to be skipped because
+// there are too many total errors already reported.
+//
+// The errors would also show up if we put these files in the crypto package
+// rather than the runtime package. Crypto is imported before the backend
+// backage, so the errors would show up. However, then these errors would show
+// up only if the Go program is using crypto. This could cause a confusing
+// situation: if the user has a misconfigured backend and doesn't use crypto in
+// their Go app, they will not get any errors. If they start using crypto later,
+// they would only then get an error, but the cause would be much less apparent.
+
+// Use "go generate -run fixbackenderrs ." to run only this generator.
+
+//go:generate go test -run TestGeneratedBackendErrorFiles -fixbackenderrs
