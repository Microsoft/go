From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mertakman <mertakman2012@gmail.com>
Date: Thu, 14 Nov 2024 13:32:53 +0000
Subject: [PATCH] Vendor crypto dsa backends

---
 .../microsoft/go-crypto-winnative/cng/aes.go     |  4 ++--
 .../microsoft/go-crypto-winnative/cng/des.go     |  7 +++----
 .../microsoft/go-crypto-winnative/cng/hash.go    | 16 +++-------------
 .../microsoft/go-crypto-winnative/cng/hkdf.go    | 13 +++++++++----
 src/vendor/modules.txt                           |  2 +-
 5 files changed, 18 insertions(+), 24 deletions(-)

diff --git a/src/vendor/github.com/microsoft/go-crypto-winnative/cng/aes.go b/src/vendor/github.com/microsoft/go-crypto-winnative/cng/aes.go
index caac632894556e..097a0fc77f0adb 100644
--- a/src/vendor/github.com/microsoft/go-crypto-winnative/cng/aes.go
+++ b/src/vendor/github.com/microsoft/go-crypto-winnative/cng/aes.go
@@ -7,6 +7,7 @@
 package cng
 
 import (
+	"bytes"
 	"crypto/cipher"
 	"errors"
 	"runtime"
@@ -28,8 +29,7 @@ func NewAESCipher(key []byte) (cipher.Block, error) {
 	if err != nil {
 		return nil, err
 	}
-	c := &aesCipher{kh: kh, key: make([]byte, len(key))}
-	copy(c.key, key)
+	c := &aesCipher{kh: kh, key: bytes.Clone(key)}
 	runtime.SetFinalizer(c, (*aesCipher).finalize)
 	return c, nil
 }
diff --git a/src/vendor/github.com/microsoft/go-crypto-winnative/cng/des.go b/src/vendor/github.com/microsoft/go-crypto-winnative/cng/des.go
index b0784affba0aa4..de3f05b84f1d82 100644
--- a/src/vendor/github.com/microsoft/go-crypto-winnative/cng/des.go
+++ b/src/vendor/github.com/microsoft/go-crypto-winnative/cng/des.go
@@ -7,6 +7,7 @@
 package cng
 
 import (
+	"bytes"
 	"crypto/cipher"
 	"runtime"
 
@@ -27,8 +28,7 @@ func NewDESCipher(key []byte) (cipher.Block, error) {
 	if err != nil {
 		return nil, err
 	}
-	c := &desCipher{kh: kh, alg: bcrypt.DES_ALGORITHM, key: make([]byte, len(key))}
-	copy(c.key, key)
+	c := &desCipher{kh: kh, alg: bcrypt.DES_ALGORITHM, key: bytes.Clone(key)}
 	runtime.SetFinalizer(c, (*desCipher).finalize)
 	return c, nil
 }
@@ -38,8 +38,7 @@ func NewTripleDESCipher(key []byte) (cipher.Block, error) {
 	if err != nil {
 		return nil, err
 	}
-	c := &desCipher{kh: kh, alg: bcrypt.DES3_ALGORITHM, key: make([]byte, len(key))}
-	copy(c.key, key)
+	c := &desCipher{kh: kh, alg: bcrypt.DES3_ALGORITHM, key: bytes.Clone(key)}
 	runtime.SetFinalizer(c, (*desCipher).finalize)
 	return c, nil
 }
diff --git a/src/vendor/github.com/microsoft/go-crypto-winnative/cng/hash.go b/src/vendor/github.com/microsoft/go-crypto-winnative/cng/hash.go
index c4f01e17dd4ca1..87b1c95dc7f911 100644
--- a/src/vendor/github.com/microsoft/go-crypto-winnative/cng/hash.go
+++ b/src/vendor/github.com/microsoft/go-crypto-winnative/cng/hash.go
@@ -7,6 +7,7 @@
 package cng
 
 import (
+	"bytes"
 	"crypto"
 	"hash"
 	"runtime"
@@ -194,12 +195,7 @@ func newHashX(id string, flag bcrypt.AlgorithmProviderFlags, key []byte) *hashX
 	if err != nil {
 		panic(err)
 	}
-	h := new(hashX)
-	h.alg = alg
-	if len(key) > 0 {
-		h.key = make([]byte, len(key))
-		copy(h.key, key)
-	}
+	h := &hashX{alg: alg, key: bytes.Clone(key)}
 	// Don't allocate hx.buf nor call bcrypt.CreateHash yet,
 	// which would be wasteful if the caller only wants to know
 	// the hash type. This is a common pattern in this package,
@@ -227,13 +223,7 @@ func (h *hashX) withCtx(fn func(ctx bcrypt.HASH_HANDLE) error) error {
 }
 
 func (h *hashX) Clone() (hash.Hash, error) {
-	h2 := &hashX{
-		alg: h.alg,
-	}
-	if h.key != nil {
-		h2.key = make([]byte, len(h.key))
-		copy(h2.key, h.key)
-	}
+	h2 := &hashX{alg: h.alg, key: bytes.Clone(h.key)}
 	err := h.withCtx(func(ctx bcrypt.HASH_HANDLE) error {
 		return bcrypt.DuplicateHash(ctx, &h2._ctx, nil, 0)
 	})
diff --git a/src/vendor/github.com/microsoft/go-crypto-winnative/cng/hkdf.go b/src/vendor/github.com/microsoft/go-crypto-winnative/cng/hkdf.go
index 655926ef635224..5338fb5c7b187c 100644
--- a/src/vendor/github.com/microsoft/go-crypto-winnative/cng/hkdf.go
+++ b/src/vendor/github.com/microsoft/go-crypto-winnative/cng/hkdf.go
@@ -156,14 +156,19 @@ func ExtractHKDF(h func() hash.Hash, secret, salt []byte) ([]byte, error) {
 		return nil, errors.New("cng: unknown key data blob version")
 	}
 	// KEY_DATA_BLOB_VERSION1 format is:
-	// cbHash uint32 // Big-endian
-	// hashName [cbHash]byte
+	// cbHashName uint32 // Big-endian
+	// pHashName [cbHash]byte
 	// key []byte // Rest of the blob
 	if len(blob) < 4 {
 		return nil, errors.New("cng: exported key is corrupted")
 	}
-	hashLength := binary.BigEndian.Uint32(blob[:])
-	return blob[4+hashLength:], nil
+	cbHashName := binary.BigEndian.Uint32(blob)
+	blob = blob[4:]
+	if len(blob) < int(cbHashName) {
+		return nil, errors.New("cng: exported key is corrupted")
+	}
+	// Skip pHashName.
+	return blob[cbHashName:], nil
 }
 
 func ExpandHKDF(h func() hash.Hash, pseudorandomKey, info []byte) (io.Reader, error) {
diff --git a/src/vendor/modules.txt b/src/vendor/modules.txt
index be1319fc942882..7c9bf41ea0bc87 100644
--- a/src/vendor/modules.txt
+++ b/src/vendor/modules.txt
@@ -2,7 +2,7 @@
 ## explicit; go 1.22
 github.com/golang-fips/openssl/v2
 github.com/golang-fips/openssl/v2/bbig
-# github.com/microsoft/go-crypto-winnative v0.0.0-20240929074641-3e2be6d20709
+# github.com/microsoft/go-crypto-winnative v0.0.0-20241031174928-19f07bc6df3d
 ## explicit; go 1.22
 github.com/microsoft/go-crypto-winnative/cng
 github.com/microsoft/go-crypto-winnative/cng/bbig
