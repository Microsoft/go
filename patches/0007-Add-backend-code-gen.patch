From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Davis Goodin <dagood@microsoft.com>
Date: Fri, 23 Jun 2023 11:58:31 -0500
Subject: [PATCH] Add backend code gen

Adds code generation that works with the final list of crypto backends
to add extra features and tie up loose ends in an easily maintained way.

Backend conflict error generator: creates files that generate
informative build errors when the backends aren't configured correctly.

"nobackend" build constraint generator: gathers the build constraints
for all the backends to create the "nobackend" constraint.

The generators also run during standard test runs in validation mode to
ensure the generated content is not out of date when backends are
added/removed or when their build constraints change.

To simplify patch maintenance, the generators are only run once, in this
patch. An alternative would be adding the generators in an earlier patch
and re-running the generators immediately for each backend patch. This
would make the direct connection between changes clearer, but make it
harder to update the generators and to deal with conflicts.

Use "go/bin/go generate crypto/internal/backend" after recently building
the repository to run the generators.
---
 src/cmd/dist/build.go                         |   2 +-
 src/cmd/dist/test.go                          |   9 +-
 src/cmd/internal/obj/x86/pcrelative_test.go   |   4 +
 src/cmd/internal/testdir/testdir_test.go      |   4 +
 src/cmd/link/internal/ld/stackcheck_test.go   |   2 +-
 src/cmd/link/link_test.go                     |   4 +-
 src/cmd/vet/vet_test.go                       |   2 +-
 src/crypto/internal/backend/backendgen.go     |  20 ++
 .../internal/backend/backendgen_test.go       | 279 ++++++++++++++++++
 src/crypto/internal/backend/nobackend.go      |   2 +-
 .../backenderr_gen_conflict_boring_cng.go     |  17 ++
 .../backenderr_gen_conflict_boring_openssl.go |  17 ++
 .../backenderr_gen_conflict_cng_openssl.go    |  17 ++
 .../backenderr_gen_nofallback_boring.go       |  19 ++
 src/runtime/backenderr_gen_nofallback_cng.go  |  19 ++
 .../backenderr_gen_nofallback_openssl.go      |  19 ++
 ...ckenderr_gen_requirefips_nosystemcrypto.go |  17 ++
 .../backenderr_gen_systemcrypto_nobackend.go  |  16 +
 src/syscall/exec_linux_test.go                |   2 +-
 19 files changed, 463 insertions(+), 8 deletions(-)
 create mode 100644 src/crypto/internal/backend/backendgen.go
 create mode 100644 src/crypto/internal/backend/backendgen_test.go
 create mode 100644 src/runtime/backenderr_gen_conflict_boring_cng.go
 create mode 100644 src/runtime/backenderr_gen_conflict_boring_openssl.go
 create mode 100644 src/runtime/backenderr_gen_conflict_cng_openssl.go
 create mode 100644 src/runtime/backenderr_gen_nofallback_boring.go
 create mode 100644 src/runtime/backenderr_gen_nofallback_cng.go
 create mode 100644 src/runtime/backenderr_gen_nofallback_openssl.go
 create mode 100644 src/runtime/backenderr_gen_requirefips_nosystemcrypto.go
 create mode 100644 src/runtime/backenderr_gen_systemcrypto_nobackend.go

diff --git a/src/cmd/dist/build.go b/src/cmd/dist/build.go
index 8973a871682816..61a2f52a462f4c 100644
--- a/src/cmd/dist/build.go
+++ b/src/cmd/dist/build.go
@@ -1472,7 +1472,7 @@ func cmdbootstrap() {
 	// Now that cmd/go is in charge of the build process, enable GOEXPERIMENT.
 	os.Setenv("GOEXPERIMENT", goexperiment)
 	// No need to enable PGO for toolchain2.
-	goInstall(toolenv(), goBootstrap, append([]string{"-pgo=off"}, toolchain...)...)
+	goInstall(toolenv(), goBootstrap, append([]string{"-pgo=off", "-tags=allow_missing_crypto_backend_fallback"}, toolchain...)...)
 	if debug {
 		run("", ShowOutput|CheckExit, pathf("%s/compile", tooldir), "-V=full")
 		copyfile(pathf("%s/compile2", tooldir), pathf("%s/compile", tooldir), writeExec)
diff --git a/src/cmd/dist/test.go b/src/cmd/dist/test.go
index a0525bf42e3c18..d123e25725eea2 100644
--- a/src/cmd/dist/test.go
+++ b/src/cmd/dist/test.go
@@ -153,7 +153,7 @@ func (t *tester) run() {
 	}
 
 	if !t.listMode {
-		if builder := os.Getenv("GO_BUILDER_NAME"); builder == "" {
+		if builder, scripted := os.Getenv("GO_BUILDER_NAME"), os.Getenv("GO_MSFT_SCRIPTED_BUILD"); builder == "" && scripted != "1" {
 			// Ensure that installed commands are up to date, even with -no-rebuild,
 			// so that tests that run commands end up testing what's actually on disk.
 			// If everything is up-to-date, this is a no-op.
@@ -166,6 +166,12 @@ func (t *tester) run() {
 			// and virtualization we usually start with a clean GOCACHE, so we would
 			// end up rebuilding large parts of the standard library that aren't
 			// otherwise relevant to the actual set of packages under test.
+			//
+			// Also skip this step if GO_MSFT_SCRIPTED_BUILD is 1. This is
+			// similar to running in a builder, but it works locally. However,
+			// the skip isn't for performance reasons: rebuilding the toolchain
+			// may not work. For example, testing the OpenSSLCrypto GOEXPERIMENT
+			// requires cgo, but cgo is disabled by toolenv().
 			goInstall(toolenv(), gorootBinGo, toolchain...)
 			goInstall(toolenv(), gorootBinGo, toolchain...)
 			goInstall(toolenv(), gorootBinGo, "cmd")
@@ -761,6 +767,7 @@ func (t *tester) registerTests() {
 				ldflags:   "-linkmode=internal",
 				env:       []string{"CGO_ENABLED=0"},
 				pkg:       "reflect",
+				tags:      []string{"allow_missing_crypto_backend_fallback"},
 			})
 		// Also test a cgo package.
 		if t.cgoEnabled && t.internalLink() && !disablePIE {
diff --git a/src/cmd/internal/obj/x86/pcrelative_test.go b/src/cmd/internal/obj/x86/pcrelative_test.go
index 3827100123f26d..92344e8a681114 100644
--- a/src/cmd/internal/obj/x86/pcrelative_test.go
+++ b/src/cmd/internal/obj/x86/pcrelative_test.go
@@ -63,6 +63,10 @@ func objdumpOutput(t *testing.T, mname, source string) []byte {
 		testenv.GoToolPath(t), "build", "-o",
 		filepath.Join(tmpdir, "output"))
 
+	// Crypto backends are not available on all platforms (CNG is not available
+	// on Linux), but it's ok to fall back to pure Go for this test.
+	cmd.Args = append(cmd.Args, "-tags=allow_missing_crypto_backend_fallback")
+
 	cmd.Env = append(os.Environ(),
 		"GOARCH=amd64", "GOOS=linux", "GOPATH="+filepath.Join(tmpdir, "_gopath"))
 	cmd.Dir = tmpdir
diff --git a/src/cmd/internal/testdir/testdir_test.go b/src/cmd/internal/testdir/testdir_test.go
index bd7785900c637a..0657ee09dc04ca 100644
--- a/src/cmd/internal/testdir/testdir_test.go
+++ b/src/cmd/internal/testdir/testdir_test.go
@@ -694,6 +694,10 @@ func (t test) run() error {
 			// -S=2 forces outermost line numbers when disassembling inlined code.
 			cmdline := []string{"build", "-gcflags", "-S=2"}
 
+			// Crypto backends are not available on all platforms (386), but
+			// it's ok to fall back to pure Go for this test.
+			cmdline = append(cmdline, "-tags=allow_missing_crypto_backend_fallback")
+
 			// Append flags, but don't override -gcflags=-S=2; add to it instead.
 			for i := 0; i < len(flags); i++ {
 				flag := flags[i]
diff --git a/src/cmd/link/internal/ld/stackcheck_test.go b/src/cmd/link/internal/ld/stackcheck_test.go
index dd7e20528f0959..6b0d28d14f4935 100644
--- a/src/cmd/link/internal/ld/stackcheck_test.go
+++ b/src/cmd/link/internal/ld/stackcheck_test.go
@@ -19,7 +19,7 @@ func TestStackCheckOutput(t *testing.T) {
 	testenv.MustHaveGoBuild(t)
 	t.Parallel()
 
-	cmd := testenv.Command(t, testenv.GoToolPath(t), "build", "-o", os.DevNull, "./testdata/stackcheck")
+	cmd := testenv.Command(t, testenv.GoToolPath(t), "build", "-tags=allow_missing_crypto_backend_fallback", "-o", os.DevNull, "./testdata/stackcheck")
 	// The rules for computing frame sizes on all of the
 	// architectures are complicated, so just do this on amd64.
 	cmd.Env = append(os.Environ(), "GOARCH=amd64", "GOOS=linux")
diff --git a/src/cmd/link/link_test.go b/src/cmd/link/link_test.go
index c37d6e57bc0920..a4fd751dcd7c3b 100644
--- a/src/cmd/link/link_test.go
+++ b/src/cmd/link/link_test.go
@@ -162,7 +162,7 @@ TEXT ·x(SB),0,$0
         MOVD ·zero(SB), AX
         RET
 `)
-	cmd := testenv.Command(t, testenv.GoToolPath(t), "build")
+	cmd := testenv.Command(t, testenv.GoToolPath(t), "build", "-tags=allow_missing_crypto_backend_fallback")
 	cmd.Dir = tmpdir
 	cmd.Env = append(os.Environ(),
 		"GOARCH=amd64", "GOOS=linux", "GOPATH="+filepath.Join(tmpdir, "_gopath"))
@@ -362,7 +362,7 @@ func TestMachOBuildVersion(t *testing.T) {
 	}
 
 	exe := filepath.Join(tmpdir, "main")
-	cmd := testenv.Command(t, testenv.GoToolPath(t), "build", "-ldflags=-linkmode=internal", "-o", exe, src)
+	cmd := testenv.Command(t, testenv.GoToolPath(t), "build", "-ldflags=-linkmode=internal", "-tags=allow_missing_crypto_backend_fallback", "-o", exe, src)
 	cmd.Env = append(os.Environ(),
 		"CGO_ENABLED=0",
 		"GOOS=darwin",
diff --git a/src/cmd/vet/vet_test.go b/src/cmd/vet/vet_test.go
index 8b29907e818c9d..f29a76796de71f 100644
--- a/src/cmd/vet/vet_test.go
+++ b/src/cmd/vet/vet_test.go
@@ -54,7 +54,7 @@ var (
 )
 
 func vetCmd(t *testing.T, arg, pkg string) *exec.Cmd {
-	cmd := testenv.Command(t, testenv.GoToolPath(t), "vet", "-vettool="+vetPath(t), arg, path.Join("cmd/vet/testdata", pkg))
+	cmd := testenv.Command(t, testenv.GoToolPath(t), "vet", "-tags=allow_missing_crypto_backend_fallback", "-vettool="+vetPath(t), arg, path.Join("cmd/vet/testdata", pkg))
 	cmd.Env = os.Environ()
 	return cmd
 }
diff --git a/src/crypto/internal/backend/backendgen.go b/src/crypto/internal/backend/backendgen.go
new file mode 100644
index 00000000000000..acf0113bbefb6c
--- /dev/null
+++ b/src/crypto/internal/backend/backendgen.go
@@ -0,0 +1,20 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package backend
+
+// Generate files and Go code based on the set of backends:
+//
+// - The build constraint in nobackend.go.
+// - Go files in the runtime package that detect issues with backend selection
+//   and report an error at compile time.
+//
+// Runs in -mod=readonly mode so that it is able to run during each crypto
+// backend patch. This is before the final vendoring refresh patch, so it would
+// normally fail to build due to inconsistent vendoring.
+
+// Use "go generate -run TestGenerated crypto/internal/backend"
+// to run only this generator.
+
+//go:generate go test -run TestGenerated -fix
diff --git a/src/crypto/internal/backend/backendgen_test.go b/src/crypto/internal/backend/backendgen_test.go
new file mode 100644
index 00000000000000..1cc4952e7ca9c2
--- /dev/null
+++ b/src/crypto/internal/backend/backendgen_test.go
@@ -0,0 +1,279 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package backend
+
+import (
+	"bytes"
+	"flag"
+	"go/build/constraint"
+	"go/parser"
+	"go/token"
+	"os"
+	"path/filepath"
+	"sort"
+	"strings"
+	"testing"
+)
+
+var fix = flag.Bool("fix", false, "if true, update the generated files to the wanted value")
+
+const runtimePackageDir = "../../../runtime"
+
+// backendErrPrefix is the prefix of the generated backend error files. Any file
+// in the runtime package with this prefix will be considered a backend error
+// file, so it's important that this prefix is unique or this generator may
+// delete unexpected files.
+const backendErrPrefix = "backenderr_gen_"
+
+const generateInstruction = "run 'go generate crypto/internal/backend' to fix"
+
+// TestGeneratedBackendErrorFiles tests that the current nobackend constraint
+// is correct.
+//
+// Generate the build constraint in nobackend.go. This build constraint enables
+// nobackend when all of the backends are not enabled. This constraint is fairly
+// long and would not be trivial to maintain manually.
+func TestGeneratedNobackendConstraint(t *testing.T) {
+	backends := parseBackends(t)
+	// none is a constraint that is met when all crypto backend constraints are
+	// unmet. (That is: no backend constraint is met.)
+	var none constraint.Expr
+	for _, b := range backends {
+		notB := &constraint.NotExpr{X: b.constraint}
+		if none == nil {
+			none = notB
+		} else {
+			none = &constraint.AndExpr{
+				X: none,
+				Y: notB,
+			}
+		}
+	}
+	bytes, err := os.ReadFile("nobackend.go")
+	if err != nil {
+		t.Fatal(err)
+	}
+	lines := strings.Split(string(bytes), "\n")
+
+	var gotIndex int
+	var gotLine string
+	for i, line := range lines {
+		if strings.HasPrefix(line, "//go:build ") {
+			gotIndex, gotLine = i, line
+			break
+		}
+	}
+	_ = gotIndex
+
+	var wantLine string
+	if none == nil {
+		// If there are no backends yet, use a trivially true constraint.
+		// We could remove the constraint line, but this would make generation
+		// more complicated.
+		wantLine = "//go:build go1.1"
+	} else {
+		wantLine = "//go:build " + none.String()
+	}
+	if wantLine != gotLine {
+		if *fix {
+			lines[gotIndex] = wantLine
+			want := strings.Join(lines, "\n")
+			if err := os.WriteFile("nobackend.go", []byte(want), 0o666); err != nil {
+				t.Fatal(err)
+			}
+		} else {
+			t.Errorf("nobackend.go build constraint:\ngot %q\nwant %q\n%v", gotLine, wantLine, generateInstruction)
+		}
+	}
+}
+
+// TestGeneratedBackendErrorFiles tests that the current backend error files are
+// the same as what would generated under the current conditions.
+//
+// The error files are Go files that detect issues with the backend selection
+// and report an error at compile time.
+//
+// The issue detection files are placed in the runtime package rather than the
+// crypto/internal/backend package to make sure these helpful errors will show
+// up. If the files were in the backend package, DuplicateDecl and other errors
+// would show up first, causing these informative errors to be skipped because
+// there are too many total errors already reported. The errors would also show
+// up if we put the files in the crypto package rather than the runtime package.
+// (Crypto is imported before the backend backage, so the errors would show up.)
+// However, then these errors would show up only if the Go program is using
+// crypto. This could cause a confusing situation: if the user has a
+// misconfigured backend and doesn't use crypto in their Go app, they will not
+// get any errors. If they start using crypto later, they would only then get an
+// error, but the cause would be much less apparent.
+func TestGeneratedBackendErrorFiles(t *testing.T) {
+	// Chip away at a list of files that should come from this generator.
+	// Any remaining are unexpected.
+	existingFiles := make(map[string]struct{})
+	entries, err := os.ReadDir(runtimePackageDir)
+	if err != nil {
+		t.Fatal(err)
+	}
+	for _, e := range entries {
+		if strings.HasPrefix(e.Name(), backendErrPrefix) && strings.HasSuffix(e.Name(), ".go") {
+			existingFiles[filepath.Join(runtimePackageDir, e.Name())] = struct{}{}
+		}
+	}
+
+	backends := parseBackends(t)
+	for i := 0; i < len(backends); i++ {
+		for j := i + 1; j < len(backends); j++ {
+			f := testConflict(t, backends[i].name, backends[j].name)
+			delete(existingFiles, f)
+		}
+		f := testPreventUnintendedFallback(t, backends[i])
+		delete(existingFiles, f)
+	}
+	f := testUnsatisfied(t, backends)
+	delete(existingFiles, f)
+	f = testRequireFIPSWithoutBackend(t)
+	delete(existingFiles, f)
+
+	for f := range existingFiles {
+		if *fix {
+			if err := os.Remove(f); err != nil {
+				t.Fatal(err)
+			}
+		} else {
+			t.Errorf("unexpected file: %q", f)
+		}
+	}
+	if !*fix && len(existingFiles) > 0 {
+		t.Log(generateInstruction)
+	}
+}
+
+// testConflict checks/generates a file that fails if two backends are enabled
+// at the same time.
+func testConflict(t *testing.T, a, b string) string {
+	return testErrorFile(
+		t,
+		filepath.Join(runtimePackageDir, backendErrPrefix+"conflict_"+a+"_"+b+".go"),
+		"//go:build goexperiment."+a+"crypto && goexperiment."+b+"crypto",
+		"The "+a+" and "+b+" backends are both enabled, but they are mutually exclusive.",
+		"Please make sure only one crypto backend experiment is enabled by GOEXPERIMENT or '-tags'.")
+}
+
+func testPreventUnintendedFallback(t *testing.T, backend *backend) string {
+	expTag := &constraint.TagExpr{Tag: "goexperiment." + backend.name + "crypto"}
+	optOutTag := &constraint.TagExpr{Tag: "allow_missing_crypto_backend_fallback"}
+	c := constraint.AndExpr{
+		X: &constraint.AndExpr{
+			X: expTag,
+			Y: &constraint.NotExpr{X: backend.constraint},
+		},
+		Y: &constraint.NotExpr{X: optOutTag},
+	}
+	return testErrorFile(
+		t,
+		filepath.Join(runtimePackageDir, backendErrPrefix+"nofallback_"+backend.name+".go"),
+		"//go:build "+c.String(),
+		"The "+expTag.String()+" tag is specified, but other tags required to enable that backend were not met.",
+		"Required build tags:",
+		"  "+backend.constraint.String(),
+		"Please check your build environment and build command for a reason one or more of these tags weren't specified.")
+}
+
+// testUnsatisfied checks/generates a file that fails if systemcrypto is enabled
+// on an OS with no suitable backend.
+func testUnsatisfied(t *testing.T, backends []*backend) string {
+	constraint := "//go:build goexperiment.systemcrypto"
+	for _, b := range backends {
+		constraint += ` && !goexperiment.` + b.name + "crypto"
+	}
+	return testErrorFile(
+		t,
+		filepath.Join(runtimePackageDir, backendErrPrefix+"systemcrypto_nobackend.go"),
+		constraint,
+		"The systemcrypto feature is enabled, but it was unable to enable an appropriate crypto backend for the target GOOS.")
+}
+
+func testRequireFIPSWithoutBackend(t *testing.T) string {
+	return testErrorFile(
+		t,
+		filepath.Join(runtimePackageDir, backendErrPrefix+"requirefips_nosystemcrypto.go"),
+		"//go:build requirefips && !goexperiment.systemcrypto",
+		"The requirefips tag is enabled, but no crypto backend is enabled.",
+		"A crypto backend is required to enable FIPS mode.")
+}
+
+// testErrorFile checks/generates a Go file with a given build constraint that
+// fails to compile. The file uses an unused string to convey an error message
+// to the dev on the "go build" command line.
+func testErrorFile(t *testing.T, file, constraint string, message ...string) string {
+	const header = `// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by crypto/internal/backend. DO NOT EDIT. DO NOT manually create files with the prefix "` + backendErrPrefix + `".`
+	c := header + "\n\n" + constraint + "\n\npackage runtime\n\nfunc init() {\n\t`\n"
+	for _, m := range message {
+		c += "\t" + m + "\n"
+	}
+	c += "\tFor more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips\n"
+	c += "\t`" + "\n}\n"
+	if *fix {
+		if err := os.WriteFile(file, []byte(c), 0o666); err != nil {
+			t.Fatal(err)
+		}
+	} else {
+		existing, err := os.ReadFile(file)
+		if err != nil {
+			t.Fatal(err)
+		}
+		if !bytes.Equal(existing, []byte(c)) {
+			t.Errorf("file %v doesn't match expected value; %v", file, generateInstruction)
+			t.Log("found:", string(existing))
+			t.Log("would generate:", c)
+		}
+	}
+	return file
+}
+
+type backend struct {
+	filename   string
+	name       string
+	constraint constraint.Expr
+}
+
+func parseBackends(t *testing.T) []*backend {
+	fs := token.NewFileSet()
+	pkgs, err := parser.ParseDir(fs, ".", nil, parser.ParseComments)
+	if err != nil {
+		t.Fatal(err)
+	}
+	var bs []*backend
+	// Any file in this dir that defines "Enabled" is a backend.
+	for k, v := range pkgs["backend"].Files {
+		if en := v.Scope.Lookup("Enabled"); en != nil {
+			// nobackend defines Enabled, but it is specifically not a backend.
+			if k == "nobackend.go" {
+				continue
+			}
+			b := backend{filename: k}
+			b.name, _, _ = strings.Cut(strings.TrimSuffix(k, ".go"), "_")
+			for _, comment := range v.Comments {
+				for _, c := range comment.List {
+					if strings.HasPrefix(c.Text, "//go:build ") {
+						if c, err := constraint.Parse(c.Text); err == nil {
+							b.constraint = c
+						} else {
+							t.Fatal(err)
+						}
+					}
+				}
+			}
+			bs = append(bs, &b)
+		}
+	}
+	sort.Slice(bs, func(i, j int) bool {
+		return bs[i].name < bs[j].name
+	})
+	return bs
+}
diff --git a/src/crypto/internal/backend/nobackend.go b/src/crypto/internal/backend/nobackend.go
index ad6081552af15d..64d2330186e795 100644
--- a/src/crypto/internal/backend/nobackend.go
+++ b/src/crypto/internal/backend/nobackend.go
@@ -4,7 +4,7 @@
 
 // Do not edit the build constraint by hand. It is generated by "backendgen.go".
 
-//go:build ignore
+//go:build !(goexperiment.boringcrypto && linux && cgo && (amd64 || arm64) && !android && !msan) && !(goexperiment.cngcrypto && windows) && !(goexperiment.opensslcrypto && linux && cgo && !android)
 
 package backend
 
diff --git a/src/runtime/backenderr_gen_conflict_boring_cng.go b/src/runtime/backenderr_gen_conflict_boring_cng.go
new file mode 100644
index 00000000000000..361db2a962d60f
--- /dev/null
+++ b/src/runtime/backenderr_gen_conflict_boring_cng.go
@@ -0,0 +1,17 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by crypto/internal/backend. DO NOT EDIT. DO NOT manually create files with the prefix "backenderr_gen_".
+
+//go:build goexperiment.boringcrypto && goexperiment.cngcrypto
+
+package runtime
+
+func init() {
+	`
+	The boring and cng backends are both enabled, but they are mutually exclusive.
+	Please make sure only one crypto backend experiment is enabled by GOEXPERIMENT or '-tags'.
+	For more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips
+	`
+}
diff --git a/src/runtime/backenderr_gen_conflict_boring_openssl.go b/src/runtime/backenderr_gen_conflict_boring_openssl.go
new file mode 100644
index 00000000000000..91fac35011b24c
--- /dev/null
+++ b/src/runtime/backenderr_gen_conflict_boring_openssl.go
@@ -0,0 +1,17 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by crypto/internal/backend. DO NOT EDIT. DO NOT manually create files with the prefix "backenderr_gen_".
+
+//go:build goexperiment.boringcrypto && goexperiment.opensslcrypto
+
+package runtime
+
+func init() {
+	`
+	The boring and openssl backends are both enabled, but they are mutually exclusive.
+	Please make sure only one crypto backend experiment is enabled by GOEXPERIMENT or '-tags'.
+	For more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips
+	`
+}
diff --git a/src/runtime/backenderr_gen_conflict_cng_openssl.go b/src/runtime/backenderr_gen_conflict_cng_openssl.go
new file mode 100644
index 00000000000000..bf44084570bbbc
--- /dev/null
+++ b/src/runtime/backenderr_gen_conflict_cng_openssl.go
@@ -0,0 +1,17 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by crypto/internal/backend. DO NOT EDIT. DO NOT manually create files with the prefix "backenderr_gen_".
+
+//go:build goexperiment.cngcrypto && goexperiment.opensslcrypto
+
+package runtime
+
+func init() {
+	`
+	The cng and openssl backends are both enabled, but they are mutually exclusive.
+	Please make sure only one crypto backend experiment is enabled by GOEXPERIMENT or '-tags'.
+	For more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips
+	`
+}
diff --git a/src/runtime/backenderr_gen_nofallback_boring.go b/src/runtime/backenderr_gen_nofallback_boring.go
new file mode 100644
index 00000000000000..764172d1159e17
--- /dev/null
+++ b/src/runtime/backenderr_gen_nofallback_boring.go
@@ -0,0 +1,19 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by crypto/internal/backend. DO NOT EDIT. DO NOT manually create files with the prefix "backenderr_gen_".
+
+//go:build goexperiment.boringcrypto && !(goexperiment.boringcrypto && linux && cgo && (amd64 || arm64) && !android && !msan) && !allow_missing_crypto_backend_fallback
+
+package runtime
+
+func init() {
+	`
+	The goexperiment.boringcrypto tag is specified, but other tags required to enable that backend were not met.
+	Required build tags:
+	  goexperiment.boringcrypto && linux && cgo && (amd64 || arm64) && !android && !msan
+	Please check your build environment and build command for a reason one or more of these tags weren't specified.
+	For more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips
+	`
+}
diff --git a/src/runtime/backenderr_gen_nofallback_cng.go b/src/runtime/backenderr_gen_nofallback_cng.go
new file mode 100644
index 00000000000000..3187f794dd49a4
--- /dev/null
+++ b/src/runtime/backenderr_gen_nofallback_cng.go
@@ -0,0 +1,19 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by crypto/internal/backend. DO NOT EDIT. DO NOT manually create files with the prefix "backenderr_gen_".
+
+//go:build goexperiment.cngcrypto && !(goexperiment.cngcrypto && windows) && !allow_missing_crypto_backend_fallback
+
+package runtime
+
+func init() {
+	`
+	The goexperiment.cngcrypto tag is specified, but other tags required to enable that backend were not met.
+	Required build tags:
+	  goexperiment.cngcrypto && windows
+	Please check your build environment and build command for a reason one or more of these tags weren't specified.
+	For more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips
+	`
+}
diff --git a/src/runtime/backenderr_gen_nofallback_openssl.go b/src/runtime/backenderr_gen_nofallback_openssl.go
new file mode 100644
index 00000000000000..36ea1ea1884d8c
--- /dev/null
+++ b/src/runtime/backenderr_gen_nofallback_openssl.go
@@ -0,0 +1,19 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by crypto/internal/backend. DO NOT EDIT. DO NOT manually create files with the prefix "backenderr_gen_".
+
+//go:build goexperiment.opensslcrypto && !(goexperiment.opensslcrypto && linux && cgo && !android) && !allow_missing_crypto_backend_fallback
+
+package runtime
+
+func init() {
+	`
+	The goexperiment.opensslcrypto tag is specified, but other tags required to enable that backend were not met.
+	Required build tags:
+	  goexperiment.opensslcrypto && linux && cgo && !android
+	Please check your build environment and build command for a reason one or more of these tags weren't specified.
+	For more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips
+	`
+}
diff --git a/src/runtime/backenderr_gen_requirefips_nosystemcrypto.go b/src/runtime/backenderr_gen_requirefips_nosystemcrypto.go
new file mode 100644
index 00000000000000..1c015dd2b08972
--- /dev/null
+++ b/src/runtime/backenderr_gen_requirefips_nosystemcrypto.go
@@ -0,0 +1,17 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by crypto/internal/backend. DO NOT EDIT. DO NOT manually create files with the prefix "backenderr_gen_".
+
+//go:build requirefips && !goexperiment.systemcrypto
+
+package runtime
+
+func init() {
+	`
+	The requirefips tag is enabled, but no crypto backend is enabled.
+	A crypto backend is required to enable FIPS mode.
+	For more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips
+	`
+}
diff --git a/src/runtime/backenderr_gen_systemcrypto_nobackend.go b/src/runtime/backenderr_gen_systemcrypto_nobackend.go
new file mode 100644
index 00000000000000..97ba7da6260b50
--- /dev/null
+++ b/src/runtime/backenderr_gen_systemcrypto_nobackend.go
@@ -0,0 +1,16 @@
+// Copyright 2023 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// This file is generated by crypto/internal/backend. DO NOT EDIT. DO NOT manually create files with the prefix "backenderr_gen_".
+
+//go:build goexperiment.systemcrypto && !goexperiment.boringcrypto && !goexperiment.cngcrypto && !goexperiment.opensslcrypto
+
+package runtime
+
+func init() {
+	`
+	The systemcrypto feature is enabled, but it was unable to enable an appropriate crypto backend for the target GOOS.
+	For more information, visit https://github.com/microsoft/go/tree/microsoft/main/eng/doc/fips
+	`
+}
diff --git a/src/syscall/exec_linux_test.go b/src/syscall/exec_linux_test.go
index f4ff7bf81b358b..b4504afac961c0 100644
--- a/src/syscall/exec_linux_test.go
+++ b/src/syscall/exec_linux_test.go
@@ -277,7 +277,7 @@ func TestUnshareMountNameSpaceChroot(t *testing.T) {
 		}
 	})
 
-	cmd := testenv.Command(t, testenv.GoToolPath(t), "test", "-c", "-o", x, "syscall")
+	cmd := testenv.Command(t, testenv.GoToolPath(t), "test", "-c", "-o", x, "-tags=allow_missing_crypto_backend_fallback", "syscall")
 	cmd.Env = append(cmd.Environ(), "CGO_ENABLED=0")
 	if o, err := cmd.CombinedOutput(); err != nil {
 		t.Fatalf("Build of syscall in chroot failed, output %v, err %v", o, err)
