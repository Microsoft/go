<!-- Copyright (c) Microsoft Corporation. Use of this source code is governed by a BSD-style license that can be found in the LICENSE file. -->
<Project Sdk="Microsoft.NET.Sdk">

  <!-- Minimal stubs for '.proj' to work. -->
  <PropertyGroup>
    <TargetFramework>net7.0</TargetFramework>
  </PropertyGroup>
  <Target Name="CreateManifestResourceNames" />
  <Target Name="CoreCompile" />

  <!-- https://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/650/MicroBuild-Signing -->
  <ItemGroup>
    <PackageReference Include="Microsoft.VisualStudioEng.MicroBuild.Core" Version="1.0.0" />
  </ItemGroup>

  <Target Name="PrepSign" BeforeTargets="AfterBuild">
    <Error Condition="'$(SignType)' != 'real' AND '$(SignType)' != 'test'" Text="Unexpected SignType '$(SignType)'" />
    <PropertyGroup>
      <IsTestSign>true</IsTestSign>
      <IsTestSign Condition="'$(SignType)' == 'real'">false</IsTestSign>
    </PropertyGroup>

    <PropertyGroup>
      <OutDir>$([MSBuild]::NormalizeDirectory('$(SignFilesDir)'))</OutDir>
    </PropertyGroup>

    <Error Condition="'$(SignFilesDir)' == ''" Text="'SignFilesDir' required." />
    <Message Text="Signing files in $(SignFilesDir)." Importance="high" />

    <ItemGroup>
      <LinuxGoFile Include="$([MSBuild]::NormalizeDirectory('$(SignFilesDir)'))**/go.*.tar.gz">
        <Authenticode>LinuxSignManagedLanguageCompiler</Authenticode>
      </LinuxGoFile>

      <LinuxGoSigFile Include="@(LinuxGoFile -> '%(Identity).sig')" />
      <FilesToSign Include="@(LinuxGoSigFile)" />

      <GoZipFile Include="$([MSBuild]::NormalizeDirectory('$(SignFilesDir)'))**/go.*.zip" />
      <GoZipFile ExtractedDir="$([MSBuild]::NormalizeDirectory('%(Identity).extracted'))" />

      <FileExtensionSignInfo Include=".sig" CertificateName="LinuxSignManagedLanguageCompiler" />
    </ItemGroup>

    <!-- Prepare files that we want to sign. -->

    <!--
      Copy the "tar.gz" file to "tar.gz.sig". The signing process sends the "tar.gz.sig" file to get
      a signature, then replaces the "tar.gz.sig" file's content in-place with the result. We need
      to preemptively make a renamed copy of the file so we end up with both the original file and
      sig on the machine.
    -->
    <Copy SourceFiles="@(LinuxGoFile)" DestinationFiles="@(LinuxGoSigFile)" />
    <!--
      SignTool notices zip containers and tries to extract them and update them in-place. The way it
      does this is very slow (30 minutes), so unpack/repack ourselves, instead.
    -->
    <Unzip
      SourceFiles="%(GoZipFile.Identity)"
      DestinationFolder="%(GoZipFile.ExtractedDir)" />
    <ItemGroup>
      <FilesToSign Include="%(GoZipFile.ExtractedDir)**\*.exe">
        <Authenticode>Microsoft400</Authenticode>
      </FilesToSign>
      <!--
        Remove test data: some files (especially zip files) are set up in very particular ways that
        SignTool doesn't reconstruct properly after recursing into the container. This causes "go
        tool dist test" to fail when run on a signed build.
      -->
      <FilesToSign Remove="%(GoZipFile.ExtractedDir)**\testdata\**" />
    </ItemGroup>
  </Target>

  <Target Name="AfterSign" AfterTargets="SignFiles">
    <!--
      Now that the contents are signed (in place), re-pack the zip file. Use our "pack" command
      (rather than MSBuild's ZipDirectory task) so we also generate a new checksum file
      automatically. Signing the zip's contents has invalidated the old checksum.
    -->
    <Exec Command="pwsh ..\run.ps1 pack -source %(GoZipFile.ExtractedDir)go -o %(GoZipFile.Identity)" />
    <!-- Remove the large extracted dir so the build job doesn't upload it. -->
    <RemoveDir Directories="@(GoZipFile -> '%(ExtractedDir)')" />
  </Target>

  <Target Name="SignFiles" BeforeTargets="PrepSign">
    <Error Text="Assertion failed: this target should not exist! Is the signing plugin installed? When its target file is loaded, it should overwrite this SignFiles target." />
  </Target>

</Project>
