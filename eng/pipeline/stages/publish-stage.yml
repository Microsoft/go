# Copyright (c) Microsoft Corporation.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Create a build asset JSON file as a pipeline artifact and publish build artifacts to blob storage.

parameters:
  - name: public
    type: boolean

  - name: pool
    type: object

  # Unused. Declared so pool selection doesn't fail when trying to pass them.
  - name: builder
    type: object
  - name: official
    type: boolean

stages:
  - stage: Publish${{ parameters.public }}
    ${{ if parameters.public }}:
      displayName: Publish Public
    ${{ else }}:
      displayName: Publish Internal
    dependsOn: Sign
    jobs:
      - job: Publish
        pool: ${{ parameters.pool }}

        variables:
          - ${{ if parameters.public }}:
            - name: blobContainer
              value: 'https://dotnetbuildoutput.blob.core.windows.net/golang/microsoft'
            - name: blobSASArg
              value: --sas-token '$(dotnetbuildoutput-golang-write-sas-query)'
          - ${{ else }}:
            - name: blobContainer
              value: 'https://golangartifacts.blob.core.windows.net/microsoft'
            - name: blobSASArg
              value: '' # golangartifacts is set up with service connection auth.

          - name: blobDestinationUrl
            value: '$(blobContainer)/$(PublishBranchAlias)/$(Build.BuildNumber)'

          - group: go-storage

        workspace:
          clean: all

        templateContext:
          outputs:
            # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/outputs
            - output: pipelineArtifact
              path: $(Pipeline.Workspace)/Binaries Signed/assets.json
              ${{ if parameters.public }}:
                artifact: BuildAssets
              ${{ else }}:
                artifact: BuildAssetsInternal

        steps:
          - template: ../steps/checkout-unix-task.yml
          - template: ../steps/init-pwsh-task.yml
          - template: ../steps/init-submodule-task.yml

          - pwsh: |
              function TrimStart($s, $prefix) {
                if ($s.StartsWith($prefix)) {
                  return $s.Substring($prefix.Length)
                }
                return $s
              }
              $branch = "$(Build.SourceBranch)"
              Write-Host "For Build.SourceBranch '$branch',"

              # $(Build.SourceBranchName) only gives us "feature" for "refs/heads/dev/feature". We
              # want to publish this as "dev/feature". So, use $(Build.SourceBranch) and figure it
              # out ourselves.
              $branch = TrimStart $branch "refs/heads/"

              # Don't include "microsoft/" virtual directory prefix: we are already in the
              # "microsoft" container, so this would result in "microsoft/microsoft/main".
              $branch = TrimStart $branch "microsoft/"

              Write-Host "PublishBranchAlias is: $branch"
              Write-Host "##vso[task.setvariable variable=PublishBranchAlias;]$branch"
            displayName: Find publish branch alias

          - download: current
            artifact: Binaries Signed
            # Filter out manifests added by 1ES pipeline template.
            patterns: '!_manifest/**'
            displayName: 'Download: Binaries Signed'

          - pwsh: |
              eng/run.ps1 createbuildassetjson `
                -artifacts-dir '$(Pipeline.Workspace)/Binaries Signed/' `
                -source-dir '$(Build.SourcesDirectory)' `
                -destination-url '$(blobDestinationUrl)' `
                -branch '$(PublishBranchAlias)' `
                -o '$(Pipeline.Workspace)/Binaries Signed/assets.json'
            displayName: 'Create build asset JSON'

          - task: AzureCLI@2
            displayName: Upload to blob storage
            inputs:
              azureSubscription: GoLang
              scriptType: bash
              scriptLocation: inlineScript
              # Send literal '*' to az: it handles the wildcard itself. Az copy only accepts one
              # "from" argument, so we can't use the shell's wildcard expansion.
              inlineScript: |
                az storage copy -s '*' -d '$(blobDestinationUrl)' $(blobSASArg)
              workingDirectory: '$(Pipeline.Workspace)/Binaries Signed/'

          - script: |
              echo 'Generated links to artifacts in blob storage:'
              echo ''
              for f in *; do
                echo "$(blobDestinationUrl)/$f"
              done
            displayName: Show uploaded URLs
            workingDirectory: '$(Pipeline.Workspace)/Binaries Signed/'
