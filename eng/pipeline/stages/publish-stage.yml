# Copyright (c) Microsoft Corporation.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# Create a build asset JSON file as a pipeline artifact and publish build artifacts to blob storage.

parameters:
  - name: public
    type: boolean

  - name: pool
    type: object

  - name: publishExistingRunID
    type: string
    default: 'nil'

  # Unused. Declared so pool selection doesn't fail when trying to pass them.
  - name: builder
    type: object
  - name: official
    type: boolean
  - name: builders
    type: object
    default: []
  - name: publishSymbols
    type: boolean
    default: false

stages:
  - stage: Publish${{ parameters.public }}
    ${{ if parameters.public }}:
      displayName: Publish Public
    ${{ else }}:
      displayName: Publish Internal
    ${{ if eq(parameters.publishExistingRunID, 'nil') }}:
      dependsOn: Sign
    ${{ else }}:
      dependsOn: []
    jobs:
      - job: Publish
        pool: ${{ parameters.pool }}

        variables:
          - name: blobBackupAccount
            value: golangartifactsbackup
          - name: blobContainer
            ${{ if parameters.public }}:
              value: 'https://dotnetbuildoutput.blob.core.windows.net/golang/microsoft'
            ${{ else }}:
              value: 'https://$(blobBackupAccount).blob.core.windows.net/microsoft'

          - name: blobPrefix
            value: '$(PublishBranchAlias)/$(Build.BuildNumber)'
          - name: blobDestinationUrl
            value: '$(blobContainer)/$(blobPrefix)'

          - group: go-storage

        workspace:
          clean: all

        templateContext:
          outputs:
            # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/outputs
            - output: pipelineArtifact
              path: $(Pipeline.Workspace)/Binaries Signed/assets.json
              # Single file publish requires folder to be specified.
              # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/sbom#specifying-sbom-build-drop-path-build-component-path-package-name-and-package-version-per-1es-pt-output
              sbomBuildDropPath: $(Pipeline.Workspace)/Binaries Signed
              ${{ if parameters.public }}:
                artifact: BuildAssets
              ${{ else }}:
                artifact: BuildAssetsInternal
            - ${{ if parameters.publishSymbols }}:
              - output: pipelineArtifact
                path: $(Pipeline.Workspace)/Symbols
                ${{ if parameters.public }}:
                  artifact: Symbols
                ${{ else }}:
                  artifact: SymbolsInternal

        steps:
          - template: ../steps/checkout-windows-task.yml
          - template: ../steps/init-submodule-task.yml
          - template: ../steps/find-PublishBranchAlias-task.yml

          - template: ../steps/download-signed-binaries-task.yml
            parameters:
              runID: ${{ parameters.publishExistingRunID }}

          - pwsh: |
              eng/run.ps1 createbuildassetjson `
                -artifacts-dir '$(Pipeline.Workspace)/Binaries Signed/' `
                -source-dir '$(Build.SourcesDirectory)' `
                -destination-url '$(blobDestinationUrl)' `
                -branch '$(PublishBranchAlias)' `
                -o '$(Pipeline.Workspace)/Binaries Signed/assets.json'
            displayName: 'Create build asset JSON'

          - ${{ if parameters.public }}:
            - task: AzureCLI@2
              displayName: Upload to blob storage
              inputs:
                azureSubscription: GoLang
                scriptType: bash
                scriptLocation: inlineScript
                # Send literal '*' to az: it handles the wildcard itself. Az copy only accepts one
                # "from" argument, so we can't use the shell's wildcard expansion.
                inlineScript: |
                  az storage copy -s '*' -d '$(blobDestinationUrl)' --sas-token '$(dotnetbuildoutput-golang-write-sas-query)'
                workingDirectory: '$(Pipeline.Workspace)/Binaries Signed/'
          - ${{ else }}:
            - task: AzureFileCopy@6
              displayName: Upload to blob storage
              inputs:
                Destination: AzureBlob
                azureSubscription: golang-pme-storage
                storage: $(blobBackupAccount)
                ContainerName: microsoft
                SourcePath: '$(Pipeline.Workspace)/Binaries Signed/*'
                BlobPrefix: $(blobPrefix)

          - pwsh: |
              Write-Host 'Generated links to artifacts in blob storage:'
              Write-Host ''
              Get-ChildItem -File -Path '.' | %{
                Write-Host "$(blobDestinationUrl)/$($_.Name)"
              }
            displayName: Show expected uploaded URLs
            workingDirectory: '$(Pipeline.Workspace)/Binaries Signed/'

          - ${{ if eq(parameters.publishSymbols, true) }}:
            - ${{ each builder in parameters.builders }}:
              - ${{ if eq(parameters.publishExistingRunID, 'nil') }}:
                - download: current
                  artifact: Symbols ${{ builder.id }}
                  # Filter out manifests added by 1ES pipeline template.
                  patterns: '!_manifest/**'
                  displayName: 'Download: Symbols ${{ builder.id }}'
              - ${{ else }}:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download: Symbols ${{ builder.id }} (Specific)'
                  inputs:
                    buildType: specific
                    project: $(System.TeamProject)
                    definition: $(System.DefinitionId)
                    runVersion: 'specific'
                    runId: ${{ parameters.publishExistingRunID }}
                    artifact: Symbols ${{ builder.id }}
                    # Filter out manifests added by 1ES pipeline template.
                    patterns: '!_manifest/**'
                    targetPath: '$(Pipeline.Workspace)/Symbols ${{ builder.id }}'

              - pwsh: |
                  $flatDir = "$(Pipeline.Workspace)/Symbols"
                  New-Item $flatDir -ItemType Directory -ErrorAction Ignore

                  Get-ChildItem -Recurse -File -Path @(
                    'Symbols ${{ builder.id }}'
                  ) | %{
                    if (Test-Path "$flatDir\$($_.Name)") {
                      throw "Duplicate filename, unable to flatten: $($_.FullName)"
                    }
                    Copy-Item $_.FullName $flatDir
                  }
                displayName: 'Flatten: Symbols ${{ builder.id }}'
                workingDirectory: '$(Pipeline.Workspace)'
            - task: PublishSymbols@2
              inputs:
                SymbolsFolder: $(Pipeline.Workspace)/Symbols
                SearchPattern: '*.pdb'
                SymbolServerType: TeamServices
                # Source indexing doesn't work for us. It needs the source files to be available
                # in the AzDO repo, but we pull them at build time using a git submodule.
                # See https://github.com/microsoft/go-lab/issues/67.
                IndexSources: false
              displayName: Publish symbols
