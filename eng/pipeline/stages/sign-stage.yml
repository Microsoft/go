# Copyright (c) Microsoft Corporation.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# This job downloads Go binaries from the specified builders' pipeline artifacts, signs them, and
# publishes the signed files and signatures into a consolidated pipeline artifact.

parameters:
  - name: builder
    type: object
  - name: official
    type: boolean
  - name: pool
    type: object

  # [] of { id, os, arch, config, distro?, experiment?, broken? }
  - name: builders
    type: object

  - name: signExistingRunID
    type: string

stages:
  - stage: Sign
    ${{ if eq(parameters.signExistingRunID, 'nil') }}:
      dependsOn:
        # Depend on all build stages that produced artifacts that need signing.
        - ${{ each builder in parameters.builders }}:
          - ${{ builder.id }}
    ${{ else }}:
      dependsOn: []
    jobs:
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest')) }}:
        - job: Sign
          pool: ${{ parameters.pool }}
          workspace:
            clean: all

          # Give the sign task leeway to finish up after hitting its own timeout.
          timeoutInMinutes: 80

          templateContext:
            mb:
              signing:
                enabled: true
                signType: $(SigningType)
                zipSources: false
                feedSource: 'https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json'
            outputs:
              # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/outputs
              - output: pipelineArtifact
                path: 'eng\signing\signed'
                artifact: Binaries Signed

              - output: pipelineArtifact
                path: 'eng\signing\signing-temp'
                artifact: Signing temp directory $(System.JobAttempt)
                condition: always()

              - output: pipelineArtifact
                path: 'eng\signing'
                artifact: Signing diagnosis directory $(System.JobAttempt)
                condition: always()

          steps:
            - template: ../steps/checkout-windows-task.yml

            - ${{ each builder in parameters.builders }}:
              - ${{ if eq(parameters.signExistingRunID, 'nil') }}:
                - download: current
                  artifact: Binaries ${{ builder.id }}
                  # Filter out manifests added by 1ES pipeline template.
                  patterns: '!_manifest/**'
                  displayName: 'Download: Binaries ${{ builder.id }}'
              - ${{ else }}:
                - task: DownloadPipelineArtifact@2
                  displayName: 'Download: Binaries ${{ builder.id }} (Specific)'
                  inputs:
                    buildType: specific
                    project: $(System.TeamProject)
                    definition: $(System.DefinitionId)
                    runVersion: 'specific'
                    runId: ${{ parameters.signExistingRunID }}
                    artifact: Binaries ${{ builder.id }}
                    # Filter out manifests added by 1ES pipeline template.
                    patterns: '!_manifest/**'
                    targetPath: '$(Pipeline.Workspace)/Binaries ${{ builder.id }}'

            - pwsh: |
                eng/run.ps1 sign `
                  -files '$(Pipeline.Workspace)/Binaries */*' `
                  -sign-type '$(SignType)' `
                  -timeout 60m
              displayName: Sign Files
